{"version":3,"sources":["components/GridRow.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/AddCash.js","components/DeleteTag.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridRow","on_remove_from_tag","this","props","on_delete_ticker","current_quote","performance","performance_numbers","performance_baseline","performance_baseline_numbers","ticker_is_index","current_position","styleCell","column","classes","change_pct","short_change_pct","short","medium_change_pct","medium","long_change_pct","long","current_shares","basis","realized_gains","row_classes","symbol","percent_gains","current_value","current_price","percent_value","total_value","all_tags","tag_membership","Object","keys","forEach","tag_name","includes","push","className","map","key","onClick","e","length","columns","variable_name","num_decimals","value","baseline_value","prefix","suffix","adjust_decimal","performance_value","variable_type","volume","isNaN","hasOwnProperty","Math","pow","scaling_power","round","toFixed","populateCellValue","populateButton","React","Component","AddTicker","state","user_tickers_string","add_to_tag","handleTickersChange","bind","handleTagChange","handleReset","handleSubmit","validateTickers","event","setState","target","preventDefault","user_tag","user_tickers","String","split","str","trim","toUpperCase","replace","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","self","ticker","all_stocks","tagged_tickers","concat","on_new_tickers","on_new_messages","id","onSubmit","onReset","onChange","placeholder","required","sort","filter","type","disabled","AddTag","user_tags_string","handleChange","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction","validateTransaction","new_value","name","user_transaction","action","num_shares","parseInt","total","parseFloat","valid_transaction","on_new_transaction","size","AddCash","user_action","user_cash_amount","handleCashChange","handleActionChange","on_new_cash","DeleteTag","delete_tag","on_delete_tag","InputForms","zero_performance","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","status_messages","index_performance","allPerformanceNumbers","show_index","show_holdings","show_cash","show_tagged","show_untagged","sort_column","sort_dir_asc","done","tickerIsIndex","convertNameForIndicies","getPositionFromTransactions","getPositionFromCashTransactions","onInputChange","onShowInputChange","onChangeSort","onNewTransaction","onNewCash","onNewMessages","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","getIndicies","getHoldings","getTagged","getUntagged","stored_performance_baseline","JSON","parse","localStorage","getItem","stored_sort_column","stored_sort_dir_asc","stored_allTags","stored_allTransactions","control","stored_control","indexed_transaction_data","stringify","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","quoteTimeSeries","monthly_prices","entries","price","now","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","transactions","inflows","outflows","substr","cash_transactions","cash_transaction","cash_amount","new_baseline","setItem","new_baseline_numbers","checked","new_sort_column","prevState","idx","indexOf","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newStatusMessages","new_message","new_transaction","orig_basis","orig_current_shares","orig_realized_gains","updatedPosition","new_cash_transaction","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","new_messages","holding","reduce","current_val","tickers_to_show","unique_tickers_to_show","quote_columns","holdings_columns","performance_columns","sort_triangle","fromCharCode","sorted_tickers","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","all_columns","display_name","display_columns","column_variable","reverse","message","i","startsWith","htmlFor","cellSpacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89467e4a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRow extends React.Component {\n\n    render() {\n        const on_remove_from_tag = this.props.on_remove_from_tag\n        const on_delete_ticker = this.props.on_delete_ticker\n        const current_quote = this.props.current_quote\n        const performance = this.props.performance_numbers\n        const performance_baseline = this.props.performance_baseline\n        const performance_baseline_numbers = this.props.performance_baseline_numbers\n        const ticker_is_index = this.props.ticker_is_index\n        let current_position = this.props.current_position\n        if (current_position == null) {\n            current_position = {\n                current_shares: 0,\n                basis: 'n/a',\n                realized_gains: 'n/a'\n            }\n        }\n\n        function populateCellValue(column) {\n            let prefix = ''\n            let suffix = ''\n            let adjust_decimal = false\n            let num_decimals\n            let value, baseline_value\n            let performance_value = false\n            switch (column.variable_type) {\n                case 'number':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    break\n                case 'currency':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    prefix = '$'\n                    break\n                case 'percentage':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    suffix = '%'\n                    break\n                default:\n                    break\n            }\n            switch (column.variable_name) {\n                case 'symbol':\n                    value = current_quote.symbol\n                    break\n                case 'current_shares':\n                    value = current_position.current_shares\n                    break\n                case 'current_price':\n                    value = current_quote.current_price\n                    break\n                case 'current_value':\n                    value = current_value\n                    break\n                case 'percent_value':\n                    value = percent_value\n                    break\n                case 'basis':\n                    value = basis\n                    break\n                case 'percent_gains':\n                    value = percent_gains\n                    break\n                case 'realized_gains':\n                    value = current_position.realized_gains\n                    break\n                case 'change_pct':\n                    value = current_quote.change_pct\n                    break\n                case 'volume':\n                    value = current_quote.volume\n                    break\n                case 'dollar_volume':\n                    value = current_quote.current_price * current_quote.volume\n                    break\n                case 'short_change_pct':\n                    value = performance.short_change_pct\n                    performance_value = true\n                    baseline_value = performance_baseline_numbers.short\n                    break\n                case 'medium_change_pct':\n                    value = performance.medium_change_pct\n                    performance_value = true\n                    baseline_value = performance_baseline_numbers.medium\n                    break\n                case 'long_change_pct':\n                    value = performance.long_change_pct\n                    performance_value = true\n                    baseline_value = performance_baseline_numbers.long\n                    break\n                default:\n                    break\n            }\n\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else if (column.variable_type === 'string') {\n                return value\n            } else if (!isNaN(value)) {\n                if (adjust_decimal) {\n                    if (column.hasOwnProperty('scaling_power')) {\n                        value *= Math.pow(10, column.scaling_power)\n                    }\n                    if (performance_value && performance_baseline !== 'zero_pct_gain') {\n                        value = value - baseline_value\n                    }\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n                return value = prefix + value + suffix\n\n            } else {\n                return '??'\n            }\n        }\n\n        function populateButton(column) {\n            if (column.variable_name === 'symbol' && !ticker_is_index(current_quote.symbol)) {\n                return (\n                    <button onClick={ (e) => {on_delete_ticker(e, current_quote.symbol)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n\n        function styleCell(column) {\n            let classes = 'position-cell'\n            switch (column) {\n                case 'change_pct':\n                    if (current_quote.change_pct > 0) {\n                        classes += ' text-green'\n                    } else if (current_quote.change_pct < 0) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'short_change_pct':\n                    if (performance.short_change_pct > 0 && performance.short_change_pct > performance_baseline_numbers.short) {\n                        classes += ' text-green'\n                    } else if (performance.short_change_pct < 0 && performance.short_change_pct < performance_baseline_numbers.short) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'medium_change_pct':\n                    if (performance.medium_change_pct > 0 && performance.medium_change_pct > performance_baseline_numbers.medium) {\n                        classes += ' text-green'\n                    } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < performance_baseline_numbers.medium) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'long_change_pct':\n                    if (performance.long_change_pct > 0 && performance.long_change_pct > performance_baseline_numbers.long) {\n                        classes += ' text-green'\n                    } else if (performance.long_change_pct < 0 && performance.long_change_pct < performance_baseline_numbers.long) {\n                        classes += ' text-red'\n                    }\n                    break\n                default:\n                    break\n            }\n            return classes\n        }\n\n        let row_classes = 'position-row' \n        if (this.props.ticker_is_index(current_quote.symbol)) {\n            row_classes += ' position-is-index'\n        }\n        if (current_quote.symbol === 'cash') {\n            row_classes += ' position-is-cash'\n        }\n\n        let current_value = (current_position.current_shares) ? current_quote.current_price * current_position.current_shares : 'n/a'\n        let percent_value = (current_value !== 'n/a') ? current_value / this.props.total_value * 100 : 'n/a'\n        let basis = (current_position.basis) ? current_position.basis : 'n/a'\n        let percent_gains\n        if (current_position.current_shares === 0) {\n            percent_gains = 'n/a'\n        } else if (current_position.basis >= current_value) {\n            percent_gains = 'losing'\n        } else if (current_value > current_position.basis) {\n            percent_gains = (1 - current_position.basis / current_value) * 100\n        }\n\n        let all_tags = this.props.all_tags\n        let tag_membership = []\n        Object.keys(all_tags).forEach(function(tag_name) {\n            if (tag_name !== 'untagged' && all_tags[tag_name].includes(current_quote.symbol)) {\n                tag_membership.push(tag_name)\n            }\n        })\n\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { tag_membership.map( tag_name => (\n                        <button key={tag_name} onClick={ (e) => {on_remove_from_tag(e, tag_name, current_quote.symbol)}}>\n                            {tag_name}\n                        </button>\n                    ))}\n                    { (!tag_membership.length) ? '-' : '' }\n                </td>\n                { this.props.columns.map(column => (\n                <td key={column.variable_name} className={ styleCell(column.variable_name) }>{ populateCellValue(column) }{ populateButton(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.propTypes = {\n    columns: PropTypes.array,\n    all_tags: PropTypes.object,\n    current_quote: PropTypes.object,\n    current_position: PropTypes.object,\n    performance_numbers: PropTypes.object,\n    performance_baseline: PropTypes.string,\n    performance_baseline_numbers: PropTypes.object,\n    total_value: PropTypes.number,\n    ticker_is_index: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.user_tickers_string===''} />\n                        <input type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_status_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.user_tags_string===''} />\n                        <input type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleReset(event) {\n        this.setState({ \n            transaction: ''\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push('ERROR: Transaction \"' + transaction + '\" must be 4 terms.')\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction = action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n                this.props.on_new_transaction(valid_transaction)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"30\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.transaction===''} />\n                        <input type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddCash extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_action = this.state.user_action\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.')\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction = user_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n            this.props.on_new_cash(valid_transaction)\n            this.handleReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" placeholder=\"$500.99\" disabled={this.state.user_cash_amount===''} />\n                        <input type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddCash.propTypes = {\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push('Tag \"' + user_tag + '\" has now been deleted.')\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { AddCash } from './AddCash'\nimport { DeleteTag } from './DeleteTag'\n\n\nexport class InputForms extends React.Component {\n\n    render() {\n        return (\n            <section>\n                <AddTicker\n                    all_stocks={this.props.all_stocks}\n                    all_tags={this.props.all_tags}\n                    on_new_tickers={this.props.on_new_tickers}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddTag\n                    all_tags={this.props.all_tags}\n                    on_new_tags={this.props.on_new_tags}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <DeleteTag\n                    all_tags={this.props.all_tags}\n                    on_delete_tag={this.props.on_delete_tag}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddTransaction\n                    all_stocks={this.props.all_stocks}\n                    all_tags={this.props.all_tags}\n                    on_new_transaction={this.props.on_new_transaction}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddCash\n                    on_new_cash={this.props.on_new_cash}\n                    on_new_messages={this.props.on_new_messages}\n                />\n            </section>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n}","import React from 'react'\nimport { GridRow } from './components/GridRow'\nimport { InputForms } from './components/InputForms'\n\n\nconst zero_performance = { short: 0, medium: 0, long: 0 }\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: {},\n            allTags: {\n                'untagged': []\n            },\n            status_messages: [],\n            performance_baseline: 'zero_pct_gain',\n            performance_baseline_numbers: {},\n            index_performance: {},\n            allPerformanceNumbers: {},\n            show_index: true,\n            show_holdings: true,\n            show_cash: true,\n            show_tagged: true,\n            show_untagged: true,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getPositionFromTransactions = this.getPositionFromTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n    }\n\n    componentDidMount() {\n\n        const stored_performance_baseline = JSON.parse(localStorage.getItem(\"performance_baseline\"))\n        if (stored_performance_baseline !== null) {\n            this.setState({ performance_baseline: stored_performance_baseline })\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n        }\n\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n        }\n\n        let self = this\n\n        const view_controls = ['show_index', 'show_holdings', 'show_cash', 'show_tagged', 'show_untagged']\n        view_controls.forEach(function(control) {\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_transaction_data = {}\n        if (stored_allTransactions !== null) {\n            indexed_transaction_data = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short'] = (now - prev_short) / now * 100\n                index_performance['medium'] = (now - prev_medium) / now * 100\n                index_performance['long'] = (now - prev_long) / now * 100\n            }\n        })\n        if (stored_performance_baseline !== 'sp500_pct_gain') {\n            this.setState({ performance_baseline_numbers: index_performance })\n        } else {\n            this.setState({ performance_baseline_numbers: zero_performance })\n        }\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition = self.getPositionFromTransactions(indexed_transaction_data[ticker])\n                newPosition['symbol'] = ticker\n                newPositions[ticker] = newPosition\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (stored_performance_baseline === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        if (indexed_transaction_data.hasOwnProperty('cash')) {\n            let newPosition = {}\n            newPosition = self.getPositionFromCashTransactions(indexed_transaction_data['cash'])\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getPositionFromTransactions(transactions) {\n        let inflows = 0, outflows = 0, current_shares = 0, action, num_shares, ticker, value\n\n        transactions.forEach(function(transaction) {\n            [action, num_shares, ticker, value] = transaction.split(' ')\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [action, value] = cash_transaction.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline = event.target.value\n            localStorage.setItem('performance_baseline', JSON.stringify(new_baseline))\n            let new_baseline_numbers = (new_baseline === 'sp500_pct_gain') ? this.state.index_performance : zero_performance\n            this.setState({ performance_baseline: new_baseline })\n            this.setState({ performance_baseline_numbers: new_baseline_numbers })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n        localStorage.setItem(name, JSON.stringify(new_value))\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onDeleteTicker(event, delete_ticker) {\n        this.setState(prevState => {\n\n            // update tags\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            delete newAllTransactions[delete_ticker]\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            newStatusMessages = [...newStatusMessages, ...new_message]\n\n            return { allTags: newAllTags, allPositions: newAllPositions, allTransactions: newAllTransactions, status_messages: newStatusMessages }\n        })\n    }\n\n    onNewTransaction(new_transaction) {\n        let action, num_shares, ticker, total\n        [action, num_shares, ticker, total]  = new_transaction.split(' ')\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty(ticker) && newAllTransactions[ticker] !== null) {\n                newAllTransactions[ticker] = newAllTransactions[ticker].concat([new_transaction])\n            } else {\n                newAllTransactions[ticker] = [new_transaction]\n            }\n\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares,\n                realized_gains: orig_realized_gains // FIXME: refactor out this attribute, merge with \"basis\"\n            }\n\n            newAllPositions[ticker] = updatedPosition\n\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n            return { allTransactions: newAllTransactions, allPositions: newAllPositions }\n        })\n        this.onNewTickers('untagged', [ticker])\n    }\n\n    onNewCash(new_cash_transaction) {\n        let action, total\n        [action, total]  = new_cash_transaction.split(' ')\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty('cash') && newAllTransactions['cash'] !== null) {\n                newAllTransactions['cash'] = newAllTransactions['cash'].concat([new_cash_transaction])\n            } else {\n                newAllTransactions['cash'] = [new_cash_transaction]\n            }\n\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty('cash') && newAllPositions['cash'] !== null) {\n                orig_basis = newAllPositions['cash']['basis']\n                orig_current_shares = newAllPositions['cash']['current_shares']\n                orig_realized_gains = newAllPositions['cash']['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (action === 'add') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'add') ? orig_current_shares + total : orig_current_shares - total,\n                realized_gains: orig_realized_gains // FIXME: refactor out this attribute, merge with \"basis\"\n            }\n\n            newAllPositions['cash'] = updatedPosition\n\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n            return { allTransactions: newAllTransactions, allPositions: newAllPositions }\n        })\n    }\n\n    onRemoveFromTag(event, remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newStatusMessages = [...prevState.status_messages]\n            newStatusMessages = [...newStatusMessages, ...new_messages]\n            return { status_messages: newStatusMessages }\n        })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    render() {\n\n        let self = this\n\n        let total_value = 0\n        if (this.state.done) {\n            total_value = Object.entries(this.state.allPositions).reduce(function (total, current_val) {\n                if (current_val[0] === 'cash' && self.state.show_cash) {\n                    return total + current_val[1]['current_shares'] * 1\n                } else if (current_val[0] === 'cash' && !self.state.show_cash) {\n                    return total\n                } else {\n                    return total + current_val[1]['current_shares'] * self.state.allCurrentQuotes[current_val[0]]['current_price']\n                }\n            }, 0)\n        }\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_column = self.state.sort_column\n        let quote_columns = ['symbol', 'current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_gains']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = unique_tickers_to_show.sort(function(a, b) {\n            let value_a, value_b\n            if (quote_columns.includes(sort_column)) {\n                if (self.state.allCurrentQuotes.hasOwnProperty(a) && self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else if (sort_column === 'symbol') {\n                        value_a = self.state.allCurrentQuotes[a][sort_column].toUpperCase()\n                        value_b = self.state.allCurrentQuotes[b][sort_column].toUpperCase()\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                } \n            } else if (performance_columns.includes(sort_column)) {\n                if (self.state.allMonthlyQuotes.hasOwnProperty(a) || a === 'cash') {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                }\n                if (self.state.allMonthlyQuotes.hasOwnProperty(b) || b === 'cash') {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                }\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b\n                if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_gains') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a) && self.state.allPositions.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_gains') {\n                                let basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares'] || sort_column === 'realized_gains') {\n                        value_a = self.state.allPositions[a][sort_column]\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_gains') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b) && self.state.allPositions.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_gains' && positionvalue_b !== 0) {\n                                let basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares'] || sort_column === 'realized_gains') {\n                        value_b = self.state.allPositions[b][sort_column]\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return -1\n                }\n                if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return 1\n                }\n                if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        let all_columns = {\n            'symbol': {\n                variable_name: 'symbol',\n                display_name: 'Symbol',\n                variable_type: 'string'\n            },\n            'current_shares': {\n                variable_name: 'current_shares',\n                display_name: 'Shares',\n                variable_type: 'number',\n                num_decimals: 0\n            },\n            'current_price': {\n                variable_name: 'current_price',\n                display_name: 'Price',\n                variable_type: 'currency',\n                num_decimals: 2\n            },\n            'current_value': {\n                variable_name: 'current_value',\n                display_name: 'Value',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'percent_value': {\n                variable_name: 'percent_value',\n                display_name: 'Pct Value',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'basis': {\n                variable_name: 'basis',\n                display_name: 'Basis',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'percent_gains': {\n                variable_name: 'percent_gains',\n                display_name: 'Pct Gains',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'realized_gains': {\n                variable_name: 'realized_gains',\n                display_name: 'Realized',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'change_pct': {\n                variable_name: 'change_pct',\n                display_name: 'Change',\n                variable_type: 'percentage',\n                num_decimals: 2\n            },\n            'volume': {\n                variable_name: 'volume',\n                display_name: 'Volume',\n                variable_type: 'number',\n                num_decimals: 0\n            },\n            'dollar_volume': {\n                variable_name: 'dollar_volume',\n                display_name: 'Dollar Vol (M)',\n                variable_type: 'currency',\n                scaling_power: -6,\n                num_decimals: 0\n            },\n            'short_change_pct': {\n                variable_name: 'short_change_pct',\n                display_name: '6-month',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'medium_change_pct': {\n                variable_name: 'medium_change_pct',\n                display_name: '1-year',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'long_change_pct': {\n                variable_name: 'long_change_pct',\n                display_name: '2-year',\n                variable_type: 'percentage',\n                num_decimals: 1\n            }\n        }\n        // let display_column_order = Object.keys(all_columns)\n        let display_column_order = ['symbol', 'current_value', 'percent_value', 'percent_gains', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let display_columns = display_column_order.map(column_variable => all_columns[column_variable])\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"input-controls\">\n                        <div id=\"input-forms\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_new_transaction={this.onNewTransaction}\n                                on_new_cash={this.onNewCash}\n                                on_new_messages={this.onNewMessages}\n                            />\n                        </div>\n                        <div id=\"status-messages-wrapper\">\n                            { this.state.status_messages.length ? 'History:' : '' }\n                            <div id=\"status-messages\">\n                            { this.state.status_messages.reverse()\n                                .map(\n                                    (message, i) => {\n                                        return (message.toLowerCase().startsWith(\"error\"))\n                                        ? <p key={i} className=\"message error\">{message}</p>\n                                        : <p key={i} className=\"message\">{message}</p>\n                                    }\n                                )\n                            }\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <form>\n                            <div className=\"switch_controls\">\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show index:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show holdings:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show cash:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show tagged:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show untagged:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.performance_baseline} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Tags</th>\n                            {display_columns.map(column => (\n                            <th key={ column.variable_name} onClick={ (e) => this.onChangeSort(column.variable_name) }>{ column.display_name }{ sort_column === column.variable_name ? sort_triangle : '' }</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && sorted_tickers.map(ticker => (\n                            <GridRow \n                                key={ticker}\n                                columns={display_columns}\n                                all_tags={this.state.allTags}\n                                current_position={this.state.allPositions[ticker]}\n                                current_quote={this.state.allCurrentQuotes[ticker]}\n                                performance_numbers={this.state.allPerformanceNumbers[ticker]}\n                                performance_baseline={this.state.performance_baseline}\n                                performance_baseline_numbers={this.state.performance_baseline_numbers}\n                                total_value = {total_value}\n                                ticker_is_index={this.tickerIsIndex}\n                                on_remove_from_tag={this.onRemoveFromTag}\n                                on_delete_ticker={this.onDeleteTicker}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}