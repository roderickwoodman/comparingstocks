{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/TransactionLog.js","components/DeleteTag.js","components/MyPerformance.js","components/StatusMessages.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","highlight_column","map","i","key","String","fromCharCode","className","onClick","e","undefined","React","Component","EditNumericCell","state","user_value","user_value_is_valid","handleEscapeKey","handleChange","handleSubmit","isNaN","original_value","setState","elem","focus","document","addEventListener","removeEventListener","event","keyCode","on_escape_key","target","value","length","preventDefault","on_new_value","onSubmit","ref","type","id","onChange","size","disabled","GridRow","hovering_symbol","hovering_risk_factor","user_risk_factor","user_risk_factor_valid","formatDate","onWhatifCellClick","toggleHoverSymbol","toggleHoverRiskFactor","populateMemberButton","populateDeleteButton","populateEditButton","editRiskFactor","onNewValue","populateCellValue","numberWithCommas","daysAgo","epoch","d","Date","month","getMonth","day","getDate","year","getFullYear","join","symbol","is_aggr","row_name","on_remove_from_tag","special_classes","includes","membership_set","on_delete_tag","current_shares","on_delete_ticker","editing_row","on_edit_cell","change_pct","performance","performance_numbers","baseline","short_change_pct","style_realized_performance","start_date","show_only_achieved_performance","medium_change_pct","long_change_pct","new_value","on_modify_risk_factor","current_edit_value","num_decimals","baseline_value","prefix","suffix","adjust_decimal","performance_value","total_value","total_basis","current_price","current_value","risk_factor","visible_risk_factor","percent_value","percent_basis","percent_profit","value_at_risk","basis","basis_risked","realized_gains","whatif","quote_date","risk_factor_modified","parseInt","volume","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","date_str","now","then","diff","row_classes","special_class","member_count","sort","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","total_performance","styleTotalsCell","populateTotalsCellValue","AddTicker","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","validateTickers","user_tag","user_tickers","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","create_message","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","onReset","placeholder","required","filter","tag_name","AddTag","user_tags_string","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction_date","transaction","user_cash_action","user_cash_amount","validateTransaction","handleCashChange","handleCashReset","handleActionChange","handleCashSubmit","user_date","parseFloat","valid_transaction_summary","on_new_cash","user_transaction","action","num_shares","total","on_new_transaction","TransactionLog","exportRef","createRef","importRef","filter_str","file","onExportButton","onHiddenImportChange","exported_json","transactions","JSON","parse","stringify","all_transactions","risk","all_risk","data","encodeURIComponent","a","createElement","href","download","innerHTML","current","appendChild","click","remove","files","reader","FileReader","readAsText","onload","evt","file_contents","result","on_import_transactions","sorted_filtered_transactions","summary","b","accept","style","width","visibility","modified_at","on_delete_transaction","DeleteTag","delete_tag","MyPerformance","quarter_data","generateQuarterData","formatCurrency","getDisplayedPerformance","getMonthEndQuote","getYear","getQuarter","formatPerformance","sorted_transactions","date","first_year","first_quarter","floor","quarters_of_performance","q","new_quarter","quarter","end_shares","end_cash","transfers_in","assign","target_year","quarter_transactions","t","shares","cash_delta","share_delta","end_tickervalue","entries","position","end_totalvalue","end_baselinevalue","dollars","retval","qoq_baseline_change_pct","my_perf","qoq_change_pct","baseline_perf","monthly_dates","all_monthly_quotes","monthly_prices","findIndex","performance_obj","displayed","display_value","index_value","displayed_performance","qdata","StatusMessages","all_status_messages","message","content","WhatIf","balanceable_value","balance_target_set","balance_target_column","sell_all_of","cash_treatment","cash_remaining","cash_valid","isDisabled","new_balanceable_value","get_balanceable_value","stored_balance_target_set","localStorage","getItem","stored_balance_target_column","stored_cash_treatment","stored_cash_remaining","selectedOptions","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","setItem","multiple_tickers","item","user_remaining_cash","remaining_cash","on_whatif_submit","show_holdings","show_untagged","show_tagged","excludable_tickers","all_positions","untagged","entry","multiple","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","stored_which_inputs","new_which_inputs","Fragment","all_current_quotes","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","allPerformanceNumbers","allRisk","allWhatifs","last_error_messages","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getTransactionById","getTransactionsByTicker","getPositionFromSingleTickerTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","showColumns","createMessage","onToggleShowColumn","onNewTransaction","onImportTransactions","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","onDeleteTransaction","onEditCell","onModifyRiskFactor","onEscapeKey","onNewMessages","getCurrentValue","getCurrentShares","getBasis","getBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getHoldings","getAdded","getTagged","getUntagged","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_allRisk","stored_controls","control","stored_control","init_shown_columns","stored_shown_columns","stored_baseline","short_pct_gain","medium_pct_gain","long_pct_gain","indexed_risk_data","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","price","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newRisk","cash_delta_from_stock_transactions","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","cash_transactions","aggr_position_info","aggr_performance","transaction_id","inflows","outflows","position_start_date","substr","cash_transaction","cash_amount","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","prevState","column_names","new_shown_column_names","new_shown_columns","splice","idx","message_content","getTime","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newAllStatusMessages","new_messages","newLastErrorMessages","message_obj","new_transaction_summary","new_transaction","orig_start_date","orig_basis","orig_current_shares","orig_realized_gains","new_start_date","new_current_shares","updatedPosition","updatedCashPosition","imported_tickers","imported_transactions","imported_risk","already_added","window","location","reload","new_cash_transaction_summary","new_cash_transaction","new_cash","delete_transaction_id","transaction_to_delete","remainingTransactionsForTicker","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","factor","reverse","current_cash_position","show_whatif_columns","sell_all_set","adjusting_cash","original_cash_position","total_balance_value","ticker_set","new_whatif","actual_remaining_cash","risk_factors","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","whatif_basis","target_delta_shares","target_delta","ceil","whatif_balancedbasis","original_currentshares","losing","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","currentValue","targets","holding","added_tickers","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","row_popover","Popover","Title","as","Content","column_popover","PopulateHeaderRow","symbol_count","PopulateRow","all_row_data","new_row","status_message","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a63fe960.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            <tr>\n            {this.props.highlight_column !== null && all_columns.map( (column,i) => (\n                <th\n                key={ column.name }\n                >\n                    { (column.name === this.props.highlight_column) \n                    ? 'BEFORE BALANCING' \n                    : (column.name === 'whatif_' + this.props.highlight_column) \n                        ? 'AFTER BALANCING' \n                        : String.fromCharCode(160) }\n                </th>\n            ))}\n            {this.props.highlight_column === null && all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))}\n            </tr>\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    highlight_column: PropTypes.string,\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class EditNumericCell extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_value: '',\n            user_value_is_valid: false\n        }\n        this.handleEscapeKey = this.handleEscapeKey.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (isNaN(this.props.original_value)) {\n            this.setState({ user_value: '' }) \n        } else {\n            this.setState({ user_value: this.props.original_value })\n        }\n        this.elem.focus()\n        document.addEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    handleEscapeKey(event) {\n        if (event.keyCode === 27) {\n            this.props.on_escape_key()\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'user_value') {\n            if (value.length && !isNaN(value) && value > 0) {\n                this.setState({ user_value: value, user_value_is_valid: true })\n            } else {\n                this.setState({ user_value: value, user_value_is_valid: false })\n            }\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.props.on_new_value(this.state.user_value)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input ref={(elem) => {this.elem = elem}} type=\"text\" id=\"edit-cell\" name=\"user_value\" value={this.state.user_value} onChange={this.handleChange} size=\"5\" />\n                <button type=\"submit\" disabled={!this.state.user_value_is_valid}>S</button>\n            </form>\n        )\n    }\n}\n\nEditNumericCell.propTypes = {\n    original_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_new_value: PropTypes.func.isRequired,\n    on_escape_key: PropTypes.func.isRequired\n}\n\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hovering_symbol: false,\n            hovering_risk_factor: false,\n            user_risk_factor: '',\n            user_risk_factor_valid: false\n        }\n        this.formatDate = this.formatDate.bind(this)\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHoverSymbol = this.toggleHoverSymbol.bind(this)\n        this.toggleHoverRiskFactor = this.toggleHoverRiskFactor.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateEditButton = this.populateEditButton.bind(this)\n        this.editRiskFactor = this.editRiskFactor.bind(this)\n        this.onNewValue = this.onNewValue.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n    }\n\n    formatDate(epoch) {\n        var d = new Date(epoch),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHoverSymbol() {\n        this.setState({ hovering_symbol: !this.state.hovering_symbol })\n    }\n\n    toggleHoverRiskFactor() {\n        this.setState({ hovering_risk_factor: !this.state.hovering_risk_factor })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hovering_symbol) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    populateEditButton(column_name, row_name) {\n        let classes = 'edit'\n        if (this.state.hovering_risk_factor) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'risk_factor'\n            && row_name !== this.props.editing_row\n            && row_name !== 'cash'\n            && !this.props.is_aggregate \n            && !this.props.special_classes.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    editRiskFactor(row_name) {\n        this.props.on_edit_cell(row_name)\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n\n        // hovering\n        if ( this.state.hovering_symbol\n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( this.state.hovering_risk_factor\n            && column_name === 'risk_factor' \n            && !special_classes.includes('index') \n            && !this.props.is_aggregate\n            && row_name !== 'cash' ) {\n            classes += ' hovering'\n        }\n\n        // whatif\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n\n        // italics\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 180\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 365\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' :  ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 730\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    onNewValue(new_value) {\n        this.props.on_modify_risk_factor(this.props.row_name, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n\n        if ( column.name === 'risk_factor'\n            && this.props.row_name === this.props.editing_row ) {\n            return (\n                <EditNumericCell \n                    original_value={this.props.current_edit_value} \n                    on_new_value={this.onNewValue} \n                    on_escape_key={this.props.on_escape_key}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 0.20\n        let visible_risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 'n/a'\n        if (this.props.row_name === 'cash') {\n            risk_factor = 0\n            visible_risk_factor = 0\n        }\n        let value_at_risk = current_value * risk_factor\n        let basis = this.props.basis\n        let basis_risked = basis * risk_factor\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'start_date':\n                value = this.props.start_date\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'quote_date':\n                value = this.props.quote_date\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'whatif_current_value':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                } else {\n                    value = whatif.current_value\n                }\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'basis_risked':\n                value = basis_risked\n                break\n            case 'whatif_basis_risked':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis_risked - ((basis_risked === 'n/a') ? 0 : basis_risked)\n                } else {\n                    value = whatif.basis_risked\n                }\n                break\n            case 'percent_basis':\n                value = percent_basis\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'risk_factor':\n                value = visible_risk_factor\n                break\n            case 'risk_factor_modified':\n                if (this.props.risk_factor_modified !== null) {\n                    value = this.formatDate(parseInt(this.props.risk_factor_modified))\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'value_at_risk':\n                value = value_at_risk\n                break\n            case 'whatif_value_at_risk':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.value_at_risk - ((value_at_risk === 'n/a') ? 0 : value_at_risk)\n                } else {\n                    value = whatif.value_at_risk\n                }\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    value = value - baseline_value\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let diff = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return diff\n        }\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.sort().map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHoverSymbol} onMouseLeave={self.toggleHoverSymbol}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name === 'risk_factor') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (e)=>self.editRiskFactor(self.props.row_name) } onMouseEnter={self.toggleHoverRiskFactor} onMouseLeave={self.toggleHoverRiskFactor}>{ self.populateCellValue(column) }{ self.populateEditButton(column.name, self.props.row_name) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    start_date: PropTypes.string,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    quote_date: PropTypes.string,\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor_modified: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    show_only_achieved_performance: PropTypes.bool,\n    baseline: PropTypes.object,\n    style_realized_performance: PropTypes.bool,\n    total_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    total_basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    on_escape_key: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const total_performance = this.props.total_performance\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100%' : 'n/a'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'n/a'\n                    break\n                case 'short_change_pct':\n                    value = (Math.round(10 * total_performance.short_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'medium_change_pct':\n                    value = (Math.round(10 * total_performance.medium_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'long_change_pct':\n                    value = (Math.round(10 * total_performance.long_change_pct) / 10).toFixed(1) + '%'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        const create_message = this.props.create_message\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' does not exist.'))\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' has already been added.'))\n                } else {\n                    new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".'))\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' has already been added to another named tag.'))\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push(create_message('Ticker ' + ticker + ' has now been added.'))\n                    } else {\n                        new_status_messages.push(create_message('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".'))\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push(self.props.create_message('ERROR: Tag \"' + tag + '\" has already been created.'))\n            } else {\n                new_status_messages.push(self.props.create_message('Tag \"' + tag + '\" has now been created.'))\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction_date: '',\n            transaction: '',\n            user_cash_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleCashReset = this.handleCashReset.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleCashSubmit = this.handleCashSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_cash_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleCashReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleCashSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_cash_action = this.state.user_cash_action\n        let user_date = this.state.transaction_date\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push(this.props.create_message('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.'))\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction_summary = user_date + ': ' + user_cash_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push(this.props.create_message('Transaction \"' + valid_transaction_summary + '\" has now been recorded.'))\n            this.props.on_new_cash(valid_transaction_summary)\n            this.handleCashReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n        const create_message = this.props.create_message\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push(create_message('ERROR: Transaction \"' + transaction + '\" must be 4 terms.'))\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push(create_message('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".'))\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push(create_message('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.'))\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push(create_message('ERROR: Ticker \"' + transaction[2] + '\" does not exist.'))\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push(create_message('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.'))\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push(create_message('Ticker ' + transaction[2].toUpperCase() + ' has now been added.'))\n                }\n\n                let valid_transaction_summary = this.state.transaction_date + ': ' + action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push(create_message('Transaction \"' + valid_transaction_summary + '\" has now been recorded.'))\n                this.props.on_new_transaction(valid_transaction_summary)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form>\n                    <label>Transaction Date:</label>\n                    <input name=\"transaction_date\" value={this.state.transaction_date} onChange={this.handleChange} type=\"date\" size=\"10\" />\n                </form>\n                <form onSubmit={this.handleSubmit}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"25\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction==='' || this.state.transaction_date===''} />\n                    </section>\n                </form>\n                <form onSubmit={this.handleCashSubmit}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"dividend\">dividend</option>\n                            <option value=\"fee\">fee</option>\n                            <option value=\"transferIN\">transfer IN</option>\n                            <option value=\"transferOUT\">transfer OUT</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"12\" placeholder=\"$1000\" required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount==='' || this.state.transaction_date===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionLog extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.exportRef = React.createRef()\n        this.importRef = React.createRef()\n        this.state = {\n            filter_str: '',\n            file: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.onExportButton = this.onExportButton.bind(this)\n        this.onHiddenImportChange = this.onHiddenImportChange.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n        \n    onExportButton() {\n\n        // prepare the data\n        let exported_json = {\n            transactions: JSON.parse(JSON.stringify(this.props.all_transactions)),\n            risk: JSON.parse(JSON.stringify(this.props.all_risk))\n        }\n        var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exported_json));\n\n        // create the download link\n        var a = document.createElement('a')\n        a.href = 'data:' + data\n        a.download = 'transactions.json'\n        a.innerHTML = 'download'\n\n        // attach the download link, trigger it, and then remove it from the DOM\n        var container = this.exportRef.current\n        container.appendChild(a)\n        a.click()\n        a.remove()\n    }\n\n    onHiddenImportChange(files) {\n        if (files[0]) {\n            let self = this\n            let reader = new FileReader();\n            reader.readAsText(files[0], \"UTF-8\");\n            reader.onload = function (evt) {\n                let file_contents = JSON.parse(evt.target.result)\n                self.props.on_import_transactions(file_contents)\n            }\n        }\n    }\n\n    render() {\n        let sorted_filtered_transactions = this.props.all_transactions\n            .filter( transaction => transaction.summary.toLowerCase().includes(this.state.filter_str.toLowerCase()) )\n            .sort( function(a,b) {\n                if (a.summary < b.summary){\n                    return -1\n                } else if (a.summary > b.summary) {\n                    return 1\n                } else {\n                    return 0\n                }\n            })\n        return (\n            <section id=\"transaction-log\">\n                <section id=\"transaction-log-controls\">\n                    <form>\n                        <label>Filter:</label>\n                        <input name=\"filter_str\" value={this.state.filter_str} onChange={this.handleChange} size=\"15\" />\n\n                        <button className=\"btn btn-sm btn-primary\" onClick={this.onExportButton} disabled={!this.props.all_transactions.length}>export</button>\n                        <div ref={this.exportRef}></div>\n\n                        <label className=\"btn btn-sm btn-primary\">\n                        <input type=\"file\" ref={this.importRef} onChange={ (e) => this.onHiddenImportChange(e.target.files) } accept=\"application/json\" style={{width: 0, visibility: \"hidden\"}} />\n                        import\n                        </label>\n                    </form>\n                </section>\n                <section id=\"transactions\">\n                    {sorted_filtered_transactions.map( transaction => (\n                        <p key={transaction.modified_at} className=\"transaction\" onClick={ (e)=>this.props.on_delete_transaction(transaction.modified_at)}>{transaction.summary}</p>\n                    ))}\n                </section>\n            </section>\n        )\n    }\n}\n\nTransactionLog.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_risk: PropTypes.object.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        let user_tag = this.state.delete_tag\n        this.props.on_delete_tag(user_tag)\n\n        this.setState({ delete_tag: 'untagged' })\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class MyPerformance extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            quarter_data: []\n        }\n        this.generateQuarterData = this.generateQuarterData.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.formatCurrency = this.formatCurrency.bind(this)\n        this.getDisplayedPerformance = this.getDisplayedPerformance.bind(this)\n        this.getMonthEndQuote = this.getMonthEndQuote.bind(this)\n        this.getYear = this.getYear.bind(this)\n        this.getQuarter = this.getQuarter.bind(this)\n        this.getMonth = this.getMonth.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.formatPerformance = this.formatPerformance.bind(this)\n    }\n\n    componentDidMount() {\n        this.generateQuarterData()\n    }\n\n    generateQuarterData() {\n\n        let sorted_transactions = this.props.all_transactions.sort(function(a, b) {\n            if (a.date < b.date) {\n                return -1\n            } else if (a.date > b.date) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        \n        let quarter_data = []\n\n        if (sorted_transactions.length) {\n\n            let first_year = parseInt(sorted_transactions[0].date.split('-')[0])\n            let first_quarter = Math.floor((parseInt(sorted_transactions[0].date.split('-')[1])-1) / 3 + 1)\n            let last_year = parseInt(sorted_transactions[sorted_transactions.length-1].date.split('-')[0])\n            let last_quarter = Math.floor((parseInt(sorted_transactions[sorted_transactions.length-1].date.split('-')[1])-1) / 3 + 1)\n            let quarters_of_performance = (last_year - first_year) * 4 + (last_quarter - first_quarter) + 1\n\n            // calculate all quarter data\n            let year = first_year\n            for (let q = 0; q < quarters_of_performance; q++) {\n                \n                // initialization\n                let new_quarter = {}\n                let quarter = (q + first_quarter - 1) % 4 + 1\n                new_quarter['quarter'] = quarter\n                if (quarter === 1 && q !== 0) {\n                    year += 1\n                }\n                new_quarter['year'] = year\n                let end_shares = {}, end_cash = 0, transfers_in = 0\n                if (q !== 0) {\n                    end_shares = Object.assign({}, quarter_data[q-1].end_shares)\n                    end_cash = quarter_data[q-1].end_cash\n                }\n\n                // determine quarter's transactions\n                let target_year = year\n                let quarter_transactions = sorted_transactions.filter( t => this.getYear(t.date) === target_year && this.getQuarter(t.date) === quarter )\n                new_quarter['transactions'] = quarter_transactions\n\n                // determine quarter-end shares and cash value\n                for (let transaction of quarter_transactions) {\n                    let action, ticker, shares, total\n                    [action, ticker, shares, total] = [transaction.action, transaction.ticker, transaction.shares, transaction.total]\n                    if (ticker === 'cash') {\n                        let cash_delta = (action === 'transferIN' || action === 'dividend') ? total : -1 * total\n                        if (action === 'transferIN' || action === 'transferOUT') {\n                            transfers_in += cash_delta\n                        }\n                        end_cash += cash_delta\n                    } else {\n                        let share_delta = (action === 'buy') ? shares : -1 * shares\n                        let cash_delta = (action === 'buy') ? -1 * total : total\n                        if (end_shares.hasOwnProperty(ticker)) {\n                            end_shares[ticker] += share_delta\n                        } else {\n                            end_shares[ticker] = share_delta\n                        }\n                        end_cash += cash_delta\n                    }\n                }\n                new_quarter['end_shares'] = end_shares\n                new_quarter['end_cash'] = end_cash\n                new_quarter['transfers_in'] = transfers_in\n\n                // determine quarter-end ticker value\n                let self = this\n                let end_tickervalue = 0\n                Object.entries(end_shares).forEach(function(position) {\n                    end_tickervalue += position[1] * self.getMonthEndQuote(position[0], target_year, quarter * 3)\n                })\n                new_quarter['end_tickervalue'] = end_tickervalue\n                \n                // determine quarter-end total value\n                let end_totalvalue = end_tickervalue + end_cash\n                new_quarter['end_totalvalue'] = end_totalvalue\n\n                // determine quarter-end baseline value\n                let end_baselinevalue = self.getMonthEndQuote('S&P500', target_year, quarter * 3)\n                new_quarter['end_baselinevalue'] = end_baselinevalue\n\n                // determine quarter-over-quarter performance\n                let performance = 'n/a'\n                if (q !== 0 && !isNaN(end_totalvalue)) {\n                    performance = (end_totalvalue / quarter_data[q-1].end_totalvalue) - 1\n                }\n                new_quarter['qoq_change_pct'] = performance\n\n                // determine quarter-over-quarter baseline performance\n                performance = 'n/a'\n                if (q !== 0 && !isNaN(end_baselinevalue)) {\n                    performance = (end_baselinevalue / quarter_data[q-1].end_baselinevalue) - 1\n                }\n                new_quarter['qoq_baseline_change_pct'] = performance\n\n                // store the data object\n                quarter_data.push(new_quarter)\n            }\n        }\n\n        this.setState({ quarter_data: quarter_data })\n    }\n\n    getYear(date) {\n        return parseInt(date.split('-')[0])\n    }\n\n    getQuarter(date) {\n        return Math.floor((parseInt(date.split('-')[1])-1) / 3 + 1)\n    }\n\n    getMonth(date) {\n        return parseInt(date.split('-')[1])\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    formatCurrency(dollars) {\n        let prefix, retval = dollars\n        if (!isNaN(dollars)) {\n            let value = Math.round(dollars)\n            retval = this.numberWithCommas(Math.abs(value))\n            prefix = (value < 0 ) ? '-$' : '$'\n            retval = prefix + retval\n        } else {\n            retval = '?'\n        }\n        return retval\n    }\n\n    getDisplayedPerformance(quarter_data) {\n        let retval = {}\n        retval['display_value'] = null\n        retval['baseline_value'] = null\n        retval['index_value'] = quarter_data.qoq_baseline_change_pct\n        let my_perf = quarter_data.qoq_change_pct\n        if (!isNaN(my_perf)) {\n            if (this.props.baseline === 'sp500_pct_gain') {\n                let baseline_perf = quarter_data.qoq_baseline_change_pct\n                if (isNaN(baseline_perf)) {\n                    return retval\n                } else {\n                    retval['display_value'] = my_perf - baseline_perf\n                    retval['baseline_value'] = baseline_perf\n                }\n            } else {\n                retval['display_value'] = my_perf\n                retval['baseline_value'] = 0\n            }\n        }\n        return retval\n    }\n\n    getMonthEndQuote(ticker, year, month) {\n        let monthly_dates = this.props.all_monthly_quotes[ticker].monthly_dates\n        let monthly_prices = this.props.all_monthly_quotes[ticker].monthly_prices\n        let quarter_idx = monthly_dates.findIndex( date => this.getYear(date) === year && this.getMonth(date) === month )\n        return monthly_prices[quarter_idx]\n    }\n\n    styleCell(performance_obj) {\n        let displayed, baseline, index\n        [displayed, baseline, index] = [performance_obj.display_value, performance_obj.baseline_value, performance_obj.index_value]\n        let classes = 'performance-cell'\n        if ( displayed < baseline || displayed < 0 ) {\n            classes += ' text-red'\n        } else if (displayed > index) {\n            classes += ' text-green'\n        }\n        return classes\n    }\n\n    formatPerformance(performance) {\n        if (isNaN(performance)) {\n            return '-'\n        } else {\n            return (Math.round(performance * 100 * 10) / 10).toFixed(1) + '%'\n        }\n    }\n\n    render() {\n        let displayed_performance = this.state.quarter_data.map( qdata => this.getDisplayedPerformance(qdata) )\n        return (\n            <div id=\"my-performance-wrapper\">\n                <div id=\"my-performance-rowlabels\">\n                    <table>\n                        <thead></thead>\n                        <tbody>\n                            <tr><th>&nbsp;</th></tr>\n                            <tr><th>stocks:</th></tr>\n                            <tr><th>cash:</th></tr>\n                            <tr><th>transfers in:</th></tr>\n                            <tr><th>total:</th></tr>\n                            <tr><th>Q-o-Q perf:</th></tr>\n                            <tr><th>S&amp;P500 perf:</th></tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div id=\"my-performance\">\n                    <table>\n                        <thead>\n                            <tr>\n                            { this.state.quarter_data.map( qdata => ( // name\n                                <th key={'name-'+qdata.year+qdata.quarter}>{qdata.year}Q{qdata.quarter}</th>\n                            ))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                            { this.state.quarter_data.map( qdata => ( // ticker value\n                                <td key={'tickervalue-'+qdata.year+qdata.quarter}>{this.formatCurrency(qdata.end_tickervalue)}</td>\n                            ))}\n                            </tr>\n                            <tr>\n                            { this.state.quarter_data.map( qdata => ( // cash value\n                                <td key={'cashvalue-'+qdata.year+qdata.quarter}>{this.formatCurrency(qdata.end_cash)}</td>\n                            ))}\n                            </tr>\n                            <tr>\n                            { this.state.quarter_data.map( qdata => ( // transfers in\n                                <td key={'transfersin-'+qdata.year+qdata.quarter}>{this.formatCurrency(qdata.transfers_in)}</td>\n                            ))}\n                            </tr>\n                            <tr>\n                            { this.state.quarter_data.map( qdata => ( // total value\n                                <th key={'totalvalue-'+qdata.year+qdata.quarter}>{this.formatCurrency(qdata.end_totalvalue)}</th>\n                            ))}\n                            </tr>\n                            <tr>\n                            { displayed_performance.map( performance => ( // my performance\n                                <td /*key={'performance'+qdata.year+qdata.quarter}*/ className={ this.styleCell(performance) }>{ this.formatPerformance(performance.display_value) }</td>\n                            ))}\n                            </tr>\n                            <tr>\n                            { displayed_performance.map( performance => ( // index performance\n                                <td /*key={'indexperf-'+qdata.year+qdata.quarter}*/>{ this.formatPerformance(performance.index_value) }</td>\n                            ))}\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nMyPerformance.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_positions: PropTypes.object.isRequired,\n    all_monthly_quotes: PropTypes.object.isRequired,\n    baseline: PropTypes.string.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class StatusMessages extends React.Component {\n\n    render() {\n        return (\n            <div id=\"status-messages-wrapper\">\n                { this.props.all_status_messages.length ? 'History:' : '' }\n                <div id=\"status-messages\">\n                { this.props.all_status_messages\n                    .map(\n                        (message, i) => {\n                            return (message.content.toLowerCase().startsWith(\"error\"))\n                            ? <p key={i + message.modified_at} className=\"message error\">{message.content}</p>\n                            : <p key={i + message.modified_at} className=\"message\">{message.content}</p>\n                        }\n                    )\n                }\n                </div>\n            </div>\n        )\n    }\n}\n\nStatusMessages.propTypes = {\n    all_status_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_holdings',\n            balance_target_column: 'current_value',\n            sell_all_of: ['sell_none'],\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    componentDidMount() {\n        let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.balance_target_column))\n        this.setState({ balanceable_value: new_balanceable_value })\n\n        const stored_balance_target_set = JSON.parse(localStorage.getItem(\"balance_target_set\"))\n        if (stored_balance_target_set !== null) {\n            this.setState({ balance_target_set: stored_balance_target_set })\n        }\n\n        const stored_balance_target_column = JSON.parse(localStorage.getItem(\"balance_target_column\"))\n        if (stored_balance_target_column !== null) {\n            this.setState({ balance_target_column: stored_balance_target_column })\n        }\n\n        const stored_cash_treatment = JSON.parse(localStorage.getItem(\"cash_treatment\"))\n        if (stored_cash_treatment !== null) {\n            this.setState({ cash_treatment: stored_cash_treatment })\n        }\n\n        const stored_cash_remaining = JSON.parse(localStorage.getItem(\"cash_remaining\"))\n        if (stored_cash_remaining !== null) {\n            this.setState({ cash_remaining: stored_cash_remaining })\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value, selectedOptions } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(value, this.state.balance_target_column))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balance_target_column') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, value))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.,]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        if (name !== 'sell_all_of') {\n            this.setState({ [name]: value })\n        } else {\n            let multiple_tickers = Array.from(selectedOptions, (item) => item.value)\n            if (multiple_tickers.includes('sell_none')) {\n                multiple_tickers = ['sell_none']\n            }\n            this.setState({ sell_all_of: multiple_tickers })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'ignore') ? null : parseInt(user_remaining_cash)\n        this.props.on_whatif_submit(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, remaining_cash)\n    }\n\n    isDisabled() {\n\n        if (this.state.cash_treatment === 'include' && !this.state.cash_valid) {\n            return true\n        } else if (this.state.balance_target_set === 'my_holdings') {\n            return (this.props.show_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        let excludable_tickers = []\n        if (this.state.balance_target_set === \"my_holdings\") {\n            excludable_tickers = Object.keys(this.props.all_positions).filter( ticker => ticker !== 'cash' && this.props.all_positions[ticker].current_shares)\n        } else if (this.props.all_tags.hasOwnProperty(this.state.balance_target_set)) {\n            excludable_tickers = this.props.all_tags[this.state.balance_target_set].filter( ticker => this.props.all_positions[ticker] && this.props.all_positions[ticker].current_shares)\n        }\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div id=\"operation\">Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_holdings\">my holdings ({Object.keys(this.props.all_positions).filter(position => position !== 'cash').length})</option>\n                            <option value=\"untagged\">untagged tickers ({this.props.all_tags.untagged.length})</option>\n                            {Object.entries(this.props.all_tags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag} ({this.props.all_tags[tag].length})</option>\n                            )}\n                        </select>\n                        &nbsp;into&nbsp; \n                        <select name=\"balance_target_column\" value={this.state.balance_target_column} onChange={this.handleChange}>\n                            <option value=\"current_value\">equal values</option>\n                            <option value=\"value_at_risk\">equal values, risk adjusted</option>\n                            <option value=\"basis\">equal bases</option>\n                            <option value=\"basis_risked\">equal bases, risk adjusted</option>\n                            <option value=\"only_profits\">only profits remaining</option>\n                        </select>\n                        , but sell all of&nbsp;\n                        <select name=\"sell_all_of\" value={this.state.sell_all_of} multiple={true} onChange={this.handleChange}>\n                            <option value=\"sell_none\">(none. keep all.)</option>\n                            {excludable_tickers.sort().map(ticker => \n                                <option key={ticker} value={ticker}> {ticker} </option>\n                            )}\n                        </select>\n                        &nbsp;...\n                    </div>\n                    <div id=\"cash-treatment\">\n                        <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                        <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                        <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining} placeholder=\"$0\"></input>cash remaining (max: ${this.numberWithCommas(this.state.balanceable_value)})</label>\n                    </div>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { TransactionLog } from './TransactionLog'\nimport { DeleteTag } from './DeleteTag'\nimport { MyPerformance } from './MyPerformance'\nimport { StatusMessages } from './StatusMessages'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | my-performance | what-ifs | logs\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    componentDidMount() {\n        const stored_which_inputs = JSON.parse(localStorage.getItem(\"which_inputs\"))\n        if (stored_which_inputs !== null) {\n            this.setState({ which_inputs: stored_which_inputs })\n        }\n    }\n\n    onWhichInputs(new_which_inputs) {\n        localStorage.setItem('which_inputs', JSON.stringify(new_which_inputs))\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"my-performance\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('my-performance')}>Performance</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"logs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('logs')}>Logs</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <AddTicker\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            create_message={this.props.create_message}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <AddTag\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            create_message={this.props.create_message}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <DeleteTag\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <div className=\"content-wrapper\">\n                            <div className=\"content-half\">\n                                <AddTransaction\n                                    all_stocks={this.props.all_stocks}\n                                    all_tags={this.props.all_tags}\n                                    on_new_transaction={this.props.on_new_transaction}\n                                    on_new_cash={this.props.on_new_cash}\n                                    create_message={this.props.create_message}\n                                    on_new_messages={this.props.on_new_messages}\n                                />\n                            </div>\n                            <div className=\"content-half\">\n                                <TransactionLog\n                                    all_transactions={this.props.all_transactions}\n                                    all_risk={this.props.all_risk}\n                                    on_delete_transaction={this.props.on_delete_transaction}\n                                    on_import_transactions={this.props.on_import_transactions}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_holdings={this.props.show_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'my-performance' && (\n                        <React.Fragment>\n                        <MyPerformance\n                            all_transactions={this.props.all_transactions}\n                            all_positions={this.props.all_positions}\n                            all_monthly_quotes={this.props.all_monthly_quotes}\n                            baseline={this.props.baseline}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'logs' && (\n                        <React.Fragment>\n                        <StatusMessages\n                            all_status_messages={this.props.all_status_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object,\n    all_monthly_quotes: PropTypes.object,\n    all_positions: PropTypes.object,\n    all_transactions: PropTypes.array,\n    all_risk: PropTypes.object,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    baseline: PropTypes.string,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    all_status_messages: PropTypes.array.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2\n    // },\n    {\n        name: 'quote_date',\n        display_name: 'Price Date',\n        type: 'string'\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_basis',\n        display_name: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'risk_factor_modified',\n        display_name: 'Risk Factor Edited Date',\n        type: 'string',\n    },\n    {\n        name: 'risk_factor',\n        display_name: 'Risk Factor (default=0.20)',\n        type: 'number',\n        num_decimals: 2\n    },\n    {\n        name: 'value_at_risk',\n        display_name: 'Value At Risk',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_value_at_risk',\n        display_name: 'What-If Value At Risk',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'basis_risked',\n        display_name: 'Basis Risked',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_basis_risked',\n        display_name: 'What-If Basis Risked',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0\n    },\n    {\n        name: 'start_date',\n        display_name: 'Holding Started Date',\n        type: 'string'\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: [],\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_holdings',\n            balance_target_column: '',\n            sell_all_of: [],\n            remaining_cash: null,\n            last_error_messages: [],\n            all_status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            show_holdings: true,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            show_only_achieved_performance: false,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getTransactionById = this.getTransactionById.bind(this)\n        this.getTransactionsByTicker = this.getTransactionsByTicker.bind(this)\n        this.getPositionFromSingleTickerTransactions = this.getPositionFromSingleTickerTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.createMessage = this.createMessage.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onImportTransactions = this.onImportTransactions.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.onDeleteTransaction = this.onDeleteTransaction.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        // 1. load all locally-stored data\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        let allTags = {}\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n            allTags = JSON.parse(JSON.stringify(stored_allTags))\n        }\n\n        let allTransactions = []\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n            allTransactions = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        const stored_allRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (stored_allRisk !== null) {\n            this.setState({ allRisk: stored_allRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['show_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates', 'show_only_achieved_performance']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n\n        // 2. calculate historical performance data for each added ticker\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        let indexed_risk_data = {}\n        if (stored_allRisk !== null) {\n            indexed_risk_data = JSON.parse(JSON.stringify(stored_allRisk))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'].toUpperCase())\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'].toUpperCase())\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n\n        // 3. calculate position data (from transactions) for all holdings\n\n        let all_stocks = []\n        allTransactions.forEach(function(transaction) {\n            if (!all_stocks.includes(transaction.ticker)) {\n                all_stocks.push(transaction.ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_risk_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        all_stocks = all_stocks.filter(ticker => ticker !== 'cash')\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n        let cash_delta_from_stock_transactions = 0\n\n        all_stocks.forEach(function(ticker) {\n\n            // create a stock position if any transactions exist\n            allTransactions.forEach(function(transaction) {\n                if (!newPositions.hasOwnProperty(transaction.ticker) && transaction.ticker !== 'cash') {\n                    let newPosition = {}\n                    let ticker = transaction.ticker\n                    newPosition = self.getPositionFromSingleTickerTransactions(allTransactions.filter(transaction => transaction.ticker === ticker))\n                    newPosition['symbol'] = ticker\n                    newPositions[ticker] = newPosition\n                    if (transaction.action === 'buy') {\n                        cash_delta_from_stock_transactions -= transaction.total\n                    } else {\n                        cash_delta_from_stock_transactions += transaction.total\n                    }\n                }\n            })\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuote['quote_date'] = quoteResult['07. latest trading day']\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n\n                let monthly_prices = []\n                let monthly_dates = []\n                Object.entries(quoteTimeSeries).forEach(function(price) {\n                    monthly_prices.push(parseFloat(price[1]['5. adjusted close']))\n                    monthly_dates.push(price[0])\n                })\n                newMonthlyQuote['monthly_prices'] = monthly_prices\n                newMonthlyQuote['monthly_dates'] = monthly_dates\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            if (indexed_risk_data.hasOwnProperty(ticker)) {\n                newRisk[ticker] = JSON.parse(JSON.stringify(indexed_risk_data[ticker]))\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        let cash_transactions = allTransactions.filter(transaction => transaction.ticker === 'cash')\n        if (cash_transactions.length || cash_delta_from_stock_transactions !== 0) {\n            let newPosition = {}\n            newPosition = this.getPositionFromCashTransactions(cash_transactions)\n            newPosition['symbol'] = 'cash'\n            if (cash_delta_from_stock_transactions) {\n                newPosition['basis'] += cash_delta_from_stock_transactions\n                newPosition['current_shares'] += cash_delta_from_stock_transactions\n            }\n            newPositions['cash'] = newPosition\n        }\n\n        // 5. handle aggregates\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(allTags, newPositions, newCurrentQuotes, stored_controls['show_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(allTags, newPerformanceNumbers)))\n\n\n        // 6. update the app's state with all of the above changes\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getTransactionById(transaction_id) {\n        return this.state.allTransactions.filter(transaction => transaction.modified_at === transaction_id)[0]\n    }\n\n    getTransactionsByTicker(ticker) {\n        return this.state.allTransactions.filter(transaction => transaction.ticker === ticker)\n    }\n\n    getPositionFromSingleTickerTransactions(transactions) { // assumes the transactions are all from a single ticker\n        let inflows = 0, outflows = 0, current_shares = 0, date, action, num_shares, ticker, value\n        let sorted_transactions = transactions.sort(function(a,b) {\n            if (a.date > b.date) {\n                return -1\n            } else if (a.date < b.date) {\n                return -1\n            } else {\n                return 0\n            }\n        })\n        let position_start_date = '1970/01/01'\n        sorted_transactions.forEach(function(transaction) {\n            [date, action, num_shares, ticker, value] = transaction.summary.split(' ')\n            date = date.substr(0, date.length-1)\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (current_shares === 0) {\n                position_start_date = date\n            }\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n            if (current_shares === 0) {\n                position_start_date = 'n/a'\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            start_date: position_start_date,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [, action, value] = cash_transaction.summary.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'transferIN' || action === 'dividend') {\n                total += cash_amount\n            } else if (action === 'transferOUT' || action === 'fee') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_holdings, show_cash) {\n\n        let holdings = (show_holdings === null) ? this.state.show_holdings : show_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = all_quotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short = all_performance_numbers[ticker]['short_change_pct']\n            let medium = all_performance_numbers[ticker]['medium_change_pct']\n            let long = all_performance_numbers[ticker]['long_change_pct']\n\n            aggr_performance_by_tag['_everything_'].short_change_pct += short\n            aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n            aggr_performance_by_tag['_everything_'].long_change_pct += long\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    aggr_performance_by_tag[tag].short_change_pct += short\n                    aggr_performance_by_tag[tag].medium_change_pct += medium\n                    aggr_performance_by_tag[tag].long_change_pct += long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_holdings = (name === 'show_holdings') ? new_value : this.state.show_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            column_names.forEach(function(column_name) {\n                if (!new_shown_column_names.includes(column_name)) {\n                    new_shown_column_names.push(column_name)\n                }\n            })\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    createMessage(message_content) {\n        let new_message = {\n            modified_at: new Date().getTime(),\n            content: message_content\n        }\n        return new_message\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.ticker !== delete_ticker)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            let new_messages = []\n            new_messages.push(this.createMessage('Ticker \"' + delete_ticker + '\" has now been deleted.'))\n            let newLastErrorMessages = new_messages.filter( message_obj => message_obj.content.includes('ERROR'))\n            newAllStatusMessages = [...new_messages, ...newAllStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                all_status_messages: newAllStatusMessages,\n                last_error_messages: newLastErrorMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let date, action, num_shares, ticker, total\n        [date, action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: ticker,\n                action: action,\n                shares: num_shares,\n                total: total,\n                summary: new_transaction_summary\n            }\n            newAllTransactions.push(new_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let orig_start_date, orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_start_date = newAllPositions[ticker]['start_date']\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let new_current_shares = (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares\n            let new_start_date\n            if (orig_start_date === undefined) {\n                new_start_date = date\n            } else {\n                new_start_date = (new Date(date) < new Date(orig_start_date)) ? date : orig_start_date\n            }\n            let updatedPosition = {\n                current_shares: new_current_shares,\n                start_date: (new_current_shares) ? new_start_date : 'n/a',\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the cash position numbers\n            orig_current_shares = (newAllPositions.hasOwnProperty('cash')) ? newAllPositions['cash'].current_shares : 0\n            new_current_shares = (action === 'buy') ? orig_current_shares - total : orig_current_shares + total\n            let updatedCashPosition = {\n                current_shares: new_current_shares,\n                symbol: 'cash',\n                basis: new_current_shares,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedCashPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onImportTransactions(file_contents) {\n\n        let imported_tickers = []\n\n        let imported_transactions = JSON.parse(JSON.stringify(file_contents.transactions))\n        imported_transactions.forEach( transaction => imported_tickers.push(transaction.ticker) )\n\n        let imported_risk = JSON.parse(JSON.stringify(file_contents.risk))\n        Object.keys(imported_risk).forEach( ticker => imported_tickers.push(ticker))\n\n        let all_stocks_of_interest = Array.from(new Set(imported_tickers))\n        this.setState(prevState => {\n\n            // update the \"untagged\" tag so that all added tickers belong to a tag\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let already_added = []\n            Object.keys(newAllTags).forEach(function(tag) {\n                newAllTags[tag].forEach(function(ticker) {\n                    if (!already_added.includes(ticker)) {\n                        already_added.push(ticker)\n                    }\n                })\n            })\n            all_stocks_of_interest.forEach( function(ticker) {\n                if (!already_added.includes(ticker) && ticker !== 'cash') {\n                    newAllTags['untagged'].push(ticker)\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // replace the stored transactions\n            localStorage.setItem('allTransactions', JSON.stringify(imported_transactions))\n\n            // replace the stored risk\n            localStorage.setItem('allRisk', JSON.stringify(imported_risk))\n\n            return\n        })\n\n        window.location.reload(false)\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let date, action, total\n        [date, action, total]  = new_cash_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: 'cash',\n                action: action,\n                shares: total,\n                total: total,\n                summary: new_cash_transaction_summary\n            }\n            newAllTransactions.push(new_cash_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTransaction(delete_transaction_id) {\n\n        let transaction_to_delete = this.getTransactionById(delete_transaction_id)\n        let ticker = transaction_to_delete.ticker\n\n        this.setState(prevState => {\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.modified_at !== delete_transaction_id)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            let new_messages = []\n            new_messages.push(this.createMessage('Transaction \"' + transaction_to_delete.summary + '\" has now been deleted.'))\n            let newLastErrorMessages = new_messages.filter( message_obj => message_obj.content.includes('ERROR'))\n            newAllStatusMessages = [...new_messages, ...newAllStatusMessages]\n\n            // recalculate the position numbers\n            let remainingTransactionsForTicker = newAllTransactions.filter(transaction => transaction.ticker === ticker)\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let updatedPosition\n            if (!remainingTransactionsForTicker.length) {\n                delete newAllPositions[ticker]\n            } else {\n                if (ticker === 'cash') {\n                    updatedPosition = this.getPositionFromCashTransactions(remainingTransactionsForTicker)\n                } else {\n                    updatedPosition = this.getPositionFromSingleTickerTransactions(remainingTransactionsForTicker)\n                }\n                newAllPositions[ticker] = updatedPosition\n            }\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n\n            return { \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                all_status_messages: newAllStatusMessages,\n                last_error_messages: newLastErrorMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add status messages\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            let new_messages = []\n            new_messages.push(this.createMessage('Tag \"' + delete_tag + '\" has now been deleted.'))\n            let newLastErrorMessages = new_messages.filter( message_obj => message_obj.content.includes('ERROR'))\n            newAllStatusMessages = [...new_messages, ...newAllStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                all_status_messages: newAllStatusMessages,\n                last_error_messages: newLastErrorMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(row_name) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== row_name\n                && row_name !== this.props.editing_row\n                && !this.nameIsAnAggregate(row_name)\n                && !this.nameIsSpecial(row_name)\n            ) {\n                return { editing_row: row_name }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n                newAllRisk[ticker]['modified_at'] = new Date().getTime()\n            } else {\n                let newRisk = { \n                    modified_at: new Date().getTime(),\n                    factor: parseFloat(new_value) \n                }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            newAllStatusMessages = [...new_messages.reverse(), ...newAllStatusMessages]\n            let newLastErrorMessages = new_messages.filter(message_obj => message_obj.content.includes('ERROR')).reverse()\n            return { \n                last_error_messages: newLastErrorMessages,\n                all_status_messages: newAllStatusMessages }\n        })\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getBalanceableValue(balance_target_set, balance_target_column) {\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_position = 0\n        if (this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_position = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_position\n\n        if (balance_target_set === 'my_holdings') {\n            if (this.state.show_holdings) {\n                Object.keys(this.state.allPositions).filter( ticker => ticker !== 'cash' ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value' || 'value_at_risk' || 'only_profits') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis' || 'basis_risked') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        } else if (balance_target_set === 'untagged') {\n            if (this.state.show_untagged && this.state.allTags.hasOwnProperty('untagged')) {\n                this.state.allTags['untagged'].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value' || 'value_at_risk' || 'only_profits') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis' || 'basis_risked') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        } else { // balance_target_set is a tag name\n            if (this.state.show_tagged) {\n                this.state.allTags[balance_target_set].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value' || 'value_at_risk' || 'only_profits') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis' || 'basis_risked') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(balance_target_set, sell_all_of, balance_target_column, remaining_cash) {\n        this.setState({ \n            remaining_cash: remaining_cash, \n            balance_target_set: balance_target_set, \n            sell_all_of: sell_all_of,\n            balance_target_column: balance_target_column \n            })\n        let column = balance_target_column\n        if (balance_target_column === 'only_profits') {\n            column = 'basis'\n        }\n        let show_whatif_columns = ['current_shares', 'whatif_current_shares', column, 'whatif_'+column]\n        if (balance_target_column.includes('risk')) {\n            show_whatif_columns.push('risk_factor')\n        }\n        this.showColumns(show_whatif_columns)\n        this.onWhatifGo(balance_target_set, sell_all_of, balance_target_column, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(balance_target_set, sell_all_set, balance_target_column, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && remaining_cash !== null\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_balance_value = this.getBalanceableValue(balance_target_set, balance_target_column) // includes cash if show_cash is enabled\n        if (remaining_cash === null) {\n            total_balance_value -= original_cash_position\n        } else {\n            total_balance_value -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let ticker_set = []\n        if (balance_target_set === 'my_holdings') {\n            ticker_set = [...this.getHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (balance_target_set === 'untagged') {\n            ticker_set = [...this.getUntagged()]\n        } else {\n            ticker_set = this.state.allTags[balance_target_set]\n        }\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balance_target_column: balance_target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        let risk_factors = {}\n        ticker_set.forEach(function(ticker) {\n            if (self.state.allRisk.hasOwnProperty(ticker)){\n                risk_factors[ticker] = self.state.allRisk[ticker].factor\n            } else {\n                risk_factors[ticker] = 0.20\n            }\n        })\n        ticker_set.forEach(function(ticker) {\n\n            let whatif_currentshares, whatif_balancedvalue\n            \n            let target = total_balance_value / ticker_set.length\n            new_whatif.values[ticker] = {}\n\n            if (sell_all_set.includes(ticker)) {\n                new_whatif.values[ticker]['current_shares'] = 0\n                new_whatif.values[ticker]['basis'] = 'n/a'\n                new_whatif.values[ticker]['basis_risked'] = 'n/a'\n                new_whatif.values[ticker]['current_value'] = 0\n                new_whatif.values[ticker]['value_at_risk'] = 'n/a'\n                return\n            }\n\n            let value_delta = 0\n            let original_currentvalue = self.getCurrentValue(ticker)\n            let original_basis = self.getBasis(ticker)\n\n            if (sell_all_set.includes(ticker)) {\n                new_whatif.values[ticker]['current_shares'] = 0\n                new_whatif.values[ticker]['current_value'] = 0\n                new_whatif.values[ticker]['basis'] = 0\n                new_whatif.values[ticker]['basis_risked'] = 0\n                new_whatif.values[ticker]['value_at_risk'] = 0\n                return\n            }\n\n            // balancing by value is a simple average of current values\n            if (balance_target_column === 'current_value') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                let whatif_basis = original_basis + value_delta\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_basis\n                new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (balance_target_column === 'basis') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_balancedbasis < 0) {\n                    whatif_balancedbasis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n\n                value_delta = whatif_balancedbasis - original_basis\n                new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n\n            } else if (balance_target_column === 'only_profits') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let original_currentvalue = original_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                let target_delta_shares\n                let losing = (original_basis > original_currentvalue) ? true : false\n                if (losing) {\n                    new_whatif.values[ticker]['current_shares'] = 0\n                } else {\n                    let target_delta = original_basis\n                    target_delta_shares = -1 * Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    whatif_currentshares = original_currentshares + target_delta_shares\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n                }\n\n                let whatif_basis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                if (losing || sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['basis'] = 'n/a'\n                    new_whatif.values[ticker]['basis_risked'] = 'n/a'\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 'n/a'\n                } else {\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    value_delta = whatif_basis - original_basis\n                    new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                    new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n                }\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n        // The above applies to risk-balancing VALUE. This results in each position currently\n        // having the same dollar value at risk right now. Similarly, in order to risk-balance \n        // by BASIS, the same formula may be used except with Btot (total basis) in the numerator.\n        // This results in each position having the same amount of sunk investment dollars at risk,\n        // it is unaffected by each position's current stock price.\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (balance_target_column === 'value_at_risk' || balance_target_column === 'basis_risked') {\n            \n            // determine the numerator\n            let numerator_product = 1\n            ticker_set.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= risk_factors[ticker]\n                }\n            })\n            let numerator = total_balance_value * numerator_product\n\n            // determine the denominator\n            let denominator_terms = Array(ticker_set.length).fill(1)\n            ticker_set.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * risk_factors[ticker]\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue, 0 )\n\n            // determine the target value for each ticker; each will be different if their risk factors are different\n            let targets = Array(ticker_set.length).fill(0)\n            targets[0] = numerator / denominator\n            ticker_set.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    targets[idx] = Math.round(targets[0] * risk_factors[ticker_set[0]] / risk_factors[ticker])\n                }\n            })\n\n            // for each ticker, use its target to derive the other metrics\n            ticker_set.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                let original_currentvalue = self.getCurrentValue(ticker)\n                let original_basis = self.getBasis(ticker)\n                let value_delta, target = targets[idx]\n\n                // for values, \"target\" is the target market value for this position\n                if (balance_target_column === 'value_at_risk') {\n\n                    let whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                    value_delta = whatif_balancedvalue - original_currentvalue\n                    let whatif_basis = original_basis + value_delta\n                    if (whatif_basis < 0) {\n                        whatif_basis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n                // for bases, \"target\" is the target basis for this position\n                } else if (balance_target_column === 'basis_risked') {\n\n                    let original_currentshares = self.getCurrentShares(ticker)\n                    let target_delta = target - original_basis\n                    let target_delta_shares\n                    if (target_delta >= 0) {\n                        target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    } else {\n                        target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    }\n                    let whatif_currentshares = original_currentshares + target_delta_shares\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (whatif_balancedbasis < 0) {\n                        whatif_balancedbasis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n    \n                    value_delta = whatif_balancedbasis - original_basis\n                    new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n    \n                    new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n                }\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['value_at_risk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balance_target_column: new_whatif.balance_target_column })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'quote_date', 'volume', 'dollar_volume']\n        let holdings_columns = ['start_date', 'current_shares', 'current_value', 'percent_value', 'value_at_risk', 'basis', 'basis_risked', 'realized_gains', 'percent_basis', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(a)) {\n                            value_a = self.state.allPositions[a]['basis'] * self.state.allRisk[a]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(b)) {\n                            value_b = self.state.allPositions[b]['basis'] * self.state.allRisk[b]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sort_column === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : (a === 'cash') ? 0 : 0.20\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : (b === 'cash') ? 0 : 0.20\n\n            } else if (sort_column === 'risk_factor_modified') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].modified_at : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].modified_at : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['start_date'] = self.state.allPositions[ticker].start_date\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['start_date'] = 'n/a'\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['start_date'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n\n        const row_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {all_columns_namesorted.map(column => (\n                        <span key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name) } className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</span>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate, highlight_column}) => (\n            <GridHeaderRow\n                highlight_column={highlight_column}\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                quote_date={row_data.quote_date}\n                volume={row_data.volume}\n                basis={row_data.basis}\n                start_date={row_data.start_date}\n                current_shares={(this.state.show_holdings) ? row_data.current_shares : 'n/a'}\n                current_value={(this.state.show_holdings) ? row_data.current_value : 'n/a'}\n                realized_gains={(this.state.show_holdings) ? row_data.realized_gains : 'n/a'}\n                risk_factor={row_data.risk_factor}\n                risk_factor_modified={row_data.risk_factor_modified}\n                performance_numbers={row_data.performance_numbers}\n                show_only_achieved_performance={this.state.show_only_achieved_performance}\n                baseline={row_data.baseline}\n                style_realized_performance={row_data.style_realized_performance}\n                total_value={(this.state.show_holdings) ? row_data.total_value : 'n/a'}\n                total_basis={(this.state.show_holdings) ? row_data.total_basis : 'n/a'}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                on_escape_key={this.onEscapeKey}\n            />\n        )\n\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = self.state.allCurrentQuotes[ticker].current_price\n            new_row['change_pct'] = self.state.allCurrentQuotes[ticker].change_pct\n            new_row['quote_date'] = (ticker !== 'cash' && !self.getIndicies().includes(ticker)) ? self.state.allCurrentQuotes[ticker].quote_date : 'n/a'\n            new_row['volume'] = self.state.allCurrentQuotes[ticker].volume\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['start_date'] = row_data[ticker]['start_date']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].factor : null\n            new_row['risk_factor_modified'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].modified_at : null\n            new_row['performance_numbers'] = self.state.allPerformanceNumbers[ticker]\n            new_row['baseline'] = self.state.baseline\n            new_row['style_realized_performance'] = (Object.entries(self.state.allPositions).filter(position => position[0] !== 'cash' && position[1].current_shares).length) ? true : false\n            new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n            new_row['total_basis'] = self.state.aggrBasis['_everything_']\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['quote_date'] = 'n/a'\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['start_date'] = aggr_row_data[aggr_ticker]['start_date']\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['risk_factor_modified'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['style_realized_performance'] = false\n                new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n                new_row['total_basis'] = self.state.aggrBasis['_everything_']\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"left-side\">\n                        <div id=\"input-controls\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                all_current_quotes={this.state.allCurrentQuotes}\n                                all_monthly_quotes={this.state.allMonthlyQuotes}\n                                all_positions={this.state.allPositions}\n                                all_transactions={this.state.allTransactions}\n                                all_risk={this.state.allRisk}\n                                show_holdings={this.state.show_holdings}\n                                show_tagged={this.state.show_tagged}\n                                show_untagged={this.state.show_untagged}\n                                show_cash={this.state.show_cash}\n                                baseline={this.state.baseline.name}\n                                get_balanceable_value={this.getBalanceableValue}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_delete_transaction={this.onDeleteTransaction}\n                                on_new_transaction={this.onNewTransaction}\n                                on_import_transactions={this.onImportTransactions}\n                                on_new_cash={this.onNewCash}\n                                create_message={this.createMessage}\n                                all_status_messages={this.state.all_status_messages}\n                                on_new_messages={this.onNewMessages}\n                                on_whatif_submit={this.onWhatifSubmit}\n                            />\n                        </div>\n                        <div id=\"last-status-messages\">\n                            {this.state.last_error_messages.map( (status_message,i) => (\n                                <div key={i + status_message.modified_at}>{status_message.content}</div>\n                            ))}\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n                        <div id=\"performance_controls\">\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show performance only if achieved:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_only_achieved_performance\" name=\"show_only_achieved_performance\" type=\"checkbox\" checked={this.state.show_only_achieved_performance} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_only_achieved_performance\" className=\"switch\"></label>\n                                </div>\n                            </div>\n                        </div>\n                        <div id=\"page-settings\">\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={this.state.balance_target_column} />\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={this.state.aggrTotalValue['_everything_']}\n                            total_basis={this.state.aggrBasis['_everything_']}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow is_aggregate={true} highlight_column={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}