{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/AddCash.js","components/TransactionLog.js","components/DeleteTag.js","components/StatusMessages.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","highlight_column","map","i","key","String","fromCharCode","className","onClick","e","undefined","React","Component","EditNumericCell","state","user_value","user_value_is_valid","handleEscapeKey","handleChange","handleSubmit","isNaN","original_value","setState","elem","focus","document","addEventListener","removeEventListener","event","keyCode","on_escape_key","target","value","length","preventDefault","on_new_value","onSubmit","ref","type","id","onChange","size","disabled","GridRow","hovering_symbol","hovering_risk_factor","user_risk_factor","user_risk_factor_valid","onWhatifCellClick","toggleHoverSymbol","toggleHoverRiskFactor","populateMemberButton","populateDeleteButton","populateEditButton","editRiskFactor","onNewValue","populateCellValue","numberWithCommas","symbol","is_aggr","row_name","on_remove_from_tag","special_classes","includes","membership_set","on_delete_tag","current_shares","on_delete_ticker","editing_row","on_edit_cell","change_pct","performance","performance_numbers","baseline","short_change_pct","medium_change_pct","long_change_pct","new_value","on_modify_risk_factor","current_edit_value","num_decimals","baseline_value","percent_value","percent_basis","percent_profit","prefix","suffix","adjust_decimal","performance_value","total_value","total_basis","current_price","current_value","at_risk","risk_factor","basis","realized_gains","whatif","volume","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","row_classes","special_class","member_count","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","total_performance","styleTotalsCell","populateTotalsCellValue","AddTicker","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","validateTickers","user_tag","user_tickers","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","onReset","placeholder","required","sort","filter","tag_name","AddTag","user_tags_string","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction","validateTransaction","user_transaction","action","num_shares","parseInt","total","parseFloat","valid_transaction_summary","on_new_transaction","AddCash","user_action","user_cash_amount","handleCashChange","handleActionChange","on_new_cash","TransactionLog","all_transactions","idx","summary","DeleteTag","delete_tag","StatusMessages","all_status_messages","message","WhatIf","balanceable_value","balance_target_set","balance_target_column","cash_treatment","cash_remaining","cash_valid","isDisabled","new_balanceable_value","get_balanceable_value","stored_balance_target_set","JSON","parse","localStorage","getItem","stored_balance_target_column","stored_cash_treatment","stored_cash_remaining","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","setItem","stringify","user_remaining_cash","remaining_cash","on_whatif_submit","show_holdings","show_untagged","show_tagged","entries","entry","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","stored_which_inputs","new_which_inputs","Fragment","all_current_quotes","all_positions","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","allPerformanceNumbers","allRisk","allWhatifs","status_messages","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getPositionFromTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","showColumns","onToggleShowColumn","onNewTransaction","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","onEditCell","onModifyRiskFactor","onEscapeKey","onNewMessages","getCurrentValue","getCurrentShares","getBasis","getBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getHoldings","getAdded","getTagged","getUntagged","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_baseline","assign","short_pct_gain","medium_pct_gain","long_pct_gain","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_allRisk","stored_controls","control","stored_control","indexed_transaction_data","indexed_risk_data","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","monthly_prices","price","now","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newRisk","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","newRiskEntry","factor","change","init_shown_columns","stored_shown_columns","aggr_position_info","aggr_performance","transactions","inflows","outflows","substr","cash_transactions","cash_transaction","cash_amount","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","prevState","column_names","new_shown_column_names","new_shown_columns","splice","findIndex","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newStatusMessages","new_transaction_summary","new_transaction","orig_basis","orig_current_shares","orig_realized_gains","updatedPosition","new_cash_transaction_summary","new_cash_transaction","new_cash","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","new_messages","reverse","current_cash_position","whatif_columns","adjusting_cash","original_cash_position","total_balance_value","tickers_to_balance","new_whatif","actual_remaining_cash","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","floor","target_delta_shares","target_delta","ceil","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","currentValue","targets","factor_0","holding","added_tickers","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","untagged","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","row_popover","Popover","Title","as","Content","column_popover","PopulateHeaderRow","symbol_count","PopulateRow","all_row_data","new_row","transactions_list","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.094b7c11.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            <tr>\n            {this.props.highlight_column !== null && all_columns.map( (column,i) => (\n                <th\n                key={ column.name }\n                >\n                    { (column.name === this.props.highlight_column) \n                    ? 'BEFORE BALANCING' \n                    : (column.name === 'whatif_' + this.props.highlight_column) \n                        ? 'AFTER BALANCING' \n                        : String.fromCharCode(160) }\n                </th>\n            ))}\n            {this.props.highlight_column === null && all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))}\n            </tr>\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    highlight_column: PropTypes.string,\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class EditNumericCell extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_value: '',\n            user_value_is_valid: false\n        }\n        this.handleEscapeKey = this.handleEscapeKey.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (isNaN(this.props.original_value)) {\n            this.setState({ user_value: '' }) \n        } else {\n            this.setState({ user_value: this.props.original_value })\n        }\n        this.elem.focus()\n        document.addEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    handleEscapeKey(event) {\n        if (event.keyCode === 27) {\n            this.props.on_escape_key()\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'user_value') {\n            if (value.length && !isNaN(value) && value > 0) {\n                this.setState({ user_value: value, user_value_is_valid: true })\n            } else {\n                this.setState({ user_value: value, user_value_is_valid: false })\n            }\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.props.on_new_value(this.state.user_value)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input ref={(elem) => {this.elem = elem}} type=\"text\" id=\"edit-cell\" name=\"user_value\" value={this.state.user_value} onChange={this.handleChange} size=\"5\" />\n                <button type=\"submit\" disabled={!this.state.user_value_is_valid}>S</button>\n            </form>\n        )\n    }\n}\n\nEditNumericCell.propTypes = {\n    original_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_new_value: PropTypes.func.isRequired,\n    on_escape_key: PropTypes.func.isRequired\n}\n\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hovering_symbol: false,\n            hovering_risk_factor: false,\n            user_risk_factor: '',\n            user_risk_factor_valid: false\n        }\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHoverSymbol = this.toggleHoverSymbol.bind(this)\n        this.toggleHoverRiskFactor = this.toggleHoverRiskFactor.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateEditButton = this.populateEditButton.bind(this)\n        this.editRiskFactor = this.editRiskFactor.bind(this)\n        this.onNewValue = this.onNewValue.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHoverSymbol() {\n        this.setState({ hovering_symbol: !this.state.hovering_symbol })\n    }\n\n    toggleHoverRiskFactor() {\n        this.setState({ hovering_risk_factor: !this.state.hovering_risk_factor })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hovering_symbol) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    populateEditButton(column_name, row_name) {\n        let classes = 'edit'\n        if (this.state.hovering_risk_factor) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'risk_factor'\n            && row_name !== this.props.editing_row\n            && row_name !== 'cash'\n            && !this.props.is_aggregate \n            && !this.props.special_classes.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    editRiskFactor(row_name) {\n        this.props.on_edit_cell(row_name)\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n        if ( this.state.hovering_symbol\n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( this.state.hovering_risk_factor\n            && column_name === 'risk_factor' \n            && !special_classes.includes('index') \n            && !this.props.is_aggregate\n            && row_name !== 'cash' ) {\n            classes += ' hovering'\n        }\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    onNewValue(new_value) {\n        this.props.on_modify_risk_factor(this.props.row_name, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n\n        if ( column.name === 'risk_factor'\n            && this.props.row_name === this.props.editing_row ) {\n            return (\n                <EditNumericCell \n                    original_value={this.props.current_edit_value} \n                    on_new_value={this.onNewValue} \n                    on_escape_key={this.props.on_escape_key}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let at_risk = current_value * this.props.risk_factor\n        let basis = this.props.basis\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'whatif_current_value':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                } else {\n                    value = whatif.current_value\n                }\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'percent_basis':\n                value = percent_basis\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'risk_factor':\n                value = this.props.risk_factor\n                break\n            case 'at_risk':\n                value = at_risk\n                break\n            case 'whatif_at_risk':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.at_risk - ((at_risk === 'n/a') ? 0 : at_risk)\n                } else {\n                    value = whatif.at_risk\n                }\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    value = value - baseline_value\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHoverSymbol} onMouseLeave={self.toggleHoverSymbol}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name === 'risk_factor') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (e)=>self.editRiskFactor(self.props.row_name) } onMouseEnter={self.toggleHoverRiskFactor} onMouseLeave={self.toggleHoverRiskFactor}>{ self.populateCellValue(column) }{ self.populateEditButton(column.name, self.props.row_name) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    baseline: PropTypes.object,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    on_escape_key: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const total_performance = this.props.total_performance\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100%' : 'n/a'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'n/a'\n                    break\n                case 'short_change_pct':\n                    value = (Math.round(10 * total_performance.short_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'medium_change_pct':\n                    value = (Math.round(10 * total_performance.medium_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'long_change_pct':\n                    value = (Math.round(10 * total_performance.long_change_pct) / 10).toFixed(1) + '%'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_status_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleReset(event) {\n        this.setState({ \n            transaction: ''\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push('ERROR: Transaction \"' + transaction + '\" must be 4 terms.')\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction_summary = action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push('Transaction \"' + valid_transaction_summary + '\" has now been recorded.')\n                this.props.on_new_transaction(valid_transaction_summary)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"30\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddCash extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_action = this.state.user_action\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.')\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction_summary = user_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push('Transaction \"' + valid_transaction_summary + '\" has now been recorded.')\n            this.props.on_new_cash(valid_transaction_summary)\n            this.handleReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-cash\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"15\" placeholder=\"$1000\" required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddCash.propTypes = {\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionLog extends React.Component {\n\n    render() {\n        return (\n            <section id=\"transaction-log\">\n                {this.props.all_transactions.map( (transaction, idx) => (\n                    <p key={idx}>{transaction.summary}</p>\n                ))}\n            </section>\n        )\n    }\n}\n\nTransactionLog.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push('Tag \"' + user_tag + '\" has now been deleted.')\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class StatusMessages extends React.Component {\n\n    render() {\n        return (\n            <div id=\"status-messages-wrapper\">\n                { this.props.all_status_messages.length ? 'History:' : '' }\n                <div id=\"status-messages\">\n                { this.props.all_status_messages\n                    .map(\n                        (message, i) => {\n                            return (message.toLowerCase().startsWith(\"error\"))\n                            ? <p key={i} className=\"message error\">{message}</p>\n                            : <p key={i} className=\"message\">{message}</p>\n                        }\n                    )\n                }\n                </div>\n            </div>\n        )\n    }\n}\n\nStatusMessages.propTypes = {\n    all_status_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_holdings',\n            balance_target_column: 'current_value',\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n    }\n\n    componentDidMount() {\n        let new_balanceable_value = this.props.get_balanceable_value(this.state.balance_target_set, this.state.balance_target_column)\n        this.setState({ balanceable_value: new_balanceable_value })\n\n        const stored_balance_target_set = JSON.parse(localStorage.getItem(\"balance_target_set\"))\n        if (stored_balance_target_set !== null) {\n            this.setState({ balance_target_set: stored_balance_target_set })\n        }\n\n        const stored_balance_target_column = JSON.parse(localStorage.getItem(\"balance_target_column\"))\n        if (stored_balance_target_column !== null) {\n            this.setState({ balance_target_column: stored_balance_target_column })\n        }\n\n        const stored_cash_treatment = JSON.parse(localStorage.getItem(\"cash_treatment\"))\n        if (stored_cash_treatment !== null) {\n            this.setState({ cash_treatment: stored_cash_treatment })\n        }\n\n        const stored_cash_remaining = JSON.parse(localStorage.getItem(\"cash_remaining\"))\n        if (stored_cash_remaining !== null) {\n            this.setState({ cash_remaining: stored_cash_remaining })\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = this.props.get_balanceable_value(value, this.state.balance_target_column)\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balance_target_column') {\n            let new_balanceable_value = this.props.get_balanceable_value(this.state.balance_target_set, value)\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        this.setState({ [name]: value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'ignore') ? null : parseInt(user_remaining_cash)\n        this.props.on_whatif_submit(this.state.balance_target_set, this.state.balance_target_column, remaining_cash)\n    }\n\n    isDisabled() {\n\n        if (this.state.cash_treatment === 'include' && !this.state.cash_valid) {\n            return true\n        } else if (this.state.balance_target_set === 'my_holdings') {\n            return (this.props.show_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div>Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_holdings\">my holdings</option>\n                            <option value=\"untagged\">untagged tickers</option>\n                            {Object.entries(this.props.all_tags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag}</option>\n                            )}\n                        </select>\n                        &nbsp;into&nbsp; \n                        <select name=\"balance_target_column\" value={this.state.balance_target_column} onChange={this.handleChange}>\n                            <option value=\"current_value\">equal values</option>\n                            <option value=\"basis\">equal bases</option>\n                            <option value=\"at_risk\">equal risk</option>\n                        </select>\n                        &nbsp;...\n                    </div>\n                    <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                    <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                    <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining}></input> cash remaining (max: ${this.state.balanceable_value})</label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { AddCash } from './AddCash'\nimport { TransactionLog } from './TransactionLog'\nimport { DeleteTag } from './DeleteTag'\nimport { StatusMessages } from './StatusMessages'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | logs | what-ifs\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    componentDidMount() {\n        const stored_which_inputs = JSON.parse(localStorage.getItem(\"which_inputs\"))\n        if (stored_which_inputs !== null) {\n            this.setState({ which_inputs: stored_which_inputs })\n        }\n    }\n\n    onWhichInputs(new_which_inputs) {\n        localStorage.setItem('which_inputs', JSON.stringify(new_which_inputs))\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"logs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('logs')}>Logs</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <AddTicker\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <AddTag\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <DeleteTag\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <div className=\"content-wrapper\">\n                            <div className=\"content-half\">\n                                <AddTransaction\n                                    all_stocks={this.props.all_stocks}\n                                    all_tags={this.props.all_tags}\n                                    on_new_transaction={this.props.on_new_transaction}\n                                    on_new_messages={this.props.on_new_messages}\n                                />\n                                <AddCash\n                                    on_new_cash={this.props.on_new_cash}\n                                    on_new_messages={this.props.on_new_messages}\n                                />\n                            </div>\n                            <div className=\"content-half\">\n                                <TransactionLog\n                                    all_transactions={this.props.all_transactions}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_holdings={this.props.show_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'logs' && (\n                        <React.Fragment>\n                        <StatusMessages\n                            all_status_messages={this.props.all_status_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object,\n    all_positions: PropTypes.object,\n    all_transactions: PropTypes.array,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    all_status_messages: PropTypes.array.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2\n    // },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_basis',\n        display_name: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'risk_factor',\n        display_name: 'Risk Factor',\n        type: 'number',\n        num_decimals: 2\n    },\n    {\n        name: 'at_risk',\n        display_name: 'At Risk',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_at_risk',\n        display_name: 'What-If At Risk',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: {},\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_holdings',\n            balance_target_column: '',\n            remaining_cash: null,\n            status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            show_holdings: true,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getPositionFromTransactions = this.getPositionFromTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n        }\n\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n        }\n\n        const stored_allRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (stored_allRisk !== null) {\n            this.setState({ allRisk: stored_allRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['show_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_transaction_data = {}\n        if (stored_allTransactions !== null) {\n            indexed_transaction_data = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        let indexed_risk_data = {}\n        if (stored_allRisk !== null) {\n            indexed_risk_data = JSON.parse(JSON.stringify(stored_allRisk))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_risk_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition = self.getPositionFromTransactions(indexed_transaction_data[ticker])\n                newPosition['symbol'] = ticker\n                newPositions[ticker] = newPosition\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            let newRiskEntry = {}\n            if (indexed_risk_data.hasOwnProperty(ticker)) {\n                newRiskEntry['factor'] = indexed_risk_data[ticker].factor\n            } else if (ticker === 'S&P500') {\n                newRiskEntry['factor'] = 0.25  // based on TradeStops VQ% (range: 0 to 1), this 25% number represents medium risk\n            }\n            newRisk[ticker] = newRiskEntry\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        if (indexed_transaction_data.hasOwnProperty('cash')) {\n            let newPosition = {}\n            newPosition = self.getPositionFromCashTransactions(indexed_transaction_data['cash'])\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n        // risk for cash\n        let newRiskEntry = {}\n        newRiskEntry['factor'] = 0\n        newRisk['cash'] = newRiskEntry\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(stored_allTags, newPositions, newCurrentQuotes, stored_controls['show_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(stored_allTags, newPerformanceNumbers)))\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getPositionFromTransactions(transactions) {\n        let inflows = 0, outflows = 0, current_shares = 0, action, num_shares, ticker, value\n\n        transactions.forEach(function(transaction) {\n            [action, num_shares, ticker, value] = transaction.summary.split(' ')\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [action, value] = cash_transaction.summary.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_holdings, show_cash) {\n\n        let holdings = (show_holdings === null) ? this.state.show_holdings : show_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = all_quotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short = all_performance_numbers[ticker]['short_change_pct']\n            let medium = all_performance_numbers[ticker]['medium_change_pct']\n            let long = all_performance_numbers[ticker]['long_change_pct']\n\n            aggr_performance_by_tag['_everything_'].short_change_pct += short\n            aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n            aggr_performance_by_tag['_everything_'].long_change_pct += long\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    aggr_performance_by_tag[tag].short_change_pct += short\n                    aggr_performance_by_tag[tag].medium_change_pct += medium\n                    aggr_performance_by_tag[tag].long_change_pct += long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_holdings = (name === 'show_holdings') ? new_value : this.state.show_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, this.state.balance_target_column, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            column_names.forEach(function(column_name) {\n                if (!new_shown_column_names.includes(column_name)) {\n                    new_shown_column_names.push(column_name)\n                }\n            })\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            delete newAllTransactions[delete_ticker]\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                status_messages: newStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let action, num_shares, ticker, total\n        [action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { summary: new_transaction_summary }\n            if (newAllTransactions.hasOwnProperty(ticker) && newAllTransactions[ticker] !== null) {\n                newAllTransactions[ticker].push(new_transaction)\n            } else {\n                newAllTransactions[ticker] = [new_transaction]\n            }\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let action, total\n        [action, total]  = new_cash_transaction_summary.split(' ')\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { summary: new_cash_transaction_summary }\n            if (newAllTransactions.hasOwnProperty('cash') && newAllTransactions['cash'] !== null) {\n                newAllTransactions['cash'].push(new_cash_transaction)\n            } else {\n                newAllTransactions['cash'] = [new_cash_transaction]\n            }\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Tag \"' + delete_tag + '\" has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                status_messages: newStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(row_name) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== row_name\n                && row_name !== this.props.editing_row\n                && !this.nameIsAnAggregate(row_name)\n                && !this.nameIsSpecial(row_name)\n            ) {\n                return { editing_row: row_name }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n            } else {\n                let newRisk = { factor: parseFloat(new_value) }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newStatusMessages = [...prevState.status_messages]\n            newStatusMessages = [...new_messages.reverse(), ...newStatusMessages]\n            return { status_messages: newStatusMessages }\n        })\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getBalanceableValue(balance_target_set, balance_target_column) {\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_position = 0\n        if (this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_position = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_position\n\n        if (balance_target_set === 'my_holdings') {\n            if (this.state.show_holdings) {\n                Object.keys(this.state.allPositions).filter( ticker => ticker !== 'cash' ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'at_risk') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        } else if (balance_target_set === 'untagged') {\n            if (this.state.show_untagged && this.state.allTags.hasOwnProperty('untagged')) {\n                this.state.allTags['untagged'].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'at_risk') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        } else { // balance_target_set is a tag name\n            if (this.state.show_tagged) {\n                this.state.allTags[balance_target_set].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'at_risk') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(balance_target_set, balance_target_column, remaining_cash) {\n        this.setState({ remaining_cash: remaining_cash, balance_target_set: balance_target_set, balance_target_column: balance_target_column })\n        let whatif_columns = ['whatif_current_shares', 'whatif_'+balance_target_column]\n        this.showColumns(whatif_columns)\n        this.onWhatifGo(balance_target_set, balance_target_column, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(balance_target_set, balance_target_column, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && remaining_cash !== null\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_balance_value = this.getBalanceableValue(balance_target_set, balance_target_column) // includes cash if show_cash is enabled\n        if (remaining_cash === null) {\n            total_balance_value -= original_cash_position\n        } else {\n            total_balance_value -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let tickers_to_balance = []\n        if (balance_target_set === 'my_holdings') {\n            tickers_to_balance = [...this.getHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (balance_target_set === 'untagged') {\n            tickers_to_balance = [...this.getUntagged()]\n        } else {\n            tickers_to_balance = this.state.allTags[balance_target_set]\n        }\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balance_target_column: balance_target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        tickers_to_balance.forEach(function(ticker) {\n            let whatif_currentshares, whatif_balancedvalue\n            let target = total_balance_value / tickers_to_balance.length\n            new_whatif.values[ticker] = {}\n            let value_delta = 0\n            let original_currentvalue = self.getCurrentValue(ticker)\n            let original_basis = self.getBasis(ticker)\n\n            // balancing by value is a simple average of current values\n            if (balance_target_column === 'current_value') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                new_whatif.values[ticker]['basis'] = (original_basis + value_delta > 0) ? original_basis + value_delta : 0\n\n                new_whatif.values[ticker]['at_risk'] = new_whatif.values[ticker]['current_value'] * self.state.allRisk[ticker].factor\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (balance_target_column === 'basis') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['basis'] = (whatif_balancedvalue > 0) ? whatif_balancedvalue : 0\n\n                value_delta = whatif_balancedvalue - original_basis\n                new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['at_risk'] = new_whatif.values[ticker]['current_value'] * self.state.allRisk[ticker].factor\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (balance_target_column === 'at_risk') {\n            \n            // determine numerator\n            let numerator_product = 1\n            tickers_to_balance.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= self.state.allRisk[ticker].factor\n                }\n            })\n            let numerator = total_balance_value * numerator_product\n\n            // determine denominator\n            let denominator_terms = Array(tickers_to_balance.length).fill(1)\n            tickers_to_balance.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * self.state.allRisk[ticker].factor\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue )\n\n            // determine the balanced target value for each ticker\n            let targets = Array(tickers_to_balance.length).fill(0)\n            targets[0] = numerator / denominator\n            let factor_0 = self.state.allRisk[tickers_to_balance[0]].factor\n            tickers_to_balance.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    targets[idx] = Math.round(targets[0] * factor_0 / self.state.allRisk[ticker].factor)\n                }\n            })\n\n            tickers_to_balance.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                let target = targets[idx]\n                let original_currentvalue = self.getCurrentValue(ticker)\n                let original_basis = self.getBasis(ticker)\n\n                let whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                let whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                let value_delta = whatif_balancedvalue - original_currentvalue\n                new_whatif.values[ticker]['basis'] = (original_basis + value_delta > 0) ? original_basis + value_delta : 0\n\n                new_whatif.values[ticker]['at_risk'] = whatif_balancedvalue * self.state.allRisk[ticker].factor\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['at_risk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balance_target_column: new_whatif.balance_target_column })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_basis', 'percent_profit', 'at_risk']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit' || sort_column === 'at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sort_column === 'at_risk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit' || sort_column === 'at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sort_column === 'at_risk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sort_column === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n\n        const row_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {all_columns_namesorted.map(column => (\n                        <span key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name) } className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</span>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate, highlight_column}) => (\n            <GridHeaderRow\n                highlight_column={highlight_column}\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                volume={row_data.volume}\n                basis={row_data.basis}\n                current_shares={row_data.current_shares}\n                current_value={row_data.current_value}\n                realized_gains={row_data.realized_gains}\n                risk_factor={row_data.risk_factor}\n                performance_numbers={row_data.performance_numbers}\n                baseline={row_data.baseline}\n                total_value={row_data.total_value}\n                total_basis={row_data.total_basis}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                on_escape_key={this.onEscapeKey}\n            />\n        )\n\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = self.state.allCurrentQuotes[ticker].current_price\n            new_row['change_pct'] = self.state.allCurrentQuotes[ticker].change_pct\n            new_row['volume'] = self.state.allCurrentQuotes[ticker].volume\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker) && ticker !== 'S&P500') ? self.state.allRisk[ticker].factor : null\n            new_row['performance_numbers'] = self.state.allPerformanceNumbers[ticker]\n            new_row['baseline'] = self.state.baseline\n            new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n            new_row['total_basis'] = self.state.aggrBasis['_everything_']\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n                new_row['total_basis'] = self.state.aggrBasis['_everything_']\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n\n        let all_transactions = []\n        Object.values(this.state.allTransactions).forEach(transactions_list => transactions_list.forEach(transaction => all_transactions.push(transaction)))\n          \n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"input-controls\">\n                        <InputForms\n                            all_stocks={this.state.allStocks}\n                            all_tags={this.state.allTags}\n                            all_current_quotes={this.state.allCurrentQuotes}\n                            all_positions={this.state.allPositions}\n                            all_transactions={all_transactions}\n                            show_holdings={this.state.show_holdings}\n                            show_tagged={this.state.show_tagged}\n                            show_untagged={this.state.show_untagged}\n                            show_cash={this.state.show_cash}\n                            get_balanceable_value={this.getBalanceableValue}\n                            on_new_tickers={this.onNewTickers}\n                            on_new_tags={this.onNewTags}\n                            on_delete_tag={this.onDeleteTag}\n                            on_new_transaction={this.onNewTransaction}\n                            on_new_cash={this.onNewCash}\n                            all_status_messages={this.state.status_messages}\n                            on_new_messages={this.onNewMessages}\n                            on_whatif_submit={this.onWhatifSubmit}\n                        />\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n\n                        <div id=\"page-settings\">\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={this.state.balance_target_column} />\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={this.state.aggrTotalValue['_everything_']}\n                            total_basis={this.state.aggrBasis['_everything_']}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow is_aggregate={true} highlight_column={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}