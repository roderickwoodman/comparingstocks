{"version":3,"sources":["components/GridHeaderRow.js","components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/AddCash.js","components/DeleteTag.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","is_aggregate","this","props","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","columns","forEach","column","new_column","display_name","map","i","key","onClick","e","on_change_sort","undefined","React","Component","GridRow","state","hover","toggleHover","bind","populateMemberButton","populateDeleteButton","populateCellValue","styleCell","numberWithCommas","setState","symbol","is_aggr","row_name","className","on_remove_from_tag","disabled","special_classes","includes","membership_set","column_name","classes","on_delete_tag","isNaN","current_shares","on_delete_ticker","change_pct","performance","performance_numbers","baseline","short_change_pct","medium_change_pct","long_change_pct","num_decimals","value","baseline_value","percent_value","percent_basis","percent_profit","prefix","suffix","adjust_decimal","performance_value","total_value","total_basis","current_price","current_value","basis","realized_gains","type","volume","length","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","x","replace","row_classes","special_class","member_count","self","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","total_performance","styleTotalsCell","populateTotalsCellValue","AddTicker","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","handleSubmit","validateTickers","event","target","preventDefault","user_tag","user_tickers","String","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","id","onSubmit","onReset","onChange","placeholder","required","sort","filter","tag_name","AddTag","user_tags_string","handleChange","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction","validateTransaction","new_value","user_transaction","action","num_shares","parseInt","total","parseFloat","valid_transaction","on_new_transaction","size","AddCash","user_action","user_cash_amount","handleCashChange","handleActionChange","on_new_cash","DeleteTag","delete_tag","InputForms","which_inputs","onWhichInputs","new_which_inputs","Fragment","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","status_messages","allPerformanceNumbers","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_holdings","show_tagged","show_untagged","show_index","show_cash","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getPositionFromTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeSort","onToggleShowColumn","onNewTransaction","onNewCash","onNewMessages","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","getIndicies","getHoldings","getAdded","getTagged","getUntagged","nameIsAnAggregate","sortTickers","stored_baseline","JSON","parse","localStorage","getItem","assign","short_pct_gain","medium_pct_gain","long_pct_gain","stored_sort_column","stored_sort_dir_asc","stored_allTags","stored_allTransactions","stored_controls","control","stored_control","indexed_transaction_data","stringify","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","monthly_prices","entries","price","now","prev_short","prev_medium","prev_long","setItem","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","init_shown_columns","stored_shown_columns","aggr_position_info","aggr_performance","transactions","inflows","outflows","substr","cash_transactions","cash_transaction","cash_amount","all_positions","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_sort_column","prevState","new_shown_column_names","splice","findIndex","new_shown_columns","idx","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newStatusMessages","new_transaction","orig_basis","orig_current_shares","orig_realized_gains","updatedPosition","new_cash_transaction","new_cash","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","new_messages","reverse","holding","added_tickers","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","fromCharCode","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","untagged","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","row_popover","Popover","Title","as","Content","htmlFor","column_popover","PopulateHeaderRow","symbol_count","PopulateRow","all_row_data","new_row","message","startsWith","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1c3aa37.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            all_columns.map( (column,i) => (\n                <th key={ column.name } onClick={ (i!==0) ? (e)=>this.props.on_change_sort(column.name) : undefined }>{ (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }{ column.name === sort_column ? sort_triangle : '' }</th>\n            ))\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    on_change_sort: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n        this.toggleHover = this.toggleHover.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    toggleHover() {\n        this.setState({ hover: !this.state.hover })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hover) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n        if ( this.state.hover \n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let basis = this.props.basis\n        let realized_gains = this.props.realized_gains\n\n        let percent_value, percent_basis, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'percent_basis':\n                value = percent_basis\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    value = value - baseline_value\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            return value = prefix + this.numberWithCommas(value) + suffix\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHover} onMouseLeave={self.toggleHover}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    baseline: PropTypes.object,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const total_performance = this.props.total_performance\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100%' : 'n/a'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'n/a'\n                    break\n                case 'short_change_pct':\n                    value = (Math.round(10 * total_performance.short_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'medium_change_pct':\n                    value = (Math.round(10 * total_performance.medium_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'long_change_pct':\n                    value = (Math.round(10 * total_performance.long_change_pct) / 10).toFixed(1) + '%'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_status_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleReset(event) {\n        this.setState({ \n            transaction: ''\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push('ERROR: Transaction \"' + transaction + '\" must be 4 terms.')\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction = action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n                this.props.on_new_transaction(valid_transaction)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"30\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddCash extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_action = this.state.user_action\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.')\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction = user_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n            this.props.on_new_cash(valid_transaction)\n            this.handleReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"15\" placeholder=\"$1000\" required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddCash.propTypes = {\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push('Tag \"' + user_tag + '\" has now been deleted.')\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { AddCash } from './AddCash'\nimport { DeleteTag } from './DeleteTag'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    onWhichInputs(new_which_inputs) {\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <AddTicker\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <AddTag\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <DeleteTag\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <AddTransaction\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_transaction={this.props.on_new_transaction}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <AddCash\n                            on_new_cash={this.props.on_new_cash}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                    </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2\n    // },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: {},\n            allTags: {\n                'untagged': []\n            },\n            status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            allPerformanceNumbers: {},\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n            show_holdings: true,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getPositionFromTransactions = this.getPositionFromTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n        }\n\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n        }\n\n        let self = this\n\n        const view_controls = ['show_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_transaction_data = {}\n        if (stored_allTransactions !== null) {\n            indexed_transaction_data = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition = self.getPositionFromTransactions(indexed_transaction_data[ticker])\n                newPosition['symbol'] = ticker\n                newPositions[ticker] = newPosition\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        if (indexed_transaction_data.hasOwnProperty('cash')) {\n            let newPosition = {}\n            newPosition = self.getPositionFromCashTransactions(indexed_transaction_data['cash'])\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(stored_allTags, newPositions, newCurrentQuotes, stored_controls['show_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(stored_allTags, newPerformanceNumbers)))\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getPositionFromTransactions(transactions) {\n        let inflows = 0, outflows = 0, current_shares = 0, action, num_shares, ticker, value\n\n        transactions.forEach(function(transaction) {\n            [action, num_shares, ticker, value] = transaction.split(' ')\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [action, value] = cash_transaction.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_holdings, show_cash) {\n\n        let holdings = (show_holdings === null) ? this.state.show_holdings : show_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = all_quotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short = all_performance_numbers[ticker]['short_change_pct']\n            let medium = all_performance_numbers[ticker]['medium_change_pct']\n            let long = all_performance_numbers[ticker]['long_change_pct']\n\n            aggr_performance_by_tag['_everything_'].short_change_pct += short\n            aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n            aggr_performance_by_tag['_everything_'].long_change_pct += long\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    aggr_performance_by_tag[tag].short_change_pct += short\n                    aggr_performance_by_tag[tag].medium_change_pct += medium\n                    aggr_performance_by_tag[tag].long_change_pct += long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_holdings = (name === 'show_holdings') ? new_value : this.state.show_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_holdings,\n                show_cash)))\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            delete newAllTransactions[delete_ticker]\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                status_messages: newStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction) {\n        let action, num_shares, ticker, total\n        [action, num_shares, ticker, total]  = new_transaction.split(' ')\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty(ticker) && newAllTransactions[ticker] !== null) {\n                newAllTransactions[ticker] = newAllTransactions[ticker].concat([new_transaction])\n            } else {\n                newAllTransactions[ticker] = [new_transaction]\n            }\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewCash(new_cash_transaction) {\n        let action, total\n        [action, total]  = new_cash_transaction.split(' ')\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty('cash') && newAllTransactions['cash'] !== null) {\n                newAllTransactions['cash'] = newAllTransactions['cash'].concat([new_cash_transaction])\n            } else {\n                newAllTransactions['cash'] = [new_cash_transaction]\n            }\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Tag \"' + delete_tag + '\" has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                status_messages: newStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newStatusMessages = [...prevState.status_messages]\n            newStatusMessages = [...new_messages.reverse(), ...newStatusMessages]\n            return { status_messages: newStatusMessages }\n        })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_basis', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n\n        const row_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {all_columns_namesorted.map(column => (\n                        <span key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name) } className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</span>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate}) => (\n            <GridHeaderRow\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                on_change_sort={this.onChangeSort}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                volume={row_data.volume}\n                basis={row_data.basis}\n                current_shares={row_data.current_shares}\n                current_value={row_data.current_value}\n                realized_gains={row_data.realized_gains}\n                performance_numbers={row_data.performance_numbers}\n                baseline={row_data.baseline}\n                total_value={row_data.total_value}\n                total_basis={row_data.total_basis}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n            />\n        )\n\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = self.state.allCurrentQuotes[ticker].current_price\n            new_row['change_pct'] = self.state.allCurrentQuotes[ticker].change_pct\n            new_row['volume'] = self.state.allCurrentQuotes[ticker].volume\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['performance_numbers'] = self.state.allPerformanceNumbers[ticker]\n            new_row['baseline'] = self.state.baseline\n            new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n            new_row['total_basis'] = self.state.aggrBasis['_everything_']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n                new_row['total_basis'] = self.state.aggrBasis['_everything_']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n          \n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"input-controls\">\n                        <InputForms\n                            all_stocks={this.state.allStocks}\n                            all_tags={this.state.allTags}\n                            on_new_tickers={this.onNewTickers}\n                            on_new_tags={this.onNewTags}\n                            on_delete_tag={this.onDeleteTag}\n                            on_new_transaction={this.onNewTransaction}\n                            on_new_cash={this.onNewCash}\n                            on_new_messages={this.onNewMessages}\n                        />\n                        <div id=\"status-messages-wrapper\">\n                            { this.state.status_messages.length ? 'History:' : '' }\n                            <div id=\"status-messages\">\n                            { this.state.status_messages\n                                .map(\n                                    (message, i) => {\n                                        return (message.toLowerCase().startsWith(\"error\"))\n                                        ? <p key={i} className=\"message error\">{message}</p>\n                                        : <p key={i} className=\"message\">{message}</p>\n                                    }\n                                )\n                            }\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n\n                        <div id=\"page-settings\">\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <PopulateHeaderRow is_aggregate={false} />\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={this.state.aggrTotalValue['_everything_']}\n                            total_basis={this.state.aggrBasis['_everything_']}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <tr>\n                                <PopulateHeaderRow is_aggregate={true} />\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}