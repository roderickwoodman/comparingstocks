{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/TickerAdd.js","components/TagAdd.js","components/TransactionAdd.js","components/TransactionsList.js","components/TagDelete.js","components/MyPerformance.js","components/Console.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","highlight_column","map","i","key","String","fromCharCode","className","onClick","e","undefined","React","Component","EditNumericCell","state","user_value","user_value_is_valid","handleEscapeKey","handleChange","handleSubmit","isNaN","original_value","setState","elem","focus","document","addEventListener","removeEventListener","event","keyCode","on_escape_key","target","value","length","preventDefault","on_new_value","onSubmit","ref","type","id","onChange","size","disabled","GridRow","hovering_symbol","hovering_risk_factor","user_risk_factor","user_risk_factor_valid","formatDate","onWhatifCellClick","toggleHoverSymbol","toggleHoverRiskFactor","populateMemberButton","populateDeleteButton","populateEditButton","editRiskFactor","onNewValue","populateCellValue","numberWithCommas","daysAgo","epoch","d","Date","month","getMonth","day","getDate","year","getFullYear","join","symbol","is_aggr","row_name","on_remove_from_tag","special_classes","includes","membership_set","on_delete_tag","current_shares","on_delete_ticker","editing_row","on_edit_cell","change_pct","performance","performance_numbers","baseline","short_change_pct","style_realized_performance","start_date","show_only_achieved_performance","medium_change_pct","long_change_pct","new_value","on_modify_risk_factor","current_edit_value","num_decimals","baseline_value","prefix","suffix","adjust_decimal","performance_value","total_value","total_basis","current_price","current_value","risk_factor","visible_risk_factor","percent_value","percent_basis","profit","percent_profit","value_at_risk","basis","basis_risked","realized_gains","whatif","quote_date","risk_factor_modified","parseInt","volume","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","date_str","now","then","diff","row_classes","special_class","member_count","sort","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","total_performance","styleTotalsCell","populateTotalsCellValue","TickerAdd","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","validateTickers","user_tag","user_tickers","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_messages","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","new_console_message_set","num_errors","filter","message","create_console_message_set","messages","on_new_tickers","on_new_console_messages","onReset","placeholder","required","tag_name","TagAdd","user_tags_string","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","TransactionAdd","transaction_date","transaction","user_cash_action","user_cash_amount","validateTransaction","handleCashChange","handleCashReset","handleActionChange","handleCashSubmit","getCashOperationPlaceholder","new_message","user_date","user_cash_operation","terms","cash_amount","parseFloat","valid_transaction_summary","on_new_cash","user_transaction","summary_message","action","num_shares","total","on_new_transaction","TransactionsList","exportRef","createRef","importRef","filter_str","file","onExportButton","onHiddenImportChange","exported_json","transactions","JSON","parse","stringify","all_transactions","risk","all_risk","data","encodeURIComponent","a","createElement","href","download","innerHTML","current","appendChild","click","remove","files","reader","FileReader","readAsText","onload","evt","file_contents","result","on_import_transactions","sorted_filtered_transactions","summary","b","accept","style","width","visibility","modified_at","on_delete_transaction","TagDelete","delete_tag","MyPerformance","period_size","period_data","data_sort_dir","generatePeriodData","formatCurrency","getDisplayedPerformance","getMonthEndQuote","getYear","getPeriod","formatPerformance","formatIndexPerformance","formatWholePercentage","onToggleSortOrder","handlePeriodChange","sorted_transactions","date","new_console_messages","first_period","first_year","first_month","floor","today_period","periods_of_performance","start_baselinequote","start_baselineprice","prev_quote_month","prev_quote_year","today","today_year","today_month","price","start_shares","start_tickervalue","start_totalvalue","p","period","new_period","end_shares","end_cash","end_transfersinvalue","end_tickervalue","end_totalvalue","assign","period_sort_suffix","period_display_suffix","slice","toLocaleString","target_year","period_transactions","t","shares","cash_delta","share_delta","end_tickerdate","this_quote_month","this_quote_year","lastavailablequote_month_str","lastavailablequote_year_str","quote_dates","entries","position","all_monthly_quotes","monthly_dates_desc","reverse","lastavailablequote_month","lastavailablequote_year","month_end_quote","end_baselineprice","end_baselinedate","end_baselinequote","adjusted_transfer_value","zb_start_month","zb_end_month","end_year","period_start_date","period_end_date","period_days","transactions_of_cash","fraction_of_period","transfer_date","zb_month","dollars","retval","sort_name","period_baseline_change_pct","my_perf","period_change_pct","baseline_perf","monthly_dates","monthly_prices","period_idx","findIndex","performance_obj","displayed","index","display_value","index_value","percentage","num_periods","el","getElementById","period_width","scrollWidth","new_scroll_left","scrollLeft","prevState","newPeriod","displayed_performance","qdata","sorted_data","end_tickervaluefraction","end_cashfraction","Console","getClasses","message_sets","all_console_messages","message_set","j","WhatIf","balanceable_value","balance_target_set","balance_target_column","sell_all_of","cash_treatment","cash_remaining","cash_valid","isDisabled","new_balanceable_value","get_balanceable_value","stored_balance_target_set","localStorage","getItem","stored_balance_target_column","stored_cash_remaining","selectedOptions","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","setItem","multiple_tickers","item","user_remaining_cash","remaining_cash","on_whatif_submit","show_current_holdings","show_untagged","show_tagged","excludable_tickers","all_positions","untagged","entry","multiple","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","stored_which_inputs","new_which_inputs","clear_last_console_message","Fragment","all_current_quotes","show_previous_holdings","category","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","allPerformanceNumbers","allRisk","allWhatifs","allConsoleMessages","last_console_message","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getTransactionById","getTransactionsByTicker","getPositionFromSingleTickerTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","showColumns","createConsoleMessageSet","onToggleShowColumn","onNewTransaction","onImportTransactions","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","onDeleteTransaction","onEditCell","onModifyRiskFactor","onEscapeKey","onNewConsoleMessages","clearLastConsoleMessage","getCurrentValue","getCurrentShares","getBasis","getBalanceableValue","getMaxBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getCurrentHoldings","getPreviousHoldings","getAdded","getTagged","getUntagged","getTickersFromSet","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_allRisk","stored_controls","control","stored_control","init_shown_columns","stored_shown_columns","stored_baseline","short_pct_gain","medium_pct_gain","long_pct_gain","indexed_risk_data","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeriesDesc","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newRisk","cash_delta_from_stock_transactions","newPosition","newCurrentQuote","quoteResult","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","cash_transactions","aggr_position_info","aggr_performance","transaction_id","inflows","outflows","position_start_date","substr","cash_transaction","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","column_names","new_shown_column_names","new_shown_columns","splice","idx","getTime","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newAllConsoleMessages","new_transaction_summary","new_transaction","orig_start_date","orig_basis","orig_current_shares","orig_realized_gains","new_start_date","new_current_shares","updatedPosition","updatedCashPosition","imported_tickers","imported_transactions","imported_risk","already_added","window","location","reload","new_cash_transaction_summary","new_cash_transaction","new_cash","delete_transaction_id","transaction_to_delete","remainingTransactionsForTicker","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","factor","target_set","sell_all_set","target_column","include_cash","current_cash_value","target_tickers","show_whatif_columns","adjusting_cash","original_cash_position","total_amount_to_balance","new_whatif","actual_remaining_cash","risk_factors","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","whatif_basis","target_delta_shares","original_currentshares","target_delta","ceil","whatif_balancedbasis","losing","whatif_currentvalue","target_nonzero_tickers","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","currentValue","nonzero_targets","targets","nonzero_ticker","nonzero_i","holding","added_tickers","set","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","all_columns_by_category","category_name","this_category_columns","row_popover","Popover","Title","as","Content","column_popover","general_settings_popover","PopulateHeaderRow","symbol_count","PopulateRow","all_row_data","new_row","all_ticker_rows","all_aggregate_rows","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","colSpan","row","ReactDOM","render"],"mappings":"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","file":"static/js/main.65d30373.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            <tr>\n            {this.props.highlight_column !== null && all_columns.map( (column,i) => (\n                <th\n                key={ column.name }\n                >\n                    { (column.name === this.props.highlight_column) \n                    ? 'BEFORE BALANCING' \n                    : (column.name === 'whatif_' + this.props.highlight_column) \n                        ? 'AFTER BALANCING' \n                        : String.fromCharCode(160) }\n                </th>\n            ))}\n            {this.props.highlight_column === null && all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))}\n            </tr>\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    highlight_column: PropTypes.string,\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class EditNumericCell extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_value: '',\n            user_value_is_valid: false\n        }\n        this.handleEscapeKey = this.handleEscapeKey.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (isNaN(this.props.original_value)) {\n            this.setState({ user_value: '' }) \n        } else {\n            this.setState({ user_value: this.props.original_value })\n        }\n        this.elem.focus()\n        document.addEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    handleEscapeKey(event) {\n        if (event.keyCode === 27) {\n            this.props.on_escape_key()\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'user_value') {\n            if (value.length && !isNaN(value) && value > 0) {\n                this.setState({ user_value: value, user_value_is_valid: true })\n            } else {\n                this.setState({ user_value: value, user_value_is_valid: false })\n            }\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.props.on_new_value(this.state.user_value)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input ref={(elem) => {this.elem = elem}} type=\"text\" id=\"edit-cell\" name=\"user_value\" value={this.state.user_value} onChange={this.handleChange} size=\"5\" />\n                <button type=\"submit\" disabled={!this.state.user_value_is_valid}>S</button>\n            </form>\n        )\n    }\n}\n\nEditNumericCell.propTypes = {\n    original_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_new_value: PropTypes.func.isRequired,\n    on_escape_key: PropTypes.func.isRequired\n}\n\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hovering_symbol: false,\n            hovering_risk_factor: false,\n            user_risk_factor: '',\n            user_risk_factor_valid: false\n        }\n        this.formatDate = this.formatDate.bind(this)\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHoverSymbol = this.toggleHoverSymbol.bind(this)\n        this.toggleHoverRiskFactor = this.toggleHoverRiskFactor.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateEditButton = this.populateEditButton.bind(this)\n        this.editRiskFactor = this.editRiskFactor.bind(this)\n        this.onNewValue = this.onNewValue.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n    }\n\n    formatDate(epoch) {\n        var d = new Date(epoch),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHoverSymbol() {\n        this.setState({ hovering_symbol: !this.state.hovering_symbol })\n    }\n\n    toggleHoverRiskFactor() {\n        this.setState({ hovering_risk_factor: !this.state.hovering_risk_factor })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hovering_symbol) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    populateEditButton(column_name, row_name) {\n        let classes = 'edit'\n        if (this.state.hovering_risk_factor) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'risk_factor'\n            && row_name !== this.props.editing_row\n            && row_name !== 'cash'\n            && !this.props.is_aggregate \n            && !this.props.special_classes.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    editRiskFactor(row_name) {\n        this.props.on_edit_cell(row_name)\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n\n        // hovering\n        if ( this.state.hovering_symbol\n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( this.state.hovering_risk_factor\n            && column_name === 'risk_factor' \n            && !special_classes.includes('index') \n            && !this.props.is_aggregate\n            && row_name !== 'cash' ) {\n            classes += ' hovering'\n        }\n\n        // whatif\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n\n        // italics\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 180\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 365\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' :  ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 730\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    onNewValue(new_value) {\n        this.props.on_modify_risk_factor(this.props.row_name, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n\n        if ( column.name === 'risk_factor'\n            && this.props.row_name === this.props.editing_row ) {\n            return (\n                <EditNumericCell \n                    original_value={this.props.current_edit_value} \n                    on_new_value={this.onNewValue} \n                    on_escape_key={this.props.on_escape_key}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 0.20\n        let visible_risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 'n/a'\n        if (this.props.row_name === 'cash') {\n            risk_factor = 0\n            visible_risk_factor = 0\n        }\n        let value_at_risk = current_value * risk_factor\n        let basis = this.props.basis\n        let basis_risked = basis * risk_factor\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, profit, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate profit and percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            profit = 'n/a'\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                profit = 'n/a'\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                profit = current_value - basis\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                profit = current_value - basis\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                profit = 0\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'start_date':\n                value = this.props.start_date\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'quote_date':\n                value = this.props.quote_date\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'whatif_current_value':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                } else {\n                    value = whatif.current_value\n                }\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'basis_risked':\n                value = basis_risked\n                break\n            case 'whatif_basis_risked':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis_risked - ((basis_risked === 'n/a') ? 0 : basis_risked)\n                } else {\n                    value = whatif.basis_risked\n                }\n                break\n            case 'percent_basis':\n                value = percent_basis\n                break\n            case 'profit':\n                value = profit\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'risk_factor':\n                value = visible_risk_factor\n                break\n            case 'risk_factor_modified':\n                if (this.props.risk_factor_modified !== null) {\n                    value = this.formatDate(parseInt(this.props.risk_factor_modified))\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'value_at_risk':\n                value = value_at_risk\n                break\n            case 'whatif_value_at_risk':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.value_at_risk - ((value_at_risk === 'n/a') ? 0 : value_at_risk)\n                } else {\n                    value = whatif.value_at_risk\n                }\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'profit': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    if (this.props.row_name === 'S&P500') {\n                        return 'ref.'\n                    } else {\n                        value = value - baseline_value\n                    }\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let diff = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return diff\n        }\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.sort().map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHoverSymbol} onMouseLeave={self.toggleHoverSymbol}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name === 'risk_factor') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (e)=>self.editRiskFactor(self.props.row_name) } onMouseEnter={self.toggleHoverRiskFactor} onMouseLeave={self.toggleHoverRiskFactor}>{ self.populateCellValue(column) }{ self.populateEditButton(column.name, self.props.row_name) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    start_date: PropTypes.string,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    quote_date: PropTypes.string,\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor_modified: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    show_only_achieved_performance: PropTypes.bool,\n    baseline: PropTypes.object,\n    style_realized_performance: PropTypes.bool,\n    total_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    total_basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    on_escape_key: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const total_performance = this.props.total_performance\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100%' : 'n/a'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'n/a'\n                    break\n                case 'short_change_pct':\n                    value = (Math.round(10 * total_performance.short_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'medium_change_pct':\n                    value = (Math.round(10 * total_performance.medium_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'long_change_pct':\n                    value = (Math.round(10 * total_performance.long_change_pct) / 10).toFixed(1) + '%'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TickerAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        let num_errors = new_messages.filter(message => message.includes('ERROR')).length\n        if (num_errors === 0) {\n            num_errors = 'no'\n        }\n        let new_console_message_set\n        if (new_messages.length > 1) {\n            new_console_message_set = this.props.create_console_message_set('Created ' + tickers_to_add.length + ' tickers with ' + num_errors + ' errors.')\n            new_console_message_set.messages = [...new_messages]\n        } else {\n            new_console_message_set = this.props.create_console_message_set(new_messages[0])\n        }\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_console_messages(new_console_message_set)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTickerAdd.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TagAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = [], new_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        let num_errors = new_messages.filter(message => message.includes('ERROR')).length\n        if (num_errors === 0) {\n            num_errors = 'no'\n        }\n        let new_console_message_set\n        if (new_messages.length > 1) {\n            new_console_message_set = this.props.create_console_message_set('Created ' + tags_to_add.length + ' tags with ' + num_errors + ' errors.')\n            new_console_message_set.messages = [...new_messages]\n        } else {\n            new_console_message_set = this.props.create_console_message_set(new_messages[0])\n        }\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_console_messages(new_console_message_set)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTagAdd.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction_date: '',\n            transaction: '',\n            user_cash_action: 'dividend',\n            user_cash_amount: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleCashReset = this.handleCashReset.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleCashSubmit = this.handleCashSubmit.bind(this)\n        this.getCashOperationPlaceholder = this.getCashOperationPlaceholder.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_cash_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleCashReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleCashSubmit(event) {\n        event.preventDefault()\n        let new_message = null\n        let user_cash_action = this.state.user_cash_action\n        let user_date = this.state.transaction_date\n\n        let user_cash_operation = this.state.user_cash_amount\n        let terms = user_cash_operation.split(' ')\n        let user_cash_amount\n\n        if (this.state.user_cash_action === 'dividend') {\n            if (terms.length === 3 && terms[1].toLowerCase() === 'on' && terms[2].replace(/\\W/g,'').length) {\n                user_cash_amount = terms[0]\n            } else {\n                new_message = 'ERROR: Dividend syntax must be in the form: \"$200 on MSFT\"'\n            }\n        } else {\n            user_cash_amount = user_cash_operation\n        }\n\n        if (new_message === null) {\n            let cash_amount = parseFloat(user_cash_amount.trim().replace(/\\$/g, \"\"))\n            if (isNaN(cash_amount)) {\n                new_message = 'ERROR: Cash amount \"' + cash_amount + '\" is not in currency format.'\n            } else {\n                let total = parseFloat((Math.round(cash_amount * 100) / 100).toFixed(2));\n                let valid_transaction_summary = user_date + ': ' + user_cash_action + ' $' + total.toFixed(2) + ' cash'\n                if (this.state.user_cash_action === 'dividend') {\n                    valid_transaction_summary += ' on ' + terms[2].toUpperCase()\n                }\n                new_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                this.props.on_new_cash(valid_transaction_summary)\n                this.handleCashReset()\n            }\n        }\n        let new_console_message_set = this.props.create_console_message_set(new_message)\n        this.props.on_new_console_messages(new_console_message_set)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_messages = [], summary_message\n\n        if (transaction.length < 4) {\n\n            summary_message = 'ERROR: Transaction \"' + transaction + '\" must be 4 terms.'\n            new_messages.push(summary_message)\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction_summary = this.state.transaction_date + ': ' + action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                summary_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                new_messages.push(summary_message)\n                this.props.on_new_transaction(valid_transaction_summary)\n\n            } else {\n                transaction[2] = transaction[2].toUpperCase()\n                transaction[3] = '$' + transaction[3]\n                summary_message = 'ERROR: Transaction \"' + transaction.join(' ') + '\" could not be recorded, see the \"Messages\" tab'\n            }\n        }\n\n        // send all of the messages to print\n        let new_console_message_set = this.props.create_console_message_set(summary_message)\n        new_console_message_set.messages = [...new_messages]\n        this.props.on_new_console_messages(new_console_message_set)\n    }\n\n    getCashOperationPlaceholder() {\n        if (this.state.user_cash_action === 'dividend') {\n            return \"$85.00 on MSFT\"\n        } else if (this.state.user_cash_action === 'fee') {\n            return \"$15\"\n        } else {\n            return \"$1000\"\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form>\n                    <label>Transaction Date:</label>\n                    <input name=\"transaction_date\" value={this.state.transaction_date} onChange={this.handleChange} type=\"date\" size=\"10\" />\n                </form>\n                <form onSubmit={this.handleSubmit}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"25\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction==='' || this.state.transaction_date===''} />\n                    </section>\n                </form>\n                <form onSubmit={this.handleCashSubmit}>\n                    <label>Cash&nbsp;\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"dividend\">dividend</option>\n                            <option value=\"fee\">fee</option>\n                            <option value=\"transferIN\">transfer IN</option>\n                            <option value=\"transferOUT\">transfer OUT</option>\n                        </select>:\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"20\" placeholder={this.getCashOperationPlaceholder()} required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount==='' || this.state.transaction_date===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTransactionAdd.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionsList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.exportRef = React.createRef()\n        this.importRef = React.createRef()\n        this.state = {\n            filter_str: '',\n            file: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.onExportButton = this.onExportButton.bind(this)\n        this.onHiddenImportChange = this.onHiddenImportChange.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n        \n    onExportButton() {\n\n        // prepare the data\n        let exported_json = {\n            transactions: JSON.parse(JSON.stringify(this.props.all_transactions)),\n            risk: JSON.parse(JSON.stringify(this.props.all_risk))\n        }\n        var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exported_json));\n\n        // create the download link\n        var a = document.createElement('a')\n        a.href = 'data:' + data\n        a.download = 'transactions.json'\n        a.innerHTML = 'download'\n\n        // attach the download link, trigger it, and then remove it from the DOM\n        var container = this.exportRef.current\n        container.appendChild(a)\n        a.click()\n        a.remove()\n    }\n\n    onHiddenImportChange(files) {\n        if (files[0]) {\n            let self = this\n            let reader = new FileReader();\n            reader.readAsText(files[0], \"UTF-8\");\n            reader.onload = function (evt) {\n                let file_contents = JSON.parse(evt.target.result)\n                self.props.on_import_transactions(file_contents)\n            }\n        }\n    }\n\n    render() {\n        let sorted_filtered_transactions = this.props.all_transactions\n            .filter( transaction => transaction.summary.toLowerCase().includes(this.state.filter_str.toLowerCase()) )\n            .sort( function(a,b) {\n                if (a.summary < b.summary){\n                    return -1\n                } else if (a.summary > b.summary) {\n                    return 1\n                } else {\n                    return 0\n                }\n            })\n        return (\n            <section id=\"transaction-list\">\n                <section id=\"transaction-list-controls\">\n                    <form>\n                        <label>Filter:</label>\n                        <input name=\"filter_str\" value={this.state.filter_str} onChange={this.handleChange} size=\"15\" />\n\n                        <button className=\"btn btn-sm btn-primary\" onClick={this.onExportButton} disabled={!this.props.all_transactions.length}>export</button>\n                        <div ref={this.exportRef}></div>\n\n                        <label className=\"btn btn-sm btn-primary\">\n                        <input type=\"file\" ref={this.importRef} onChange={ (e) => this.onHiddenImportChange(e.target.files) } accept=\"application/json\" style={{width: 0, visibility: \"hidden\"}} />\n                        import\n                        </label>\n                    </form>\n                </section>\n                <section id=\"transactions\">\n                    {sorted_filtered_transactions.map( transaction => (\n                        <p key={transaction.modified_at} className=\"transaction\" onClick={ (e)=>this.props.on_delete_transaction(transaction.modified_at)}>{transaction.summary}</p>\n                    ))}\n                </section>\n            </section>\n        )\n    }\n}\n\nTransactionsList.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_risk: PropTypes.object.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TagDelete extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        let user_tag = this.state.delete_tag\n        this.props.on_delete_tag(user_tag)\n\n        this.setState({ delete_tag: 'untagged' })\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTagDelete.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class MyPerformance extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            period_size: 'year',\n            period_data: [],\n            data_sort_dir: 'asc',\n        }\n        this.generatePeriodData = this.generatePeriodData.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.formatCurrency = this.formatCurrency.bind(this)\n        this.getDisplayedPerformance = this.getDisplayedPerformance.bind(this)\n        this.getMonthEndQuote = this.getMonthEndQuote.bind(this)\n        this.getYear = this.getYear.bind(this)\n        this.getPeriod = this.getPeriod.bind(this)\n        this.getMonth = this.getMonth.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.formatPerformance = this.formatPerformance.bind(this)\n        this.formatIndexPerformance = this.formatIndexPerformance.bind(this)\n        this.formatWholePercentage = this.formatWholePercentage.bind(this)\n        this.onToggleSortOrder = this.onToggleSortOrder.bind(this)\n        this.handlePeriodChange = this.handlePeriodChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.generatePeriodData(this.state.period_size)\n    }\n\n    generatePeriodData(period_size) {\n\n        let sorted_transactions = this.props.all_transactions.sort(function(a, b) {\n            if (a.date < b.date) {\n                return -1\n            } else if (a.date > b.date) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        \n        let period_data = []\n        let new_console_messages = []\n\n        if (sorted_transactions.length) {\n\n            // the performance start period includes the earliest added transaction\n            let first_year = parseInt(sorted_transactions[0].date.split('-')[0])\n            let first_month = parseInt(sorted_transactions[0].date.split('-')[1])\n            let first_period\n            if (period_size === 'month') {\n                first_period = first_month\n            } else if (period_size === 'quarter') {\n                first_period = Math.floor((first_month - 1) / 3 + 1)\n            } else if (period_size === 'year') {\n                first_period = 1\n            }\n\n            // the performance end period includes the current date\n            let today = new Date()\n            let today_year = today.getFullYear()\n            let today_month = today.getMonth() + 1\n            let today_period\n            if (period_size === 'month') {\n                today_period = today_month\n            } else if (period_size === 'quarter') {\n                today_period = Math.round(today.getMonth() / 3)\n            } else if (period_size === 'year') {\n                today_period = 1\n            }\n\n            // calculate the number of periods to display\n            let periods_of_performance\n            if (period_size === 'month') {\n                periods_of_performance = (today_year - first_year) * 12 + (today_period - first_period) + 1\n            } else if (period_size === 'quarter') {\n                periods_of_performance = (today_year - first_year) * 4 + (today_period - first_period) + 1\n            } else if (period_size === 'year') {\n                periods_of_performance = (today_year - first_year) + 1\n            }\n\n            // based on MONTHLY quote data, initialize the lookback variables for the previous period\n            let start_baselinequote, start_baselineprice\n            let prev_quote_month, prev_quote_year\n            if (period_size === 'month') {\n                prev_quote_year = (first_month !== 1) ? first_year : first_year - 1\n                prev_quote_month = (first_month !== 1) ? first_month - 1 : 12\n            } else if (period_size === 'quarter') {\n                prev_quote_year = (first_period !== 1) ? first_year : first_year - 1 \n                prev_quote_month = (first_period !== 1) ? (first_period - 1) * 3 : 9\n            } else if (period_size === 'year') {\n                prev_quote_year = first_year - 1\n                prev_quote_month = 12\n            }\n            start_baselinequote = this.getMonthEndQuote('S&P500', prev_quote_year, prev_quote_month)\n            if (start_baselinequote === null) {\n                new_console_messages.push('ERROR: quote for symbol S&P500 for month '+prev_quote_year+'-'+prev_quote_month+' is unavailable')\n                start_baselineprice = 'err.'\n            } else {\n                start_baselineprice = start_baselinequote.price\n            }\n\n            // calculate all period data\n            let year = first_year\n            let start_shares = {}, start_cash = 0, start_tickervalue = 0, start_totalvalue = 0\n            for (let p = 0; p < periods_of_performance; p++) {\n                \n                // initialization\n                let period, new_period = {}\n                if (period_size === 'month') {\n                    period = (p + first_period - 1) % 12 + 1\n                } else if (period_size === 'quarter') {\n                    period = (p + first_period - 1) % 4 + 1\n                } else if (period_size === 'year') {\n                    period =  1\n                }\n                new_period['period'] = period\n                if (period === 1 && p !== 0) {\n                    year += 1\n                }\n                new_period['year'] = year\n                let end_shares = {}, end_cash = 0, end_transfersinvalue = 0\n                if (p !== 0) {\n                    start_tickervalue = period_data[p-1].end_tickervalue\n                    start_totalvalue = period_data[p-1].end_totalvalue\n                    end_shares = Object.assign({}, period_data[p-1].end_shares)\n                    end_cash = period_data[p-1].end_cash\n                } else {\n                    end_shares = Object.assign({}, start_shares)\n                    end_cash = start_cash\n                }\n                let period_sort_suffix, period_display_suffix\n                if (period_size === 'month') {\n                    let d = new Date(1980, period - 1, 1)\n                    period_sort_suffix = 'M' + ('0' + period).slice(-2)\n                    period_display_suffix = ' ' + d.toLocaleString('default', { month: 'short' })\n                } else if (period_size === 'quarter') {\n                    period_sort_suffix = 'Q' + ('0' + period).slice(-2)\n                    period_display_suffix = 'Q' + period\n                } else if (period_size === 'year') {\n                    period_sort_suffix = ''\n                    period_display_suffix = ''\n                }\n                new_period['display_name'] = (p !== periods_of_performance - 1) ? year + period_display_suffix : 'current'\n                new_period['sort_name'] = year + period_sort_suffix\n\n                // determine period's transactions\n                let target_year = year\n                let period_transactions = sorted_transactions.filter( t => this.getYear(t.date) === target_year && this.getPeriod(period_size, t.date) === period )\n                new_period['transactions_of_stock'] = period_transactions.filter( t => t.ticker !== 'cash' )\n                new_period['transactions_of_cash'] = period_transactions.filter( t => t.ticker === 'cash' )\n\n                // determine period-end shares and cash value\n                for (let transaction of period_transactions) {\n                    let action, ticker, shares, total\n                    [action, ticker, shares, total] = [transaction.action, transaction.ticker, transaction.shares, transaction.total]\n                    if (ticker === 'cash') {\n                        let cash_delta = (action === 'transferIN' || action === 'dividend') ? total : -1 * total\n                        if (action === 'transferIN' || action === 'transferOUT') {\n                            end_transfersinvalue += cash_delta\n                        }\n                        end_cash += cash_delta\n                    } else {\n                        let share_delta = (action === 'buy') ? shares : -1 * shares\n                        let cash_delta = (action === 'buy') ? -1 * total : total\n                        if (end_shares.hasOwnProperty(ticker)) {\n                            end_shares[ticker] += share_delta\n                        } else {\n                            end_shares[ticker] = share_delta\n                        }\n                        end_cash += cash_delta\n                    }\n                }\n                new_period['end_shares'] = end_shares\n                new_period['end_cash'] = end_cash\n                new_period['end_transfersinvalue'] = end_transfersinvalue\n\n                // determine period-end ticker value\n                let self = this\n                let end_tickervalue = 0, end_tickerdate\n                let this_quote_month\n                if (period_size === 'month') {\n                    this_quote_month = period\n                } else if (period_size === 'quarter') {\n                    this_quote_month = period * 3\n                } else if (period_size === 'year') {\n                    this_quote_month = 12\n                }\n                let this_quote_year = target_year\n                if (target_year === today_year && period === today_period) { // for a partial last period, use a previous month's quotes\n                    let quote_dates = []\n                    Object.entries(end_shares).forEach(function(position) {\n                        if (position[1] && self.props.all_monthly_quotes.hasOwnProperty(position[0])) {\n                            quote_dates.push(self.props.all_monthly_quotes[position[0]].monthly_dates_desc[0])\n                        }\n                    })\n                    let lastavailablequote_month_str, lastavailablequote_year_str\n                    [lastavailablequote_year_str, lastavailablequote_month_str] = quote_dates.sort().reverse()[0].split('-')\n                    let lastavailablequote_month = parseInt(lastavailablequote_month_str)\n                    let lastavailablequote_year = parseInt(lastavailablequote_year_str)\n                    if (lastavailablequote_month !== today_month || lastavailablequote_year !== today_year) { // allow the previous month's quotes only\n                        if (today_month === 1 && (lastavailablequote_month !== 12 || lastavailablequote_year !== today_year - 1)) {\n                            this_quote_month = 12\n                            this_quote_year = today_year - 1\n                        } else if (today_month !== 1 && (lastavailablequote_month !== today_month - 1 || lastavailablequote_year !== today_year)) {\n                            this_quote_month = today_month - 1\n                            this_quote_year = today_year\n                        }\n                    }\n                }\n                Object.entries(end_shares).forEach(function(position) {\n                    let month_end_quote = self.getMonthEndQuote(position[0], this_quote_year, this_quote_month)\n                    if (month_end_quote === null) {\n                        new_console_messages.push('ERROR: quote for symbol '+position[0]+' for month '+this_quote_year+'-'+this_quote_month+' is unavailable')\n                        end_tickervalue = 'err.'\n                        end_tickerdate = null\n                    } else {\n                        end_tickervalue += position[1] * month_end_quote.price\n                        if (typeof(end_tickerdate) !== 'string') {\n                            end_tickerdate = month_end_quote.date\n                        } else if (month_end_quote.date !== end_tickerdate) {\n                            new_console_messages.push('ERROR: quote dates for month '+this_quote_year+'-'+this_quote_month+' do not match for all symbols ('+end_tickerdate+' & '+month_end_quote.date+')')\n                        }\n                    }\n                })\n                new_period['end_tickervalue'] = end_tickervalue\n                new_period['end_tickerdate'] = end_tickerdate\n                \n                // determine period-end total value\n                let end_totalvalue\n                if (typeof(end_tickervalue) !== 'number' || typeof(end_cash) !== 'number') {\n                    end_totalvalue = 'err.'\n                } else {\n                    end_totalvalue = end_tickervalue + end_cash\n                }\n                new_period['end_totalvalue'] = end_totalvalue\n                new_period['end_tickervaluefraction'] = end_tickervalue / end_totalvalue\n                new_period['end_cashfraction'] = end_cash / end_totalvalue\n\n                // determine period-end baseline value\n                let end_baselineprice, end_baselinedate\n                let end_baselinequote = self.getMonthEndQuote('S&P500', this_quote_year, this_quote_month)\n                if (end_baselinequote === null) {\n                    new_console_messages.push('ERROR: quote for symbol S&P500 for month '+this_quote_year+'-'+this_quote_month+' is unavailable')\n                    end_baselineprice = 'err.'\n                    end_baselinedate = null\n                } else {\n                    end_baselineprice = end_baselinequote.price\n                    end_baselinedate = end_baselinequote.price\n                }\n                new_period['end_baselineprice'] = end_baselineprice\n                new_period['end_baselinedate'] = end_baselinedate\n\n                // determine period-over-period performance\n                // HPR (holding period return) = end / prev_end - 1\n                // HPR (HPR, adjusted for transfers) = end / (prev_end + transfersIN) - 1\n                // transfersIN, adjusted for middle-of-period transfers... aka Modified Dietz method)\n                //   transfersIN = transferINa * fraction of period duration) + (transferINb * fraction of period duration)\n                let adjusted_transfer_value = 0\n                let zb_start_month, zb_end_month, end_year\n                if (period_size === 'month') {\n                    zb_start_month = period - 1\n                    zb_end_month = (zb_start_month !== 11) ? zb_start_month + 1 : 1\n                    end_year = (zb_start_month !== 11) ? target_year : target_year + 1\n                } else if (period_size === 'quarter') {\n                    zb_start_month = period * 3 - 3\n                    zb_end_month = (period !== 4) ? zb_start_month + 3 : 1\n                    end_year = (period !== 4) ? target_year : target_year + 1\n                } else if (period_size === 'year') {\n                    zb_start_month = 0\n                    zb_end_month = 0\n                    end_year = target_year + 1\n                }\n                let period_start_date = new Date(target_year, zb_start_month, 1)\n                let period_end_date = new Date(end_year, zb_end_month, 1)\n                let period_days = Math.round((period_end_date - period_start_date) / (1000 * 60 * 60 * 24))\n                new_period.transactions_of_cash.forEach(function(transaction) {\n                    let transfer_month, transfer_day, fraction_of_period\n                    [transfer_month, transfer_day] = [parseInt(transaction.date.split('-')[1]), parseInt(transaction.date.split('-')[2])]\n                    let transfer_date = new Date(target_year, transfer_month - 1, transfer_day)\n                    if (transaction.action === 'transferIN') {\n                        fraction_of_period = (period_end_date - transfer_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value += transaction.total * fraction_of_period\n                    } else if (transaction.action === 'transferOUT') {\n                        fraction_of_period = (transfer_date - period_start_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value -= transaction.total * fraction_of_period\n                    }\n                })\n                let performance\n                if (typeof(start_totalvalue) !== 'number' || typeof(end_totalvalue) !== 'number') {\n                    performance = 'err.'\n                } else if (start_tickervalue === 0 && end_tickervalue === 0) {\n                    performance = 0\n                } else {\n                    performance = (end_totalvalue / (start_totalvalue + adjusted_transfer_value)) - 1\n                }\n                new_period['period_change_pct'] = performance\n\n                // determine period-over-period baseline performance\n                performance = 'n/a'\n                if (typeof(start_baselineprice) !== 'number' || typeof(end_baselineprice) !== 'number') {\n                    performance = 'err.'\n                } else if (p === 0) {\n                    performance = (end_baselineprice / start_baselineprice) - 1\n                } else {\n                    performance = (end_baselineprice / period_data[p-1].end_baselineprice) - 1\n                }\n                new_period['period_baseline_change_pct'] = performance\n\n                // store the data object\n                period_data.push(new_period)\n            }\n        }\n\n        if (new_console_messages.length) {\n            let message_summary = 'ERROR: quote(s) unavailable, see the \"Messages\" tab'\n            let new_console_message_set = this.props.create_console_message_set(message_summary)\n            new_console_message_set.messages = [...new_console_messages]\n            this.props.on_new_console_messages(new_console_message_set)\n        }\n\n        this.setState({ period_data: period_data })\n\n    }\n\n    getYear(date) {\n        return parseInt(date.split('-')[0])\n    }\n\n    getPeriod(period_size, date) {\n        let zb_month = parseInt(date.split('-')[1])-1\n\n        if (period_size === 'month') {\n            return zb_month + 1\n        } else if (period_size === 'quarter') {\n            return Math.floor(zb_month / 3) + 1\n        } else if (period_size === 'year') {\n            return 1\n        } else {\n            return 'n/a'\n        }\n    }\n\n    getMonth(date) {\n        return parseInt(date.split('-')[1])\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    formatCurrency(dollars) {\n        let prefix, retval = dollars\n        if (typeof(dollars) === 'number') {\n            let value = Math.round(dollars)\n            retval = this.numberWithCommas(Math.abs(value))\n            prefix = (value < 0 ) ? '-$' : '$'\n            retval = prefix + retval\n        } else {\n            retval = 'err.'\n        }\n        return retval\n    }\n\n    getDisplayedPerformance(period_data) {\n        let retval = {}\n        retval['key'] = period_data.sort_name\n        retval['display_value'] = 'err.'\n        retval['baseline_value'] = 'err.'\n        retval['index_value'] = period_data.period_baseline_change_pct\n        let my_perf = period_data.period_change_pct\n        if (my_perf === 'err.') {\n            retval['display_value'] = 'err.'\n        } else if (typeof(my_perf) === 'number') {\n            if (this.props.baseline === 'sp500_pct_gain') {\n                let baseline_perf = period_data.period_baseline_change_pct\n                if (typeof(baseline_perf) !== 'number') {\n                    return retval\n                } else {\n                    retval['display_value'] = my_perf - baseline_perf\n                    retval['baseline_value'] = baseline_perf\n                }\n            } else {\n                retval['display_value'] = my_perf\n                retval['baseline_value'] = 0\n            }\n        }\n        return retval\n    }\n\n    getMonthEndQuote(ticker, year, month) {\n        let monthly_dates = this.props.all_monthly_quotes[ticker].monthly_dates_desc\n        let monthly_prices = this.props.all_monthly_quotes[ticker].monthly_prices\n        let period_idx = monthly_dates.findIndex( date => this.getYear(date) === year && this.getMonth(date) === month )\n        let retval = {}\n        if (period_idx !== -1) {\n            retval['date'] = monthly_dates[period_idx]\n            retval['price'] = monthly_prices[period_idx]\n        } else {\n            retval = null\n        }\n        return retval\n    }\n\n    styleCell(performance_obj) {\n        let displayed, baseline, index\n        [displayed, baseline, index] = [performance_obj.display_value, performance_obj.baseline_value, performance_obj.index_value]\n        let classes = 'performance-cell'\n        if ( this.props.baseline === 'sp500_pct_gain') {\n            if (displayed > 0) {\n                classes += ' text-green'\n            } else if (displayed < 0) {\n                classes += ' text-red'\n            }\n        } else {\n            if ( displayed < baseline || displayed < 0 ) {\n                classes += ' text-red'\n            } else if (displayed > index && displayed > 0) {\n                classes += ' text-green'\n            }\n        }\n        return classes\n    }\n\n    formatPerformance(performance) {\n        if (performance === 'err.' || performance === 'ref.') {\n            return performance\n        } else if (typeof(performance) !== 'number') {\n            return '-'\n        } else {\n            return (Math.round(performance * 100 * 10) / 10).toFixed(1) + '%'\n        }\n    }\n\n    formatIndexPerformance(performance) {\n        if ( this.props.baseline === 'sp500_pct_gain') {\n            return this.formatPerformance('ref.')\n        } else {\n            return this.formatPerformance(performance)\n        }\n    }\n\n    formatWholePercentage(percentage) {\n        if (percentage === 'err.') {\n            return 'err.'\n        } else if (typeof(percentage) !== 'number' || isNaN(percentage)) {\n            return '?'\n        } else {\n            return (Math.round(percentage * 100)) + '%'\n        }\n    }\n\n    onToggleSortOrder(num_periods) {\n        let el = document.getElementById('my-performance-periods')\n        let period_width = Math.floor(el.scrollWidth / num_periods)\n        let leftmost_zbperiod_shown = Math.floor(el.scrollLeft / period_width)\n        let new_scroll_left = (num_periods - leftmost_zbperiod_shown - 1) * period_width\n        el.scrollLeft = new_scroll_left\n        this.setState(prevState => {\n            let new_sort_dir = (prevState.data_sort_dir === 'asc') ? 'desc' : 'asc'\n            return { \n                data_sort_dir: new_sort_dir \n            }\n        })\n    }\n\n    handlePeriodChange(event) {\n        let newPeriod = event.target.id.replace(/select-/g, '')\n        this.setState({ period_size: newPeriod })\n        this.generatePeriodData(newPeriod)\n    }\n\n    render() {\n        let self = this\n        let displayed_performance = {}\n        this.state.period_data.forEach(function(qdata) {\n            displayed_performance[qdata.sort_name] = self.getDisplayedPerformance(qdata)\n        })\n        let sorted_data = this.state.period_data.sort( function(a,b) {\n            if (a.sort_name < b.sort_name) {\n                return (self.state.data_sort_dir === 'asc') ? -1 : 1\n            } else if (a.sort_name > b.sort_name) {\n                return (self.state.data_sort_dir === 'asc') ? 1 : -1\n            } else {\n                return 0\n            }\n        })\n        return (\n            <div id=\"my-performance-wrapper\">\n                <div id=\"my-performance-body\">\n                    <div id=\"my-performance-rowlabels\">\n                        <div id=\"my-performance-controls\">\n                            <ul id=\"periodsize-selector\">\n                                <li id=\"select-year\" className={\"strong selector\" + (this.state.period_size === \"year\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Y</li>\n                                <li id=\"select-quarter\" className={\"strong selector\" + (this.state.period_size === \"quarter\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Q</li>\n                                <li id=\"select-month\" className={\"strong selector\" + (this.state.period_size === \"month\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>M</li>\n                            </ul>\n                            <div id=\"sortorder-button\">\n                                <button onClick={ (e)=>this.onToggleSortOrder(sorted_data.length) } className=\"strong\">&#x21c6;</button>\n                            </div>\n                        </div>\n                        <p className=\"strong\">stocks:</p>\n                        <p className=\"strong\">cash:</p>\n                        <p className=\"strong\">transfers in:</p>\n                        <p className=\"strong\">total:</p>\n                        <p className=\"strong\">my perf{ (this.props.baseline === 'sp500_pct_gain') ? ' delta' : '' }:</p>\n                        <p className=\"strong\">S&amp;P500:</p>\n                    </div>\n                    <div id=\"my-performance-periods\">\n                        { sorted_data.map( qdata => (\n                        <div className=\"period-data\" key={qdata.sort_name}>\n                            <p className=\"strong\">{qdata.display_name}</p>\n                            <p>{this.formatCurrency(qdata.end_tickervalue)} ({this.formatWholePercentage(qdata.end_tickervaluefraction)})</p>\n                            <p>{this.formatCurrency(qdata.end_cash)} ({this.formatWholePercentage(qdata.end_cashfraction)})</p>\n                            <p>{this.formatCurrency(qdata.end_transfersinvalue)}</p>\n                            <p className=\"strong\">{this.formatCurrency(qdata.end_totalvalue)}</p>\n                            <p className={ this.styleCell(displayed_performance[qdata.sort_name]) }>{ this.formatPerformance(displayed_performance[qdata.sort_name].display_value) }</p>\n                            <p>{ this.formatIndexPerformance(displayed_performance[qdata.sort_name].index_value) }</p>\n                        </div>\n                        ))}\n                    </div>\n                </div>\n                <div id=\"my-performance-footer\">\n                </div>\n\n            </div>\n        )\n    }\n}\n\nMyPerformance.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_positions: PropTypes.object.isRequired,\n    all_monthly_quotes: PropTypes.object.isRequired,\n    baseline: PropTypes.string.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class Console extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.getClasses = this.getClasses.bind(this)\n    }\n\n    getClasses(message) {\n        let classes = 'message'\n        if (message.toLowerCase().includes('error')) {\n            classes += ' warning'\n        }\n        return classes\n    }\n\n    render() {\n        let message_sets = this.props.all_console_messages\n        return (\n            <div id=\"console-messages-wrapper\">\n                { message_sets.length ? 'History:' : '' }\n                <div id=\"console-messages\">\n                { message_sets && message_sets.map( message_set => (\n                    message_set.messages.map( (message, j) => (\n                            <p key={j} className={this.getClasses(message)}>{message}</p>\n                    ))\n                ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nConsole.propTypes = {\n    all_console_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_holdings',\n            balance_target_column: 'current_value',\n            sell_all_of: ['sell_none'],\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    componentDidMount() {\n        let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column))\n        this.setState({ balanceable_value: new_balanceable_value })\n\n        const stored_balance_target_set = JSON.parse(localStorage.getItem(\"balance_target_set\"))\n        if (stored_balance_target_set !== null) {\n            this.setState({ balance_target_set: stored_balance_target_set })\n        }\n\n        const stored_balance_target_column = JSON.parse(localStorage.getItem(\"balance_target_column\"))\n        if (stored_balance_target_column !== null) {\n            this.setState({ balance_target_column: stored_balance_target_column })\n        }\n\n        const stored_cash_remaining = JSON.parse(localStorage.getItem(\"cash_remaining\"))\n        if (stored_cash_remaining !== null) {\n            this.setState({ cash_remaining: stored_cash_remaining })\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value, selectedOptions } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(value, this.state.sell_all_of, this.state.balance_target_column))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balance_target_column') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.sell_all_of, value))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.,]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        if (name !== 'sell_all_of') {\n            this.setState({ [name]: value })\n        } else {\n            let multiple_tickers = Array.from(selectedOptions, (item) => item.value)\n            if (multiple_tickers.includes('sell_none')) {\n                multiple_tickers = ['sell_none']\n            }\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, value, this.state.balance_target_column))\n            this.setState({ \n                sell_all_of: multiple_tickers,\n                balanceable_value: new_balanceable_value\n            })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'include') ? parseInt(user_remaining_cash) : null\n        this.props.on_whatif_submit(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, remaining_cash)\n    }\n\n    isDisabled() {\n\n        if (this.state.cash_treatment === 'include' && !this.state.cash_valid) {\n            return true\n        } else if (this.state.balance_target_set === 'my_holdings') {\n            return (this.props.show_current_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        let excludable_tickers = []\n        if (this.state.balance_target_set === \"my_holdings\") {\n            excludable_tickers = Object.keys(this.props.all_positions).filter( ticker => ticker !== 'cash' && this.props.all_positions[ticker].current_shares)\n        } else if (this.props.all_tags.hasOwnProperty(this.state.balance_target_set)) {\n            excludable_tickers = this.props.all_tags[this.state.balance_target_set].filter( ticker => this.props.all_positions[ticker] && this.props.all_positions[ticker].current_shares)\n        }\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div id=\"operation\">Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_holdings\">my holdings ({Object.keys(this.props.all_positions).filter(position => position !== 'cash').length})</option>\n                            <option value=\"untagged\">untagged tickers ({this.props.all_tags.untagged.length})</option>\n                            {Object.entries(this.props.all_tags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag} ({this.props.all_tags[tag].length})</option>\n                            )}\n                        </select>\n                        &nbsp;into&nbsp; \n                        <select name=\"balance_target_column\" value={this.state.balance_target_column} onChange={this.handleChange}>\n                            <option value=\"current_value\">equal values</option>\n                            <option value=\"value_at_risk\">equal values, risk adjusted</option>\n                            <option value=\"basis\">equal bases</option>\n                            <option value=\"basis_risked\">equal bases, risk adjusted</option>\n                            <option value=\"only_profits\">only profits remaining</option>\n                        </select>\n                        , but sell all of&nbsp;\n                        <select name=\"sell_all_of\" value={this.state.sell_all_of} multiple={true} onChange={this.handleChange}>\n                            <option value=\"sell_none\">(none. keep all.)</option>\n                            {excludable_tickers.sort().map(ticker => \n                                <option key={ticker} value={ticker}> {ticker} </option>\n                            )}\n                        </select>\n                        &nbsp;...\n                    </div>\n                    <div id=\"cash-treatment\">\n                        <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                        <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                        <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining} placeholder=\"$0\"></input>cash remaining (max: ${this.numberWithCommas(this.state.balanceable_value)})</label>\n                    </div>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_current_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { TickerAdd } from './TickerAdd'\nimport { TagAdd } from './TagAdd'\nimport { TransactionAdd } from './TransactionAdd'\nimport { TransactionsList } from './TransactionsList'\nimport { TagDelete } from './TagDelete'\nimport { MyPerformance } from './MyPerformance'\nimport { Console } from './Console'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | my-performance | what-ifs | console\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    componentDidMount() {\n        const stored_which_inputs = JSON.parse(localStorage.getItem(\"which_inputs\"))\n        if (stored_which_inputs !== null) {\n            this.setState({ which_inputs: stored_which_inputs })\n        }\n    }\n\n    onWhichInputs(new_which_inputs) {\n        localStorage.setItem('which_inputs', JSON.stringify(new_which_inputs))\n        if (this.state.which_inputs !== new_which_inputs) {\n            this.props.clear_last_console_message()\n        }\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"my-performance\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('my-performance')}>Performance</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"console\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('console')}>Messages</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <TickerAdd\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <TagAdd\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        <TagDelete\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <div className=\"content-wrapper\">\n                            <div className=\"content-half\">\n                                <TransactionAdd\n                                    all_stocks={this.props.all_stocks}\n                                    all_tags={this.props.all_tags}\n                                    on_new_transaction={this.props.on_new_transaction}\n                                    on_new_cash={this.props.on_new_cash}\n                                    create_console_message_set={this.props.create_console_message_set}\n                                    on_new_console_messages={this.props.on_new_console_messages}\n                                />\n                            </div>\n                            <div className=\"content-half\">\n                                <TransactionsList\n                                    all_transactions={this.props.all_transactions}\n                                    all_risk={this.props.all_risk}\n                                    on_delete_transaction={this.props.on_delete_transaction}\n                                    on_import_transactions={this.props.on_import_transactions}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_current_holdings={this.props.show_current_holdings}\n                            show_previous_holdings={this.props.show_previous_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'my-performance' && (\n                        <React.Fragment>\n                        <MyPerformance\n                            all_transactions={this.props.all_transactions}\n                            all_positions={this.props.all_positions}\n                            all_monthly_quotes={this.props.all_monthly_quotes}\n                            baseline={this.props.baseline}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'console' && (\n                        <React.Fragment>\n                        <Console\n                            all_console_messages={this.props.all_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object,\n    all_monthly_quotes: PropTypes.object,\n    all_positions: PropTypes.object,\n    all_transactions: PropTypes.array,\n    all_risk: PropTypes.object,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    baseline: PropTypes.string,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    all_console_messages: PropTypes.array.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func,\n    clear_last_console_message: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string',\n        category: 'always'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2,\n    //     category: 'performance'\n    // },\n    {\n        name: 'quote_date',\n        display_name: 'Price Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis',\n        display_name: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'profit',\n        display_name: 'Profit',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'risk_factor_modified',\n        display_name: 'Risk Factor Edited Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'risk_factor',\n        display_name: 'Risk Factor (default=0.20)',\n        type: 'number',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    {\n        name: 'value_at_risk',\n        display_name: 'Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_value_at_risk',\n        display_name: 'What-If Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis_risked',\n        display_name: 'Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis_risked',\n        display_name: 'What-If Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'start_date',\n        display_name: 'Holding Started Date',\n        type: 'string',\n        category: 'holdings'\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: [],\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n            allConsoleMessages: [],\n            last_console_message: '',\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_holdings',\n            balance_target_column: '',\n            sell_all_of: [],\n            remaining_cash: null,\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            show_current_holdings: true,\n            show_previous_holdings: false,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            show_only_achieved_performance: false,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getTransactionById = this.getTransactionById.bind(this)\n        this.getTransactionsByTicker = this.getTransactionsByTicker.bind(this)\n        this.getPositionFromSingleTickerTransactions = this.getPositionFromSingleTickerTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.createConsoleMessageSet = this.createConsoleMessageSet.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onImportTransactions = this.onImportTransactions.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.onDeleteTransaction = this.onDeleteTransaction.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewConsoleMessages = this.onNewConsoleMessages.bind(this)\n        this.clearLastConsoleMessage = this.clearLastConsoleMessage.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.getMaxBalanceableValue = this.getMaxBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getCurrentHoldings = this.getCurrentHoldings.bind(this)\n        this.getPreviousHoldings = this.getPreviousHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.getTickersFromSet = this.getTickersFromSet.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        // 1. load all locally-stored data\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        let allTags = {}\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n            allTags = JSON.parse(JSON.stringify(stored_allTags))\n        }\n\n        let allTransactions = []\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n            allTransactions = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        const stored_allRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (stored_allRisk !== null) {\n            this.setState({ allRisk: stored_allRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['show_current_holdings', 'show_previous_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates', 'show_only_achieved_performance']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n\n        // 2. calculate historical performance data for each added ticker\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        let indexed_risk_data = {}\n        if (stored_allRisk !== null) {\n            indexed_risk_data = JSON.parse(JSON.stringify(stored_allRisk))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'].toUpperCase())\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'].toUpperCase())\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeriesDesc = Object.entries(indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series'])\n                .sort(function(a,b) {\n                    if(a[0] < b[0]) {\n                        return 1\n                    } else if (a[0] > b[0]) {\n                        return -1\n                    } else {\n                        return 0\n                    }\n                })\n                let monthly_prices = Object.entries(quoteTimeSeriesDesc).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n\n        // 3. calculate position data (from transactions) for all holdings\n\n        let all_stocks = []\n        allTransactions.forEach(function(transaction) {\n            if (!all_stocks.includes(transaction.ticker)) {\n                all_stocks.push(transaction.ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_risk_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        all_stocks = all_stocks.filter(ticker => ticker !== 'cash')\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n        let cash_delta_from_stock_transactions = 0\n\n        all_stocks.forEach(function(ticker) {\n\n            // create a stock position if any transactions exist\n            allTransactions.forEach(function(transaction) {\n                if (!newPositions.hasOwnProperty(transaction.ticker) && transaction.ticker !== 'cash') {\n                    let newPosition = {}\n                    let ticker = transaction.ticker\n                    newPosition = self.getPositionFromSingleTickerTransactions(allTransactions.filter(transaction => transaction.ticker === ticker))\n                    newPosition['symbol'] = ticker\n                    newPositions[ticker] = newPosition\n                    if (transaction.action === 'buy') {\n                        cash_delta_from_stock_transactions -= transaction.total\n                    } else {\n                        cash_delta_from_stock_transactions += transaction.total\n                    }\n                }\n            })\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuote['quote_date'] = quoteResult['07. latest trading day']\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeriesDesc = Object.entries(indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series'])\n                    .sort(function(a,b) {\n                        if(a[0] < b[0]) {\n                            return 1\n                        } else if (a[0] > b[0]) {\n                            return -1\n                        } else {\n                            return 0\n                        }\n                    })\n                newMonthlyQuote['symbol'] = ticker\n\n                let monthly_prices = []\n                let monthly_dates = []\n                quoteTimeSeriesDesc.forEach(function(price) {\n                    monthly_prices.push(parseFloat(price[1]['5. adjusted close']))\n                    monthly_dates.push(price[0])\n                })\n                newMonthlyQuote['monthly_prices'] = monthly_prices\n                newMonthlyQuote['monthly_dates_desc'] = monthly_dates\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            if (indexed_risk_data.hasOwnProperty(ticker)) {\n                newRisk[ticker] = JSON.parse(JSON.stringify(indexed_risk_data[ticker]))\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        let cash_transactions = allTransactions.filter(transaction => transaction.ticker === 'cash')\n        if (cash_transactions.length || cash_delta_from_stock_transactions !== 0) {\n            let newPosition = {}\n            newPosition = this.getPositionFromCashTransactions(cash_transactions)\n            newPosition['symbol'] = 'cash'\n            if (cash_delta_from_stock_transactions) {\n                newPosition['basis'] += cash_delta_from_stock_transactions\n                newPosition['current_shares'] += cash_delta_from_stock_transactions\n            }\n            newPositions['cash'] = newPosition\n        }\n\n        // 5. handle aggregates\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(allTags, newPositions, newCurrentQuotes, stored_controls['show_current_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(allTags, newPerformanceNumbers)))\n\n\n        // 6. update the app's state with all of the above changes\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getTransactionById(transaction_id) {\n        return this.state.allTransactions.filter(transaction => transaction.modified_at === transaction_id)[0]\n    }\n\n    getTransactionsByTicker(ticker) {\n        return this.state.allTransactions.filter(transaction => transaction.ticker === ticker)\n    }\n\n    getPositionFromSingleTickerTransactions(transactions) { // assumes the transactions are all from a single ticker\n        let inflows = 0, outflows = 0, current_shares = 0, date, action, num_shares, ticker, value\n        let sorted_transactions = transactions.sort(function(a,b) {\n            if (a.date > b.date) {\n                return -1\n            } else if (a.date < b.date) {\n                return -1\n            } else {\n                return 0\n            }\n        })\n        let position_start_date = '1970/01/01'\n        sorted_transactions.forEach(function(transaction) {\n            [date, action, num_shares, ticker, value] = transaction.summary.split(' ')\n            date = date.substr(0, date.length-1)\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (current_shares === 0) {\n                position_start_date = date\n            }\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n            if (current_shares === 0) {\n                position_start_date = 'n/a'\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            start_date: position_start_date,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [, action, value] = cash_transaction.summary.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'transferIN' || action === 'dividend') {\n                total += cash_amount\n            } else if (action === 'transferOUT' || action === 'fee') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_current_holdings, show_cash) {\n\n        let holdings = (show_current_holdings === null) ? this.state.show_current_holdings : show_current_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = all_quotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short = all_performance_numbers[ticker]['short_change_pct']\n            let medium = all_performance_numbers[ticker]['medium_change_pct']\n            let long = all_performance_numbers[ticker]['long_change_pct']\n\n            aggr_performance_by_tag['_everything_'].short_change_pct += short\n            aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n            aggr_performance_by_tag['_everything_'].long_change_pct += long\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    aggr_performance_by_tag[tag].short_change_pct += short\n                    aggr_performance_by_tag[tag].medium_change_pct += medium\n                    aggr_performance_by_tag[tag].long_change_pct += long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_current_holdings = (name === 'show_current_holdings') ? new_value : this.state.show_current_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_current_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            column_names.forEach(function(column_name) {\n                if (!new_shown_column_names.includes(column_name)) {\n                    new_shown_column_names.push(column_name)\n                }\n            })\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    createConsoleMessageSet(new_message) {\n        let new_console_message_set = {\n            modified_at: new Date().getTime(),\n            summary: new_message,\n            messages: [new_message]\n        }\n        return new_console_message_set\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.ticker !== delete_ticker)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Ticker \"' + delete_ticker + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let date, action, num_shares, ticker, total\n        [date, action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: ticker,\n                action: action,\n                shares: num_shares,\n                total: total,\n                summary: new_transaction_summary\n            }\n            newAllTransactions.push(new_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let orig_start_date, orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_start_date = newAllPositions[ticker]['start_date']\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let new_current_shares = (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares\n            let new_start_date\n            if (orig_start_date === undefined) {\n                new_start_date = date\n            } else {\n                new_start_date = (new Date(date) < new Date(orig_start_date)) ? date : orig_start_date\n            }\n            let updatedPosition = {\n                current_shares: new_current_shares,\n                start_date: (new_current_shares) ? new_start_date : 'n/a',\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the cash position numbers\n            orig_current_shares = (newAllPositions.hasOwnProperty('cash')) ? newAllPositions['cash'].current_shares : 0\n            new_current_shares = (action === 'buy') ? orig_current_shares - total : orig_current_shares + total\n            let updatedCashPosition = {\n                current_shares: new_current_shares,\n                symbol: 'cash',\n                basis: new_current_shares,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedCashPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onImportTransactions(file_contents) {\n\n        let imported_tickers = []\n\n        let imported_transactions = JSON.parse(JSON.stringify(file_contents.transactions))\n        imported_transactions.forEach( transaction => imported_tickers.push(transaction.ticker) )\n\n        let imported_risk = JSON.parse(JSON.stringify(file_contents.risk))\n        Object.keys(imported_risk).forEach( ticker => imported_tickers.push(ticker))\n\n        let all_stocks_of_interest = Array.from(new Set(imported_tickers))\n        this.setState(prevState => {\n\n            // update the \"untagged\" tag so that all added tickers belong to a tag\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let already_added = []\n            Object.keys(newAllTags).forEach(function(tag) {\n                newAllTags[tag].forEach(function(ticker) {\n                    if (!already_added.includes(ticker)) {\n                        already_added.push(ticker)\n                    }\n                })\n            })\n            all_stocks_of_interest.forEach( function(ticker) {\n                if (!already_added.includes(ticker) && ticker !== 'cash') {\n                    newAllTags['untagged'].push(ticker)\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // replace the stored transactions\n            localStorage.setItem('allTransactions', JSON.stringify(imported_transactions))\n\n            // replace the stored risk\n            localStorage.setItem('allRisk', JSON.stringify(imported_risk))\n\n            return\n        })\n\n        window.location.reload(false)\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let date, action, total\n        [date, action, total]  = new_cash_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: 'cash',\n                action: action,\n                shares: total,\n                total: total,\n                summary: new_cash_transaction_summary\n            }\n            newAllTransactions.push(new_cash_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'dividend' || action === 'transferIN') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTransaction(delete_transaction_id) {\n\n        let transaction_to_delete = this.getTransactionById(delete_transaction_id)\n        let ticker = transaction_to_delete.ticker\n\n        this.setState(prevState => {\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.modified_at !== delete_transaction_id)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Transaction \"' + transaction_to_delete.summary + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the position numbers\n            let remainingTransactionsForTicker = newAllTransactions.filter(transaction => transaction.ticker === ticker)\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let updatedPosition\n            if (!remainingTransactionsForTicker.length) {\n                delete newAllPositions[ticker]\n            } else {\n                if (ticker === 'cash') {\n                    updatedPosition = this.getPositionFromCashTransactions(remainingTransactionsForTicker)\n                } else {\n                    updatedPosition = this.getPositionFromSingleTickerTransactions(remainingTransactionsForTicker)\n                }\n                newAllPositions[ticker] = updatedPosition\n            }\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n\n            return { \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Tag \"' + delete_tag + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(row_name) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== row_name\n                && row_name !== this.props.editing_row\n                && !this.nameIsAnAggregate(row_name)\n                && !this.nameIsSpecial(row_name)\n            ) {\n                return { editing_row: row_name }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n                newAllRisk[ticker]['modified_at'] = new Date().getTime()\n            } else {\n                let newRisk = { \n                    modified_at: new Date().getTime(),\n                    factor: parseFloat(new_value) \n                }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewConsoleMessages(new_console_message_set) {\n        this.setState(prevState => {\n            let newAllConsoleMessages = JSON.parse(JSON.stringify(prevState.allConsoleMessages))\n            newAllConsoleMessages.push(new_console_message_set)\n            return { \n                last_console_message: new_console_message_set.summary,\n                allConsoleMessages: newAllConsoleMessages }\n        })\n    }\n\n    clearLastConsoleMessage() {\n        this.setState({ last_console_message: ' ' })\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getMaxBalanceableValue(target_set, sell_all_set, target_column) {\n        let include_cash = true\n        return this.getBalanceableValue(target_set, sell_all_set, target_column, include_cash)\n    }\n\n    getBalanceableValue(target_set, sell_all_set, target_column, include_cash) {\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_value = 0\n        if (include_cash && this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_value = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_value\n\n        let target_tickers = this.getTickersFromSet(target_set)\n        if ( (target_set === 'my_holdings' && this.state.show_current_holdings)\n            || (target_set === 'untagged' && this.state.show_untagged) \n            || (target_set !== 'my_holdings' && target_set !== 'untagged') ) {\n            target_tickers.forEach( function(ticker) {\n                let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (target_column === 'current_value' || target_column === 'value_at_risk' || target_column === 'only_profits') {\n                    balanceable_value += current_value\n                } else if (target_column === 'basis' || target_column === 'basis_risked') {\n                    if (sell_all_set.includes(ticker)) {\n                        balanceable_value += current_value\n                    } else {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                }\n            })\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(target_set, sell_all_of, target_column, remaining_cash) {\n        this.setState({ \n            remaining_cash: remaining_cash, \n            balance_target_set: target_set, \n            sell_all_of: sell_all_of,\n            balance_target_column: target_column \n            })\n        let column = target_column\n        let show_whatif_columns = ['current_shares', 'whatif_current_shares']\n        if (target_column === 'only_profits') {\n            column = 'basis'\n        }\n        show_whatif_columns.push(column)\n        show_whatif_columns.push('whatif_'+column)\n        if (target_column === 'only_profits') {\n            show_whatif_columns.push('profit')\n        }\n        if (target_column.includes('risk')) {\n            show_whatif_columns.push('risk_factor')\n        }\n        this.showColumns(show_whatif_columns)\n        this.onWhatifGo(target_set, sell_all_of, target_column, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(target_set, sell_all_set, target_column, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && (remaining_cash !== null || target_column === 'only_profits')\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_amount_to_balance = this.getBalanceableValue(target_set, sell_all_set, target_column, adjusting_cash)\n        if (adjusting_cash) {\n            total_amount_to_balance -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let target_tickers = this.getTickersFromSet(target_set)\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balance_target_column: target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        let risk_factors = {}\n        target_tickers.forEach(function(ticker) {\n            if (self.state.allRisk.hasOwnProperty(ticker)){\n                risk_factors[ticker] = self.state.allRisk[ticker].factor\n            } else {\n                risk_factors[ticker] = 0.20\n            }\n        })\n        let target = total_amount_to_balance / target_tickers.filter(ticker => !sell_all_set.includes(ticker)).length\n        target_tickers.forEach(function(ticker) {\n\n            let whatif_currentshares, whatif_balancedvalue\n            \n            new_whatif.values[ticker] = {}\n\n            let value_delta = 0\n            let original_currentvalue = self.getCurrentValue(ticker)\n            let original_basis = self.getBasis(ticker)\n\n            if (target_column === 'current_value' || target_column === 'basis' || target_column === 'only_profits') {\n                if (sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['current_shares'] = 0\n                    new_whatif.values[ticker]['basis'] = 0\n                    new_whatif.values[ticker]['basis_risked'] = 0\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 0\n                    if (adjusting_cash) {\n                        actual_remaining_cash += original_currentvalue \n                    }\n                    return\n                }\n            }\n\n            // balancing by value is a simple average of current values\n            if (target_column === 'current_value') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                let whatif_basis = original_basis + value_delta\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_basis\n                new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (target_column === 'basis') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_balancedbasis < 0) {\n                    whatif_balancedbasis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n\n                value_delta = whatif_balancedbasis - original_basis\n                new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n\n            } else if (target_column === 'only_profits') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let original_currentvalue = original_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                let target_delta_shares\n                let losing = (original_basis > original_currentvalue) ? true : false\n                if (losing) {\n                    whatif_currentshares = 0\n                } else {\n                    let target_delta = original_basis\n                    target_delta_shares = -1 * Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    whatif_currentshares = original_currentshares + target_delta_shares\n                }\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                if (losing || sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['basis'] = 'n/a'\n                    new_whatif.values[ticker]['basis_risked'] = 'n/a'\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 'n/a'\n                    value_delta = -1 * original_currentvalue\n                } else {\n                    let whatif_basis = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    let whatif_currentvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    value_delta = whatif_currentvalue - original_currentvalue\n                    new_whatif.values[ticker]['current_value'] = whatif_currentvalue\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_currentvalue * risk_factors[ticker]\n                }\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n        // The above applies to risk-balancing VALUE. This results in each position currently\n        // having the same dollar value at risk right now. Similarly, in order to risk-balance \n        // by BASIS, the same formula may be used except with Btot (total basis) in the numerator.\n        // This results in each position having the same amount of sunk investment dollars at risk,\n        // it is unaffected by each position's current stock price.\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (target_column === 'value_at_risk' || target_column === 'basis_risked') {\n\n            let target_nonzero_tickers = target_tickers.filter(ticker => !sell_all_set.includes(ticker))\n            \n            // determine the numerator\n            let numerator_product = 1\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= risk_factors[ticker]\n                }\n            })\n            let numerator = total_amount_to_balance * numerator_product\n\n            // determine the denominator\n            let denominator_terms = Array(target_nonzero_tickers.length).fill(1)\n            target_nonzero_tickers.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * risk_factors[ticker]\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue, 0 )\n\n            // determine the target value for each ticker; each will be different if their risk factors are different\n            let nonzero_targets = Array(target_nonzero_tickers.length).fill(0)\n            nonzero_targets[0] = numerator / denominator\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    nonzero_targets[idx] = Math.round(nonzero_targets[0] * risk_factors[target_nonzero_tickers[0]] / risk_factors[ticker])\n                }\n            })\n            let targets = Array(target_tickers.length).fill(0)\n            target_nonzero_tickers.forEach(function (nonzero_ticker, nonzero_i) {\n                let i = target_tickers.indexOf(nonzero_ticker)\n                targets[i] = nonzero_targets[nonzero_i]\n            })\n\n            // for each ticker, use its target to derive the other metrics\n            target_tickers.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                let original_currentvalue = self.getCurrentValue(ticker)\n                let original_basis = self.getBasis(ticker)\n                let value_delta, target = targets[idx]\n\n                // for values, \"target\" is the target market value for this position\n                if (target_column === 'value_at_risk') {\n\n                    let whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                    value_delta = whatif_balancedvalue - original_currentvalue\n                    let whatif_basis = original_basis + value_delta\n                    if (whatif_basis < 0) {\n                        whatif_basis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n                // for bases, \"target\" is the target basis for this position\n                } else if (target_column === 'basis_risked') {\n\n                    let original_currentshares = self.getCurrentShares(ticker)\n                    let target_delta = target - original_basis\n                    let target_delta_shares\n                    if (target === 0) {\n                        new_whatif.values[ticker]['current_shares'] = 0\n                        new_whatif.values[ticker]['basis'] = 0\n                        new_whatif.values[ticker]['basis_risked'] = 0\n                        new_whatif.values[ticker]['current_value'] = 0\n                        new_whatif.values[ticker]['value_at_risk'] = 0\n                        value_delta = -1 * original_currentvalue\n                    } else {\n                        if (target_delta >= 0) {\n                            target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        } else {\n                            target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        }\n                        let whatif_currentshares = original_currentshares + target_delta_shares\n                        new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                        let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                        if (whatif_balancedbasis < 0) {\n                            whatif_balancedbasis = 0\n                        }\n                        new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                        new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n        \n                        value_delta = whatif_balancedbasis - original_basis\n                        new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n        \n                        new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n                    }\n                }\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['value_at_risk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balance_target_column: new_whatif.balance_target_column })\n    }\n\n    getCurrentHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] !== 0).map(holding => holding[0])\n    }\n\n    getPreviousHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] === 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    getTickersFromSet(set) {\n        let tickers = []\n        if (set === 'my_holdings') {\n            tickers = [...this.getCurrentHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (set === 'untagged') {\n            tickers = [...this.getUntagged()]\n        } else {\n            tickers = this.state.allTags[set]\n        }\n        return tickers\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'quote_date', 'volume', 'dollar_volume']\n        let holdings_columns = ['start_date', 'current_shares', 'current_value', 'percent_value', 'value_at_risk', 'basis', 'basis_risked', 'realized_gains', 'percent_basis', 'profit', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'profit' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if ( (sort_column === 'profit' || sort_column === 'percent_profit') && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(a)) {\n                            value_a = self.state.allPositions[a]['basis'] * self.state.allRisk[a]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'profit' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if ( (sort_column === 'profit' || sort_column === 'percent_profit') && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(b)) {\n                            value_b = self.state.allPositions[b]['basis'] * self.state.allRisk[b]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sort_column === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : (a === 'cash') ? 0 : 0.20\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : (b === 'cash') ? 0 : 0.20\n\n            } else if (sort_column === 'risk_factor_modified') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].modified_at : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].modified_at : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_current_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getCurrentHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_previous_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getPreviousHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['start_date'] = self.state.allPositions[ticker].start_date\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['start_date'] = 'n/a'\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['start_date'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        let all_categories = ['always', 'stock-specific', 'holdings', 'performance']\n        let all_columns_by_category = {}\n        all_categories.forEach(function(category_name) {\n            let this_category_columns = JSON.parse(JSON.stringify(all_columns_namesorted)).filter(column => column.category === category_name)\n            all_columns_by_category[category_name] = this_category_columns\n        })\n\n        const row_popover = (\n            <Popover id=\"row-popover\">\n                <Popover.Title as=\"h3\">Included Rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show current holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_current_holdings\" name=\"show_current_holdings\" type=\"checkbox\" checked={this.state.show_current_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_current_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show previous holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_previous_holdings\" name=\"show_previous_holdings\" type=\"checkbox\" checked={this.state.show_previous_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_previous_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"column-popover\">\n                <Popover.Title as=\"h3\">Included Columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {Object.keys(all_columns_by_category).filter(key => key !== 'always').map(key => (\n                        <div key={key} id=\"column-category\">\n                            <div className=\"strong\">{key}</div>\n                            <ul>\n                                {all_columns_by_category[key].map(column => (\n                                    <li key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name)} className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</li>\n                                ))}\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n\n        const general_settings_popover = (\n            <Popover id=\"general-settings-popover\">\n                <Popover.Title as=\"h3\">General Settings:</Popover.Title>\n                <Popover.Content>\n                <div id=\"general-settings-control\">\n                    <div id=\"baseline-control\">\n                        <label htmlFor=\"baseline\">performance baseline:</label>\n                        <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                            <option value=\"zero_pct_gain\">0% gain</option>\n                            <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                        </select>\n                    </div>\n                    <div id=\"performance_controls\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show performance only if achieved:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"show_only_achieved_performance\" name=\"show_only_achieved_performance\" type=\"checkbox\" checked={this.state.show_only_achieved_performance} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"show_only_achieved_performance\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const GeneralSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={general_settings_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; General</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate, highlight_column}) => (\n            <GridHeaderRow\n                highlight_column={highlight_column}\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                quote_date={row_data.quote_date}\n                volume={row_data.volume}\n                basis={row_data.basis}\n                start_date={row_data.start_date}\n                current_shares={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                  || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                  ? row_data.current_shares \n                                  : 'n/a'}\n                current_value={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                 || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                 ? row_data.current_value \n                                 : 'n/a'}\n                realized_gains={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                  || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                  ? row_data.realized_gains \n                                  : 'n/a'}\n                risk_factor={row_data.risk_factor}\n                risk_factor_modified={row_data.risk_factor_modified}\n                performance_numbers={row_data.performance_numbers}\n                show_only_achieved_performance={this.state.show_only_achieved_performance}\n                baseline={row_data.baseline}\n                style_realized_performance={row_data.style_realized_performance}\n                total_value={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                               || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                               ? row_data.total_value \n                               : 'n/a'}\n                total_basis={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                               || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                               ? row_data.total_basis \n                               : 'n/a'}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                on_escape_key={this.onEscapeKey}\n            />\n        )\n\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = self.state.allCurrentQuotes[ticker].current_price\n            new_row['change_pct'] = self.state.allCurrentQuotes[ticker].change_pct\n            new_row['quote_date'] = (ticker !== 'cash' && !self.getIndicies().includes(ticker)) ? self.state.allCurrentQuotes[ticker].quote_date : 'n/a'\n            new_row['volume'] = self.state.allCurrentQuotes[ticker].volume\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['start_date'] = row_data[ticker]['start_date']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].factor : null\n            new_row['risk_factor_modified'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].modified_at : null\n            new_row['performance_numbers'] = self.state.allPerformanceNumbers[ticker]\n            new_row['baseline'] = self.state.baseline\n            new_row['style_realized_performance'] = (Object.entries(self.state.allPositions).filter(position => position[0] !== 'cash' && position[1].current_shares).length) ? true : false\n            new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n            new_row['total_basis'] = self.state.aggrBasis['_everything_']\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['quote_date'] = 'n/a'\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['start_date'] = aggr_row_data[aggr_ticker]['start_date']\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['risk_factor_modified'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['style_realized_performance'] = false\n                new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n                new_row['total_basis'] = self.state.aggrBasis['_everything_']\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n        let all_ticker_rows = all_row_data.filter(row_data => !row_data.is_aggregate)\n        let all_aggregate_rows = all_row_data.filter(row_data => row_data.is_aggregate)\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"left-side\">\n                        <div id=\"input-controls\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                all_current_quotes={this.state.allCurrentQuotes}\n                                all_monthly_quotes={this.state.allMonthlyQuotes}\n                                all_positions={this.state.allPositions}\n                                all_transactions={this.state.allTransactions}\n                                all_risk={this.state.allRisk}\n                                show_current_holdings={this.state.show_current_holdings}\n                                show_previous_holdings={this.state.show_previous_holdings}\n                                show_tagged={this.state.show_tagged}\n                                show_untagged={this.state.show_untagged}\n                                show_cash={this.state.show_cash}\n                                baseline={this.state.baseline.name}\n                                get_balanceable_value={this.getMaxBalanceableValue}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_delete_transaction={this.onDeleteTransaction}\n                                on_new_transaction={this.onNewTransaction}\n                                on_import_transactions={this.onImportTransactions}\n                                on_new_cash={this.onNewCash}\n                                create_console_message_set={this.createConsoleMessageSet}\n                                clear_last_console_message={this.clearLastConsoleMessage}\n                                all_console_messages={this.state.allConsoleMessages}\n                                on_new_console_messages={this.onNewConsoleMessages}\n                                on_whatif_submit={this.onWhatifSubmit}\n                            />\n                        </div>\n                        <div id=\"last-console-message\">\n                            {this.state.last_console_message && this.state.last_console_message.length ? (\n                            <div className={ (this.state.last_console_message.includes('ERROR')) ? 'warning' : ''}>{this.state.last_console_message}</div>\n                            ) : null }\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"page-settings\">\n                            <GeneralSettings />\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={this.state.balance_target_column} />\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        {this.state.done && all_ticker_rows.length ? (\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={this.state.aggrTotalValue['_everything_']}\n                            total_basis={this.state.aggrBasis['_everything_']}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                        ) : (\n                            <tr>\n                                <td className=\"no_table_data\" colSpan={this.state.shown_columns.length+1}>No stocks have been added yet. Please add them using the form on the \"Tickers\" tab.</td>\n                            </tr>\n                        ) }\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow is_aggregate={true} highlight_column={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_aggregate_rows.filter(row => row.name !== 'untagged').length ? all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            )) : (\n                                <tr>\n                                    <td className=\"no_table_data\" colSpan={this.state.shown_columns.length+1}>No tags exist yet. Please create them using the form on the \"Tags\" tab.</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}