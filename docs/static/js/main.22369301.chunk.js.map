{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/TickerAdd.js","components/TagAdd.js","components/TransactionAdd.js","components/TransactionsList.js","components/TagDelete.js","components/MyPerformance.js","components/Console.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","highlight_column","map","i","key","String","fromCharCode","className","onClick","e","undefined","React","Component","EditNumericCell","state","user_value","user_value_is_valid","handleEscapeKey","handleChange","handleSubmit","isNaN","original_value","setState","elem","focus","document","addEventListener","removeEventListener","event","keyCode","on_escape_key","target","value","length","preventDefault","on_new_value","onSubmit","ref","type","id","onChange","size","disabled","GridRow","hovering_symbol","hovering_risk_factor","user_risk_factor","user_risk_factor_valid","formatDate","onWhatifCellClick","toggleHoverSymbol","toggleHoverRiskFactor","populateMemberButton","populateDeleteButton","populateEditButton","editRiskFactor","onNewValue","populateCellValue","numberWithCommas","daysAgo","isQuoteFromToday","flagQuoteError","flagQuoteErrorOnPositionCell","epoch","d","Date","month","getMonth","day","getDate","year","getFullYear","join","symbol","is_aggr","row_name","on_remove_from_tag","special_classes","includes","membership_set","on_delete_tags","current_shares","on_delete_ticker","editing_row","on_edit_cell","change_pct","performance","performance_numbers","baseline","short_change_pct","style_realized_performance","start_date","show_only_achieved_performance","medium_change_pct","long_change_pct","new_value","on_modify_risk_factor","current_edit_value","num_decimals","baseline_value","prefix","suffix","adjust_decimal","performance_value","quote_date","total_value","total_basis","current_price","current_value","risk_factor","visible_risk_factor","percent_value","percent_basis","profit","percent_profit","value_at_risk","basis","basis_risked","realized_gains","whatif","risk_factor_modified","parseInt","volume","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","date_str","now","then","days_ago","quote_date_str","error_if_not_todays_quote","row_classes","special_class","member_count","sort","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","short_perf","total_performance","medium_perf","long_perf","styleTotalsCell","populateTotalsCellValue","TickerAdd","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","validateTickers","user_tag","user_tickers","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_messages","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","summary","num_errors","filter","message","tag_status_str","new_console_message_set","create_console_message_set","messages","on_new_tickers","on_new_console_messages","onReset","placeholder","required","tag_name","TagAdd","user_tags_string","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","TransactionAdd","transaction_date","transaction","user_cash_action","user_cash_amount","validateTransaction","handleCashChange","handleCashReset","handleActionChange","handleCashSubmit","getCashOperationPlaceholder","new_message","user_date","user_cash_operation","terms","cash_amount","parseFloat","valid_transaction_summary","on_new_cash","user_transaction","summary_message","action","num_shares","total","on_new_transaction","TransactionsList","exportRef","createRef","importRef","data_sort_dir","filter_str","file","onToggleSortOrder","onExportButton","onHiddenImportChange","prevState","exported_json","transactions","JSON","parse","stringify","all_transactions","risk","all_risk","data","encodeURIComponent","a","createElement","href","download","innerHTML","current","appendChild","click","remove","files","reader","FileReader","readAsText","onload","evt","file_contents","result","on_import_transactions","ordered_filtered_transactions","b","accept","style","width","visibility","modified_at","on_delete_transaction","TagDelete","delete_tag_list","isDisabled","selectedOptions","multiple_tags","item","user_tag_list","multiple","MyPerformance","period_size","period_data","generatePeriodData","formatCurrency","getDisplayedPerformance","getMonthEndQuote","getYear","getPeriod","formatPerformance","formatIndexPerformance","formatWholePercentage","handlePeriodChange","stored_data_sort_dir","localStorage","getItem","stored_period_size","sorted_transactions","date","new_console_messages","quote_errors","first_period","first_year","first_month","floor","today_period","periods_of_performance","start_baselinequote","start_baselineprice","prev_quote_month","prev_quote_year","today","today_year","today_month","price","adjusted_close","start_shares","start_tickervalue","start_totalvalue","p","period","new_period","prev_shares","prev_cash","end_transfersinvalue","end_tickervalue","end_totalvalue","assign","end_shares","end_cash","period_sort_suffix","period_display_suffix","slice","toLocaleString","target_year","period_transactions","t","shares","cash_delta","share_delta","end_tickerdate","this_quote_month","this_quote_year","lastavailablequote_month_str","lastavailablequote_year_str","all_month_end_dates","lastavailablequote_month","lastavailablequote_year","entries","position","month_end_quote","end_baselineprice","end_baselinedate","end_baselinequote","adjusted_transfer_value","zb_start_month","zb_end_month","end_year","period_start_date","period_end_date","period_days","transactions_of_cash","fraction_of_period","transfer_date","message_summary","quote_error_count","quote_tickers_count","zb_month","dollars","retval","sort_name","period_baseline_change_pct","my_perf","period_change_pct","baseline_name","baseline_perf","monthly_quotes","all_monthly_quotes","monthly_dates","period_idx","findIndex","performance_obj","displayed","index","display_value","index_value","percentage","num_periods","el","getElementById","period_width","scrollWidth","new_scroll_left","scrollLeft","new_sort_dir","setItem","newPeriod","displayed_performance","qdata","sorted_data","end_tickervaluefraction","end_cashfraction","Console","expanded_message_sets","getClasses","getMessageSetClasses","formatTimestamp","onToggleExpandMessageSet","message_set_count","tzoffset","getTimezoneOffset","iso","toISOString","match","identifier","new_expanded_message_sets","ordered_message_sets","PopulateMessageSet","message_set","timestamp","count","message_sets","all_console_messages","WhatIf","balanceable_value","balance_target_set","balance_target_column","sell_all_of","cash_treatment","cash_remaining","cash_valid","new_balanceable_value","get_balanceable_value","stored_balance_target_set","stored_balance_target_column","stored_cash_remaining","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","multiple_tickers","user_remaining_cash","remaining_cash","on_whatif_submit","show_current_holdings","show_untagged","show_tagged","excludable_tickers","all_positions","untagged","entry","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","stored_which_inputs","new_which_inputs","clear_last_console_message","Fragment","all_current_quotes","show_previous_holdings","category","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthEndDates","allMonthlyQuotes","allPositions","allTransactions","allTags","allPerformanceNumbers","allRisk","allWhatifs","allConsoleMessages","last_console_message","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getTransactionById","getTransactionsByTicker","getPositionFromSingleTickerTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","showColumns","createConsoleMessageSet","onToggleShowColumn","onNewTransaction","onImportTransactions","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTags","onDeleteTransaction","onEditCell","onModifyRiskFactor","onEscapeKey","onNewConsoleMessages","clearLastConsoleMessage","currentQuoteExists","getClosingPrice","getMostRecentClosingPrice","getCurrentValue","getCurrentShares","getBasis","getBalanceableValue","getMaxBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getCurrentHoldings","getPreviousHoldings","getAdded","getTagged","getUntagged","getTickersFromSet","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_allRisk","stored_controls","control","stored_control","init_shown_columns","stored_shown_columns","stored_baseline","short_pct_gain","medium_pct_gain","long_pct_gain","indexed_risk_data","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeriesDesc","monthly_prices","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthEndDates","newMonthlyQuotes","newPerformanceNumbers","newRisk","cash_delta_from_stock_transactions","newPosition","newCurrentQuote","quoteResult","newTickerQuotes","full_date","newQuote","target_month","substr","found_idx","element","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","ticker_short_ago","ticker_medium_ago","ticker_long_ago","reverse","change","cash_transactions","aggr_position_info","aggr_performance","transaction_id","inflows","outflows","position_start_date","cash_transaction","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_price","ticker_total_value","ticker_realized_gains","ticker_shares","quote_exists","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","column_names","new_shown_column_names","new_shown_columns","splice","idx","getTime","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newAllConsoleMessages","new_transaction_summary","new_transaction","orig_start_date","orig_basis","orig_current_shares","orig_realized_gains","new_start_date","new_current_shares","updatedPosition","updatedCashPosition","imported_tickers","imported_transactions","imported_risk","already_added","window","location","reload","new_cash_transaction_summary","new_cash_transaction","new_cash","delete_transaction_id","transaction_to_delete","remainingTransactionsForTicker","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","delete_tags","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","factor","target_set","sell_all_set","target_column","include_cash","current_cash_value","target_tickers","show_whatif_columns","adjusting_cash","original_cash_position","total_amount_to_balance","new_whatif","actual_remaining_cash","risk_factors","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","whatif_basis","target_delta_shares","original_currentshares","target_delta","ceil","whatif_balancedbasis","losing","whatif_currentvalue","target_nonzero_tickers","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","currentValue","nonzero_targets","targets","nonzero_ticker","nonzero_i","holding","added_tickers","set","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","all_columns_by_category","category_name","this_category_columns","aggr_total_value","aggr_basis","row_popover","Popover","Title","as","Content","column_popover","general_settings_popover","PopulateHeaderRow","symbol_count","PopulateRow","a_quote_is_old","error_performance_numbers","all_row_data","performance_numbers_exist","new_row","all_ticker_rows","all_aggregate_rows","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","colSpan","row","ReactDOM","render"],"mappings":"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","file":"static/js/main.22369301.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            <tr>\n            {this.props.highlight_column !== null && all_columns.map( (column,i) => (\n                <th\n                key={ column.name }\n                >\n                    { (column.name === this.props.highlight_column) \n                    ? 'BEFORE BALANCING' \n                    : (column.name === 'whatif_' + this.props.highlight_column) \n                        ? 'AFTER BALANCING' \n                        : String.fromCharCode(160) }\n                </th>\n            ))}\n            {this.props.highlight_column === null && all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))}\n            </tr>\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    highlight_column: PropTypes.string,\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class EditNumericCell extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_value: '',\n            user_value_is_valid: false\n        }\n        this.handleEscapeKey = this.handleEscapeKey.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (isNaN(this.props.original_value)) {\n            this.setState({ user_value: '' }) \n        } else {\n            this.setState({ user_value: this.props.original_value })\n        }\n        this.elem.focus()\n        document.addEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    handleEscapeKey(event) {\n        if (event.keyCode === 27) {\n            this.props.on_escape_key()\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'user_value') {\n            if (value.length && !isNaN(value) && value > 0) {\n                this.setState({ user_value: value, user_value_is_valid: true })\n            } else {\n                this.setState({ user_value: value, user_value_is_valid: false })\n            }\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.props.on_new_value(this.state.user_value)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input ref={(elem) => {this.elem = elem}} type=\"text\" id=\"edit-cell\" name=\"user_value\" value={this.state.user_value} onChange={this.handleChange} size=\"5\" />\n                <button type=\"submit\" disabled={!this.state.user_value_is_valid}>S</button>\n            </form>\n        )\n    }\n}\n\nEditNumericCell.propTypes = {\n    original_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_new_value: PropTypes.func.isRequired,\n    on_escape_key: PropTypes.func.isRequired\n}\n\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hovering_symbol: false,\n            hovering_risk_factor: false,\n            user_risk_factor: '',\n            user_risk_factor_valid: false\n        }\n        this.formatDate = this.formatDate.bind(this)\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHoverSymbol = this.toggleHoverSymbol.bind(this)\n        this.toggleHoverRiskFactor = this.toggleHoverRiskFactor.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateEditButton = this.populateEditButton.bind(this)\n        this.editRiskFactor = this.editRiskFactor.bind(this)\n        this.onNewValue = this.onNewValue.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n        this.isQuoteFromToday = this.isQuoteFromToday.bind(this)\n        this.flagQuoteError = this.flagQuoteError.bind(this)\n        this.flagQuoteErrorOnPositionCell = this.flagQuoteErrorOnPositionCell.bind(this)\n    }\n\n    formatDate(epoch) {\n        var d = new Date(epoch),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHoverSymbol() {\n        this.setState({ hovering_symbol: !this.state.hovering_symbol })\n    }\n\n    toggleHoverRiskFactor() {\n        this.setState({ hovering_risk_factor: !this.state.hovering_risk_factor })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hovering_symbol) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tags(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    populateEditButton(column_name, row_name) {\n        let classes = 'edit'\n        if (this.state.hovering_risk_factor) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'risk_factor'\n            && row_name !== this.props.editing_row\n            && row_name !== 'cash'\n            && !this.props.is_aggregate \n            && !this.props.special_classes.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    editRiskFactor(row_name) {\n        this.props.on_edit_cell(row_name)\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n\n        // hovering\n        if ( this.state.hovering_symbol\n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( this.state.hovering_risk_factor\n            && column_name === 'risk_factor' \n            && !special_classes.includes('index') \n            && !this.props.is_aggregate\n            && row_name !== 'cash' ) {\n            classes += ' hovering'\n        }\n\n        // whatif\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n\n        // italics\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (!this.flagQuoteError()) {\n                    if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                        classes += ' text-red'\n                    }\n                    if (this.props.style_realized_performance\n                        && row_name !== 'cash' \n                        && !special_classes.includes('index')) {\n                            if (isNaN(current_shares) \n                                || !current_shares \n                                || this.daysAgo(this.props.start_date) < 180\n                                ){\n                                classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            case 'medium_change_pct':\n                if (!this.flagQuoteError()) {\n                    if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                        classes += ' text-red'\n                    }\n                    if (this.props.style_realized_performance\n                        && row_name !== 'cash' \n                        && !special_classes.includes('index')) {\n                            if (isNaN(current_shares) \n                                || !current_shares \n                                || this.daysAgo(this.props.start_date) < 365\n                                ){\n                                classes += (this.props.show_only_achieved_performance) ? ' hide' :  ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            case 'long_change_pct':\n                if (!this.flagQuoteError()) {\n                    if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                        classes += ' text-red'\n                    }\n                    if (this.props.style_realized_performance\n                        && row_name !== 'cash' \n                        && !special_classes.includes('index')) {\n                            if (isNaN(current_shares) \n                                || !current_shares \n                                || this.daysAgo(this.props.start_date) < 730\n                                ){\n                                classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    onNewValue(new_value) {\n        this.props.on_modify_risk_factor(this.props.row_name, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n\n        if ( column.name === 'risk_factor'\n            && this.props.row_name === this.props.editing_row ) {\n            return (\n                <EditNumericCell \n                    original_value={this.props.current_edit_value} \n                    on_new_value={this.onNewValue} \n                    on_escape_key={this.props.on_escape_key}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const quote_date = this.props.quote_date\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 0.20\n        let visible_risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 'n/a'\n        if (this.props.row_name === 'cash') {\n            risk_factor = 0\n            visible_risk_factor = 0\n        }\n        let value_at_risk = current_value * risk_factor\n        let basis = this.props.basis\n        let basis_risked = basis * risk_factor\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, profit, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate profit and percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            profit = 'n/a'\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                profit = 'n/a'\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                profit = current_value - basis\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                profit = current_value - basis\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                profit = 0\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'start_date':\n                value = this.props.start_date\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'quote_date':\n                if (!this.props.is_aggregate) {\n                    value = quote_date\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'current_value':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (!this.flagQuoteErrorOnPositionCell()) {\n                        value = current_value\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_current_value':\n                if (!this.flagQuoteErrorOnPositionCell()) {\n                    if (whatif === null) {\n                        value = 'n/a'\n                    } else if (this.props.whatif_format === 'deltas') {\n                        value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                    } else {\n                        value = whatif.current_value\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'percent_value':\n                if (current_value === 'err.') {\n                    value = 'err.'\n                } else if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (!this.flagQuoteErrorOnPositionCell()) {\n                        value = percent_value\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'basis':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    value = basis\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'basis_risked':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (this.props.current_value === 0) {\n                        value = 'n/a'\n                    } else {\n                        value = basis_risked\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_basis_risked':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis_risked - ((basis_risked === 'n/a') ? 0 : basis_risked)\n                } else {\n                    value = whatif.basis_risked\n                }\n                break\n            case 'percent_basis':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    value = percent_basis\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'profit':\n                if (this.props.current_value === 0) {\n                    value = 'n/a'\n                } else if (!this.flagQuoteErrorOnPositionCell()) {\n                    value = profit\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'percent_profit':\n                if (this.props.current_value === 0) {\n                    value = 'n/a'\n                } else if (!this.flagQuoteErrorOnPositionCell()) {\n                    value = percent_profit\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'risk_factor':\n                value = visible_risk_factor\n                break\n            case 'risk_factor_modified':\n                if (this.props.risk_factor_modified !== null) {\n                    value = this.formatDate(parseInt(this.props.risk_factor_modified))\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'value_at_risk':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (this.props.current_value === 0) {\n                        value = 'n/a'\n                    } else if (!this.flagQuoteErrorOnPositionCell()) {\n                        value = value_at_risk\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_value_at_risk':\n                if (!this.flagQuoteErrorOnPositionCell()) {\n                    if (whatif === null) {\n                        value = 'n/a'\n                    } else if (this.props.whatif_format === 'deltas') {\n                        value = whatif.value_at_risk - ((value_at_risk === 'n/a') ? 0 : value_at_risk)\n                    } else {\n                        value = whatif.value_at_risk\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'volume':\n                if (!this.flagQuoteError()) {\n                    value = this.props.volume\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'dollar_volume':\n                if (!this.flagQuoteError()) {\n                    if (this.props.volume === 'err.') {\n                        value = 'err.'\n                    } else {\n                        value = this.props.current_price * this.props.volume\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'short_change_pct':\n                if (!this.flagQuoteError()) {\n                    value = this.props.performance_numbers.short_change_pct\n                    performance_value = true\n                    baseline_value = this.props.baseline.short_change_pct\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'medium_change_pct':\n                if (!this.flagQuoteError()) {\n                    value = this.props.performance_numbers.medium_change_pct\n                    performance_value = true\n                    baseline_value = this.props.baseline.medium_change_pct\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'long_change_pct':\n                if (!this.flagQuoteError()) {\n                    value = this.props.performance_numbers.long_change_pct\n                    performance_value = true\n                    baseline_value = this.props.baseline.long_change_pct\n                } else {\n                    value = 'err.'\n                }\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'profit': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === 'err.') {\n            return 'err.'\n        } else if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    if (this.props.row_name === 'S&P500') {\n                        return 'ref.'\n                    } else {\n                        value = value - baseline_value\n                    }\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let days_ago = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return days_ago\n        }\n    }\n\n    isQuoteFromToday(quote_date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let quote_date = new Date(quote_date_str)\n        let days_ago = (now - quote_date) / 1000 / 60 / 60 / 24\n        if (-1 <= days_ago && days_ago <= 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // certain columns' cells can print an error if the quote is out of date\n    flagQuoteError() {\n        if (this.props.error_if_not_todays_quote && !this.isQuoteFromToday(this.props.quote_date)) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // certain POSITION columns' cells may print share-count-based \"n/a\" values before a quote out-of-date error applies\n    flagQuoteErrorOnPositionCell() {\n        if (this.props.is_aggregate) {\n            if (this.props.current_value !== 0 && this.props.error_if_not_todays_quote && !this.isQuoteFromToday(this.props.quote_date)) {\n                return true\n            }\n        } else {\n            if (typeof this.props.current_shares === 'number' && this.props.current_shares !== 0 && this.props.error_if_not_todays_quote && !this.isQuoteFromToday(this.props.quote_date)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.sort().map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHoverSymbol} onMouseLeave={self.toggleHoverSymbol}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name === 'risk_factor') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (e)=>self.editRiskFactor(self.props.row_name) } onMouseEnter={self.toggleHoverRiskFactor} onMouseLeave={self.toggleHoverRiskFactor}>{ self.populateCellValue(column) }{ self.populateEditButton(column.name, self.props.row_name) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    start_date: PropTypes.string,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    quote_date: PropTypes.string,\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor_modified: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    error_if_not_todays_quote: PropTypes.bool,\n    show_only_achieved_performance: PropTypes.bool,\n    baseline: PropTypes.object,\n    style_realized_performance: PropTypes.bool,\n    total_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    total_basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tags: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    on_escape_key: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const short_perf = this.props.total_performance.short_change_pct\n        const medium_perf = this.props.total_performance.medium_change_pct\n        const long_perf = this.props.total_performance.long_change_pct\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = (total_value !== 'err.') ? '$' + numberWithCommas(Math.round(total_value)) : 'err.'\n                    break\n                case 'percent_value':\n                    value = (total_value !== 'err.') ? '100%' : 'err.'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'err.'\n                    break\n                case 'short_change_pct':\n                    if (short_perf !== 'err.') {\n                        value = (Math.round(10 * short_perf) / 10).toFixed(1) + '%'\n                    } else {\n                        value = 'err.'\n                    }\n                    break\n                case 'medium_change_pct':\n                    if (medium_perf !== 'err.') {\n                        value = (Math.round(10 * medium_perf) / 10).toFixed(1) + '%'\n                    } else {\n                        value = 'err.'\n                    }\n                    break\n                case 'long_change_pct':\n                    if (long_perf !== 'err.') {\n                        value = (Math.round(10 * long_perf) / 10).toFixed(1) + '%'\n                    } else {\n                        value = 'err.'\n                    }\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TickerAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        let num_errors = new_messages.filter(message => message.includes('ERROR')).length\n        let summary\n        let tag_status_str = (tag !== 'untagged') ? ' to tag \"' + tag + '\"' : ''\n        if (new_messages.length === 1) {\n            summary = new_messages[0]\n        } else if (num_errors === 0) {\n            summary = 'Added ' + tickers.length + ' tickers' + tag_status_str + '.'\n        } else {\n            summary = 'ERROR: ' + num_errors + ' of ' + tickers.length + ' tickers could not be added' + tag_status_str + '.'\n        }\n        let new_console_message_set = this.props.create_console_message_set(summary)\n        if (new_messages.length > 1) {\n            new_console_message_set.messages = [...new_messages]\n        }\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_console_messages(new_console_message_set)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTickerAdd.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TagAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = [], new_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        let num_errors = new_messages.filter(message => message.includes('ERROR')).length\n        let summary\n        if (new_messages.length === 1) {\n            summary = new_messages[0]\n        } else if (num_errors === 0) {\n            summary = 'Created ' + tags.length + ' tags.'\n        } else {\n            summary = 'ERROR: ' + num_errors + ' of ' + tags.length + ' tags could not be created.'\n        }\n        let new_console_message_set = this.props.create_console_message_set(summary)\n        if (new_messages.length > 1) {\n            new_console_message_set.messages = [...new_messages]\n        }\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_console_messages(new_console_message_set)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTagAdd.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction_date: '',\n            transaction: '',\n            user_cash_action: 'dividend',\n            user_cash_amount: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleCashReset = this.handleCashReset.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleCashSubmit = this.handleCashSubmit.bind(this)\n        this.getCashOperationPlaceholder = this.getCashOperationPlaceholder.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_cash_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleCashReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleCashSubmit(event) {\n        event.preventDefault()\n        let new_message = null\n        let user_cash_action = this.state.user_cash_action\n        let user_date = this.state.transaction_date\n\n        let user_cash_operation = this.state.user_cash_amount\n        let terms = user_cash_operation.split(' ')\n        let user_cash_amount\n\n        if (this.state.user_cash_action === 'dividend') {\n            if (terms.length === 3 && terms[1].toLowerCase() === 'on' && terms[2].replace(/\\W/g,'').length) {\n                user_cash_amount = terms[0]\n            } else {\n                new_message = 'ERROR: Dividend syntax must be in the form: \"$200 on MSFT\"'\n            }\n        } else {\n            user_cash_amount = user_cash_operation\n        }\n\n        if (new_message === null) {\n            let cash_amount = parseFloat(user_cash_amount.trim().replace(/\\$/g, \"\"))\n            if (isNaN(cash_amount)) {\n                new_message = 'ERROR: Cash amount \"' + cash_amount + '\" is not in currency format.'\n            } else {\n                let total = parseFloat((Math.round(cash_amount * 100) / 100).toFixed(2));\n                let valid_transaction_summary = user_date + ': ' + user_cash_action + ' $' + total.toFixed(2) + ' cash'\n                if (this.state.user_cash_action === 'dividend') {\n                    valid_transaction_summary += ' on ' + terms[2].toUpperCase()\n                }\n                new_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                this.props.on_new_cash(valid_transaction_summary)\n                this.handleCashReset()\n            }\n        }\n        let new_console_message_set = this.props.create_console_message_set(new_message)\n        this.props.on_new_console_messages(new_console_message_set)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_messages = [], summary_message\n\n        if (transaction.length < 4) {\n\n            summary_message = 'ERROR: Transaction \"' + transaction + '\" must be 4 terms.'\n            new_messages.push(summary_message)\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction_summary = this.state.transaction_date + ': ' + action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                summary_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                new_messages.push(summary_message)\n                this.props.on_new_transaction(valid_transaction_summary)\n\n            } else {\n                transaction[2] = transaction[2].toUpperCase()\n                transaction[3] = '$' + transaction[3]\n                summary_message = 'ERROR: Transaction \"' + transaction.join(' ') + '\" could not be recorded'\n            }\n        }\n\n        // send all of the messages to print\n        let new_console_message_set = this.props.create_console_message_set(summary_message)\n        new_console_message_set.messages = [...new_messages]\n        this.props.on_new_console_messages(new_console_message_set)\n    }\n\n    getCashOperationPlaceholder() {\n        if (this.state.user_cash_action === 'dividend') {\n            return \"$85.00 on MSFT\"\n        } else if (this.state.user_cash_action === 'fee') {\n            return \"$15\"\n        } else {\n            return \"$1000\"\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form>\n                    <label>Transaction Date:</label>\n                    <input name=\"transaction_date\" value={this.state.transaction_date} onChange={this.handleChange} type=\"date\" size=\"10\" />\n                </form>\n                <form onSubmit={this.handleSubmit}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"25\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction==='' || this.state.transaction_date===''} />\n                    </section>\n                </form>\n                <form onSubmit={this.handleCashSubmit}>\n                    <label>Cash&nbsp;\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"dividend\">dividend</option>\n                            <option value=\"fee\">fee</option>\n                            <option value=\"transferIN\">transfer IN</option>\n                            <option value=\"transferOUT\">transfer OUT</option>\n                        </select>:\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"20\" placeholder={this.getCashOperationPlaceholder()} required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount==='' || this.state.transaction_date===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTransactionAdd.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionsList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.exportRef = React.createRef()\n        this.importRef = React.createRef()\n        this.state = {\n            data_sort_dir: 'desc',\n            filter_str: '',\n            file: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.onToggleSortOrder = this.onToggleSortOrder.bind(this)\n        this.onExportButton = this.onExportButton.bind(this)\n        this.onHiddenImportChange = this.onHiddenImportChange.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    onToggleSortOrder() {\n        this.setState(prevState => {\n            let new_sort_dir = (prevState.data_sort_dir === 'asc') ? 'desc' : 'asc'\n            return { \n                data_sort_dir: new_sort_dir \n            }\n        })\n    }\n        \n    onExportButton() {\n\n        // prepare the data\n        let exported_json = {\n            transactions: JSON.parse(JSON.stringify(this.props.all_transactions)),\n            risk: JSON.parse(JSON.stringify(this.props.all_risk))\n        }\n        var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exported_json));\n\n        // create the download link\n        var a = document.createElement('a')\n        a.href = 'data:' + data\n        a.download = 'transactions.json'\n        a.innerHTML = 'download'\n\n        // attach the download link, trigger it, and then remove it from the DOM\n        var container = this.exportRef.current\n        container.appendChild(a)\n        a.click()\n        a.remove()\n    }\n\n    onHiddenImportChange(files) {\n        if (files[0]) {\n            let self = this\n            let reader = new FileReader();\n            reader.readAsText(files[0], \"UTF-8\");\n            reader.onload = function (evt) {\n                let file_contents = JSON.parse(evt.target.result)\n                self.props.on_import_transactions(file_contents)\n            }\n        }\n    }\n\n    render() {\n\n        let all_transactions = this.props.all_transactions\n        let self = this\n        let ordered_filtered_transactions = all_transactions\n            .filter( transaction => transaction.summary.toLowerCase().includes(this.state.filter_str.toLowerCase()) )\n            .sort( function(a,b) {\n                if (a.summary < b.summary) {\n                    return (self.state.data_sort_dir === 'asc') ? -1 : 1\n                } else if (a.summary > b.summary) {\n                    return (self.state.data_sort_dir === 'asc') ? 1 : -1\n                } else {\n                    return 0\n                }\n            })\n        return (\n            <section id=\"transaction-list\">\n                <section id=\"transaction-list-controls\">\n                    <form>\n                        <button onClick={ (e)=>this.onToggleSortOrder() } className=\"strong\">&#x21c5;</button>\n\n                        <label>Filter:</label>\n                        <input name=\"filter_str\" value={this.state.filter_str} onChange={this.handleChange} size=\"15\" />\n\n                        <button className=\"btn btn-sm btn-primary\" onClick={this.onExportButton} disabled={!this.props.all_transactions.length}>export</button>\n                        <div ref={this.exportRef}></div>\n\n                        <label className=\"btn btn-sm btn-primary\">\n                        <input type=\"file\" ref={this.importRef} onChange={ (e) => this.onHiddenImportChange(e.target.files) } accept=\"application/json\" style={{width: 0, visibility: \"hidden\"}} />\n                        import\n                        </label>\n                    </form>\n                </section>\n                <section id=\"transactions\">\n                    {ordered_filtered_transactions.map( transaction => (\n                        <p key={transaction.modified_at} className=\"transaction\" onClick={ (e)=>this.props.on_delete_transaction(transaction.modified_at)}>{transaction.summary}</p>\n                    ))}\n                </section>\n            </section>\n        )\n    }\n}\n\nTransactionsList.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_risk: PropTypes.object.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TagDelete extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag_list: ['untagged'],\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n    }\n\n    handleTagChange(event) {\n        let {selectedOptions } = event.target\n\n        let multiple_tags = Array.from(selectedOptions, (item) => item.value)\n        if (multiple_tags.includes('untagged')) {\n            multiple_tags = ['untagged']\n        }\n\n        this.setState({ delete_tag_list: multiple_tags })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        let user_tag_list = this.state.delete_tag_list\n        this.props.on_delete_tags(user_tag_list)\n\n        this.setState({ delete_tag_list: ['untagged'] })\n    }\n\n    isDisabled() {\n        if (this.state.delete_tag_list.length === 1 && this.state.delete_tag_list.includes('untagged')) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <div id=\"operation\">\n                        Delete Tag:\n                        <select value={this.state.delete_tag_list} multiple={true} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag(s)\" disabled={this.isDisabled()} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTagDelete.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tags: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class MyPerformance extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            period_size: 'month',\n            period_data: [],\n            data_sort_dir: 'asc',\n        }\n        this.generatePeriodData = this.generatePeriodData.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.formatCurrency = this.formatCurrency.bind(this)\n        this.getDisplayedPerformance = this.getDisplayedPerformance.bind(this)\n        this.getMonthEndQuote = this.getMonthEndQuote.bind(this)\n        this.getYear = this.getYear.bind(this)\n        this.getPeriod = this.getPeriod.bind(this)\n        this.getMonth = this.getMonth.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.formatPerformance = this.formatPerformance.bind(this)\n        this.formatIndexPerformance = this.formatIndexPerformance.bind(this)\n        this.formatWholePercentage = this.formatWholePercentage.bind(this)\n        this.onToggleSortOrder = this.onToggleSortOrder.bind(this)\n        this.handlePeriodChange = this.handlePeriodChange.bind(this)\n    }\n\n    componentDidMount() {\n\n        let data_sort_dir = 'asc', period_size ='month'\n\n        const stored_data_sort_dir = JSON.parse(localStorage.getItem(\"data_sort_dir\"))\n        if (stored_data_sort_dir !== null) {\n            data_sort_dir = stored_data_sort_dir\n        }\n\n        const stored_period_size = JSON.parse(localStorage.getItem(\"period_size\"))\n        if (stored_period_size !== null) {\n            period_size = stored_period_size\n        }\n\n        this.generatePeriodData(period_size)\n\n        this.setState({ data_sort_dir: data_sort_dir,\n                        period_size: period_size })\n\n    }\n\n    generatePeriodData(period_size) {\n\n        let sorted_transactions = this.props.all_transactions.sort(function(a, b) {\n            if (a.date < b.date) {\n                return -1\n            } else if (a.date > b.date) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        \n        let period_data = [], new_console_messages = [], quote_errors = []\n\n        if (sorted_transactions.length) {\n\n            // the performance start period includes the earliest added transaction\n            let first_year = parseInt(sorted_transactions[0].date.split('-')[0])\n            let first_month = parseInt(sorted_transactions[0].date.split('-')[1])\n            let first_period\n            if (period_size === 'month') {\n                first_period = first_month\n            } else if (period_size === 'quarter') {\n                first_period = Math.floor((first_month - 1) / 3 + 1)\n            } else if (period_size === 'year') {\n                first_period = 1\n            }\n\n            // the performance end period includes the current date\n            let today = new Date()\n            let today_year = today.getFullYear()\n            let today_month = today.getMonth() + 1\n            let today_period\n            if (period_size === 'month') {\n                today_period = today_month\n            } else if (period_size === 'quarter') {\n                today_period = Math.round(today.getMonth() / 3)\n            } else if (period_size === 'year') {\n                today_period = 1\n            }\n\n            // calculate the number of periods to display\n            let periods_of_performance\n            if (period_size === 'month') {\n                periods_of_performance = (today_year - first_year) * 12 + (today_period - first_period) + 1\n            } else if (period_size === 'quarter') {\n                periods_of_performance = (today_year - first_year) * 4 + (today_period - first_period) + 1\n            } else if (period_size === 'year') {\n                periods_of_performance = (today_year - first_year) + 1\n            }\n\n            // based on MONTHLY quote data, initialize the lookback variables for the previous period\n            let start_baselinequote, start_baselineprice\n            let prev_quote_month, prev_quote_year\n            if (period_size === 'month') {\n                prev_quote_year = (first_month !== 1) ? first_year : first_year - 1\n                prev_quote_month = (first_month !== 1) ? first_month - 1 : 12\n            } else if (period_size === 'quarter') {\n                prev_quote_year = (first_period !== 1) ? first_year : first_year - 1 \n                prev_quote_month = (first_period !== 1) ? (first_period - 1) * 3 : 9\n            } else if (period_size === 'year') {\n                prev_quote_year = first_year - 1\n                prev_quote_month = 12\n            }\n            start_baselinequote = this.getMonthEndQuote('S&P500', prev_quote_year, prev_quote_month)\n            if (start_baselinequote === undefined || start_baselinequote.price === undefined) {\n                new_console_messages.push('ERROR: Quote for symbol S&P500 for month '+prev_quote_year+'-'+prev_quote_month+' is unavailable.')\n                start_baselineprice = 'err.'\n                quote_errors.push('S&P500')\n            } else {\n                start_baselineprice = start_baselinequote.price.adjusted_close\n            }\n\n            // calculate all period data\n            let year = first_year\n            let start_shares = {}, start_cash = 0, start_tickervalue = 0, start_totalvalue = 0\n            for (let p = 0; p < periods_of_performance; p++) {\n                \n                // initialization\n                let period, new_period = {}\n                if (period_size === 'month') {\n                    period = (p + first_period - 1) % 12 + 1\n                } else if (period_size === 'quarter') {\n                    period = (p + first_period - 1) % 4 + 1\n                } else if (period_size === 'year') {\n                    period =  1\n                }\n                new_period['period'] = period\n                if (period === 1 && p !== 0) {\n                    year += 1\n                }\n                new_period['year'] = year\n\n                // initialize this period's end values with the previous period's end values\n                let prev_shares = {}, prev_cash = 0, end_transfersinvalue = 0\n                if (p !== 0) {\n                    start_tickervalue = period_data[p-1].end_tickervalue\n                    start_totalvalue = period_data[p-1].end_totalvalue\n                    prev_shares = Object.assign({}, period_data[p-1].end_shares)\n                    prev_cash = period_data[p-1].end_cash\n                } else {\n                    prev_shares = Object.assign({}, start_shares)\n                    prev_cash = start_cash\n                }\n                let end_shares = Object.assign({}, prev_shares)\n                let end_cash = prev_cash\n\n                // generate the title for this period\n                let period_sort_suffix, period_display_suffix\n                if (period_size === 'month') {\n                    let d = new Date(1980, period - 1, 1)\n                    period_sort_suffix = 'M' + ('0' + period).slice(-2)\n                    period_display_suffix = ' ' + d.toLocaleString('default', { month: 'short' })\n                } else if (period_size === 'quarter') {\n                    period_sort_suffix = 'Q' + ('0' + period).slice(-2)\n                    period_display_suffix = 'Q' + period\n                } else if (period_size === 'year') {\n                    period_sort_suffix = ''\n                    period_display_suffix = ''\n                }\n                new_period['display_name'] = (p !== periods_of_performance - 1) ? year + period_display_suffix : 'current'\n                new_period['sort_name'] = year + period_sort_suffix\n\n                // determine period's transactions\n                let target_year = year\n                let period_transactions = sorted_transactions.filter( t => this.getYear(t.date) === target_year && this.getPeriod(period_size, t.date) === period )\n                new_period['transactions_of_stock'] = period_transactions.filter( t => t.ticker !== 'cash' )\n                new_period['transactions_of_cash'] = period_transactions.filter( t => t.ticker === 'cash' )\n\n                // determine period-end shares and cash value\n                for (let transaction of period_transactions) {\n                    let action, ticker, shares, total\n                    [action, ticker, shares, total] = [transaction.action, transaction.ticker, transaction.shares, transaction.total]\n                    if (ticker === 'cash') {\n                        let cash_delta = (action === 'transferIN' || action === 'dividend') ? total : -1 * total\n                        if (action === 'transferIN' || action === 'transferOUT') {\n                            end_transfersinvalue += cash_delta\n                        }\n                        end_cash += cash_delta\n                    } else {\n                        let share_delta = (action === 'buy') ? shares : -1 * shares\n                        let cash_delta = (action === 'buy') ? -1 * total : total\n                        if (end_shares.hasOwnProperty(ticker)) {\n                            end_shares[ticker] += share_delta\n                        } else {\n                            end_shares[ticker] = share_delta\n                        }\n                        end_cash += cash_delta\n                    }\n                }\n                new_period['end_shares'] = end_shares\n                new_period['end_cash'] = end_cash\n                new_period['end_transfersinvalue'] = end_transfersinvalue\n\n                // determine period-end ticker value\n                let self = this\n                let end_tickervalue = 0, end_tickerdate = null\n                let this_quote_month\n                if (period_size === 'month') {\n                    this_quote_month = period\n                } else if (period_size === 'quarter') {\n                    this_quote_month = period * 3\n                } else if (period_size === 'year') {\n                    this_quote_month = 12\n                }\n                let this_quote_year = target_year\n                if (target_year === today_year && period === today_period) { // for a partial last period, use a previous month's quotes\n                    let lastavailablequote_month_str, lastavailablequote_year_str\n                    [lastavailablequote_year_str, lastavailablequote_month_str] = this.props.all_month_end_dates[0].split('-')\n                    let lastavailablequote_month = parseInt(lastavailablequote_month_str)\n                    let lastavailablequote_year = parseInt(lastavailablequote_year_str)\n                    if (period_size === 'year') {\n                        if (lastavailablequote_year === today_year) {\n                            this_quote_month = lastavailablequote_month\n                            this_quote_year = lastavailablequote_year\n                        }\n                    } else {\n                        if (lastavailablequote_month !== today_month || lastavailablequote_year !== today_year) { // allow the previous month's quotes only\n                            if (today_month === 1 && (lastavailablequote_month !== 12 || lastavailablequote_year !== today_year - 1)) {\n                                this_quote_month = 12\n                                this_quote_year = today_year - 1\n                            } else if (today_month !== 1 && (lastavailablequote_month !== today_month - 1 || lastavailablequote_year !== today_year)) {\n                                this_quote_month = today_month - 1\n                                this_quote_year = today_year\n                            }\n                        }\n                    }\n                }\n                Object.entries(end_shares).forEach(function(position) {\n                    if (position[1] !== 0) {\n                        let month_end_quote = self.getMonthEndQuote(position[0], this_quote_year, this_quote_month)\n                        if (month_end_quote === undefined || month_end_quote.price === undefined) {\n                            new_console_messages.push('ERROR: Quote for symbol '+position[0]+' for month '+this_quote_year+'-'+this_quote_month+' is unavailable.')\n                            end_tickervalue = 'err.'\n                            end_tickerdate = null\n                            quote_errors.push(position[0])\n                        } else if (end_tickervalue !== 'err.') {\n                            end_tickervalue += position[1] * month_end_quote.price.adjusted_close\n                            if (end_tickerdate === null) {\n                                end_tickerdate = month_end_quote.date\n                            } else if (end_tickerdate !== month_end_quote.date) {\n                                new_console_messages.push('ERROR: Quote dates for month '+this_quote_year+'-'+this_quote_month+' do not match for all symbols ('+end_tickerdate+' & '+month_end_quote.date+').')\n                            }\n                        }\n                    }\n                })\n                new_period['end_tickervalue'] = end_tickervalue\n                new_period['end_tickerdate'] = end_tickerdate\n                \n                // determine period-end total value\n                let end_totalvalue\n                if (typeof end_tickervalue !== 'number' || typeof end_cash !== 'number') {\n                    end_totalvalue = 'err.'\n                } else {\n                    end_totalvalue = end_tickervalue + end_cash\n                }\n                new_period['end_totalvalue'] = end_totalvalue\n                new_period['end_tickervaluefraction'] = end_tickervalue / end_totalvalue\n                new_period['end_cashfraction'] = end_cash / end_totalvalue\n\n                // determine period-end baseline value\n                let end_baselineprice, end_baselinedate\n                let end_baselinequote = self.getMonthEndQuote('S&P500', this_quote_year, this_quote_month)\n                if (end_baselinequote === undefined || end_baselinequote.price === undefined) {\n                    new_console_messages.push('ERROR: Quote for symbol S&P500 for month '+this_quote_year+'-'+this_quote_month+' is unavailable.')\n                    end_baselineprice = 'err.'\n                    end_baselinedate = null\n                    quote_errors.push('S&P500')\n                } else {\n                    end_baselineprice = end_baselinequote.price.adjusted_close\n                    end_baselinedate = end_baselinequote.date\n                }\n                new_period['end_baselineprice'] = end_baselineprice\n                new_period['end_baselinedate'] = end_baselinedate\n\n                // determine period-over-period performance\n                // HPR (holding period return) = end / prev_end - 1\n                // HPR (HPR, adjusted for transfers) = end / (prev_end + transfersIN) - 1\n                // transfersIN, adjusted for middle-of-period transfers... aka Modified Dietz method)\n                //   transfersIN = transferINa * fraction of period duration) + (transferINb * fraction of period duration)\n                let adjusted_transfer_value = 0\n                let zb_start_month, zb_end_month, end_year\n                if (period_size === 'month') {\n                    zb_start_month = period - 1\n                    zb_end_month = (zb_start_month !== 11) ? zb_start_month + 1 : 1\n                    end_year = (zb_start_month !== 11) ? target_year : target_year + 1\n                } else if (period_size === 'quarter') {\n                    zb_start_month = period * 3 - 3\n                    zb_end_month = (period !== 4) ? zb_start_month + 3 : 1\n                    end_year = (period !== 4) ? target_year : target_year + 1\n                } else if (period_size === 'year') {\n                    zb_start_month = 0\n                    zb_end_month = 0\n                    end_year = target_year + 1\n                }\n                let period_start_date = new Date(target_year, zb_start_month, 1)\n                let period_end_date = new Date(end_year, zb_end_month, 1)\n                let period_days = Math.round((period_end_date - period_start_date) / (1000 * 60 * 60 * 24))\n                new_period.transactions_of_cash.forEach(function(transaction) {\n                    let transfer_month, transfer_day, fraction_of_period\n                    [transfer_month, transfer_day] = [parseInt(transaction.date.split('-')[1]), parseInt(transaction.date.split('-')[2])]\n                    let transfer_date = new Date(target_year, transfer_month - 1, transfer_day)\n                    if (transaction.action === 'transferIN') {\n                        fraction_of_period = (period_end_date - transfer_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value += transaction.total * fraction_of_period\n                    } else if (transaction.action === 'transferOUT') {\n                        fraction_of_period = (transfer_date - period_start_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value -= transaction.total * fraction_of_period\n                    }\n                })\n                let performance\n                if (typeof start_totalvalue !== 'number' || typeof end_totalvalue !== 'number') {\n                    performance = 'err.'\n                } else if (start_tickervalue === 0 && end_tickervalue === 0) {\n                    performance = 0\n                } else {\n                    performance = (end_totalvalue / (start_totalvalue + adjusted_transfer_value)) - 1\n                }\n                new_period['period_change_pct'] = performance\n\n                // determine period-over-period baseline performance\n                performance = 'n/a'\n                if (typeof start_baselineprice !== 'number' || typeof end_baselineprice !== 'number') {\n                    performance = 'err.'\n                } else if (p === 0) {\n                    performance = (end_baselineprice / start_baselineprice) - 1\n                } else {\n                    performance = (end_baselineprice / period_data[p-1].end_baselineprice) - 1\n                }\n                new_period['period_baseline_change_pct'] = performance\n\n                // store the data object\n                period_data.push(new_period)\n            }\n        }\n\n        if (new_console_messages.length) {\n            let message_summary\n            if (new_console_messages.length === 1) {\n                message_summary = new_console_messages[0]\n            } else {\n                let quote_error_count = quote_errors.length\n                let quote_tickers_count = Array.from(new Set(quote_errors)).length\n                let plural_quoteerrors = (quote_error_count === 1) ? '' : 's'\n                let plural_verb = (quote_error_count === 1) ? ' was' : ' were'\n                let plural_differentstocks = (quote_tickers_count === 1) ? ' stock' : ' different stocks'\n                if (quote_error_count === 1) {\n                    message_summary = 'ERROR: 1 quote was unavailable.'\n                } else if (quote_error_count > 1) {\n                    message_summary = 'ERROR: ' + quote_error_count + ' quote' + plural_quoteerrors \n                        + ' from ' + quote_tickers_count + plural_differentstocks + plural_verb + ' unavailable.'\n                } else {\n                    message_summary = 'ERROR: period performance calculations encountered error(s)'\n                }\n            }\n            let new_console_message_set = this.props.create_console_message_set(message_summary)\n            new_console_message_set.messages = [...new_console_messages]\n            this.props.on_new_console_messages(new_console_message_set)\n        }\n\n        this.setState({ period_data: period_data })\n\n    }\n\n    getYear(date) {\n        return parseInt(date.split('-')[0])\n    }\n\n    getPeriod(period_size, date) {\n        let zb_month = parseInt(date.split('-')[1])-1\n\n        if (period_size === 'month') {\n            return zb_month + 1\n        } else if (period_size === 'quarter') {\n            return Math.floor(zb_month / 3) + 1\n        } else if (period_size === 'year') {\n            return 1\n        } else {\n            return 'n/a'\n        }\n    }\n\n    getMonth(date) {\n        return parseInt(date.split('-')[1])\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    formatCurrency(dollars) {\n        let prefix, retval = dollars\n        if (typeof dollars === 'number') {\n            let value = Math.round(dollars)\n            retval = this.numberWithCommas(Math.abs(value))\n            prefix = (value < 0 ) ? '-$' : '$'\n            retval = prefix + retval\n        } else {\n            retval = 'err.'\n        }\n        return retval\n    }\n\n    getDisplayedPerformance(period_data) {\n        let retval = {}\n        retval['key'] = period_data.sort_name\n        retval['display_value'] = 'err.'\n        retval['baseline_value'] = 'err.'\n        retval['index_value'] = period_data.period_baseline_change_pct\n        let my_perf = period_data.period_change_pct\n        if (my_perf === 'err.') {\n            retval['display_value'] = 'err.'\n        } else if (typeof my_perf === 'number') {\n            if (this.props.baseline_name === 'sp500_pct_gain') {\n                let baseline_perf = period_data.period_baseline_change_pct\n                if (typeof baseline_perf !== 'number') {\n                    return retval\n                } else {\n                    retval['display_value'] = my_perf - baseline_perf\n                    retval['baseline_value'] = baseline_perf\n                }\n            } else {\n                retval['display_value'] = my_perf\n                retval['baseline_value'] = 0\n            }\n        }\n        return retval\n    }\n\n    getMonthEndQuote(ticker, year, month) {\n        let monthly_quotes = this.props.all_monthly_quotes\n        let monthly_dates = this.props.all_month_end_dates\n        let period_idx = monthly_dates.findIndex( date => this.getYear(date) === year && this.getMonth(date) === month )\n        let retval = {}\n        if (period_idx !== -1) {\n            let quote_date = monthly_dates[period_idx]\n            retval['date'] = quote_date\n            retval['price'] = (monthly_quotes[ticker].hasOwnProperty(quote_date)) ? monthly_quotes[ticker][quote_date] : undefined\n        } else {\n            retval = undefined\n        }\n        return retval\n    }\n\n    styleCell(performance_obj) {\n        let displayed, baseline, index\n        [displayed, baseline, index] = [performance_obj.display_value, performance_obj.baseline_value, performance_obj.index_value]\n        let classes = 'performance-cell'\n        if ( this.props.baseline_name === 'sp500_pct_gain') {\n            if (displayed > 0) {\n                classes += ' text-green'\n            } else if (displayed < 0) {\n                classes += ' text-red'\n            }\n        } else {\n            if ( displayed < baseline || displayed < 0 ) {\n                classes += ' text-red'\n            } else if (displayed > index && displayed > 0) {\n                classes += ' text-green'\n            }\n        }\n        return classes\n    }\n\n    formatPerformance(performance) {\n        if (performance === 'err.' || performance === 'ref.') {\n            return performance\n        } else if (typeof performance !== 'number') {\n            return '-'\n        } else {\n            return (Math.round(performance * 100 * 10) / 10).toFixed(1) + '%'\n        }\n    }\n\n    formatIndexPerformance(performance) {\n        if ( this.props.baseline_name === 'sp500_pct_gain') {\n            return this.formatPerformance('ref.')\n        } else {\n            return this.formatPerformance(performance)\n        }\n    }\n\n    formatWholePercentage(percentage) {\n        if (percentage === 'err.') {\n            return 'err.'\n        } else if (typeof percentage !== 'number' || isNaN(percentage)) {\n            return '?'\n        } else {\n            return (Math.round(percentage * 100)) + '%'\n        }\n    }\n\n    onToggleSortOrder(num_periods) {\n        let el = document.getElementById('my-performance-periods')\n        let period_width = Math.floor(el.scrollWidth / num_periods)\n        let leftmost_zbperiod_shown = Math.floor(el.scrollLeft / period_width)\n        let new_scroll_left = (num_periods - leftmost_zbperiod_shown - 1) * period_width\n        el.scrollLeft = new_scroll_left\n        this.setState(prevState => {\n            let new_sort_dir = (prevState.data_sort_dir === 'asc') ? 'desc' : 'asc'\n            localStorage.setItem('data_sort_dir', JSON.stringify(new_sort_dir))\n            return { \n                data_sort_dir: new_sort_dir \n            }\n        })\n    }\n\n    handlePeriodChange(event) {\n        let newPeriod = event.target.id.replace(/select-/g, '')\n        localStorage.setItem('period_size', JSON.stringify(newPeriod))\n        this.setState({ period_size: newPeriod })\n        this.generatePeriodData(newPeriod)\n    }\n\n    render() {\n        let self = this\n        let displayed_performance = {}\n        this.state.period_data.forEach(function(qdata) {\n            displayed_performance[qdata.sort_name] = self.getDisplayedPerformance(qdata)\n        })\n        let sorted_data = this.state.period_data.sort( function(a,b) {\n            if (a.sort_name < b.sort_name) {\n                return (self.state.data_sort_dir === 'asc') ? -1 : 1\n            } else if (a.sort_name > b.sort_name) {\n                return (self.state.data_sort_dir === 'asc') ? 1 : -1\n            } else {\n                return 0\n            }\n        })\n        return (\n            <div id=\"my-performance-wrapper\">\n                <div id=\"my-performance-body\">\n                    <div id=\"my-performance-rowlabels\">\n                        <div id=\"my-performance-controls\">\n                            <ul id=\"periodsize-selector\">\n                                <li id=\"select-year\" className={\"strong selector\" + (this.state.period_size === \"year\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Y</li>\n                                <li id=\"select-quarter\" className={\"strong selector\" + (this.state.period_size === \"quarter\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Q</li>\n                                <li id=\"select-month\" className={\"strong selector\" + (this.state.period_size === \"month\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>M</li>\n                            </ul>\n                            <div id=\"sortorder-button\">\n                                <button onClick={ (e)=>this.onToggleSortOrder(sorted_data.length) } className=\"strong\">&#x21c6;</button>\n                            </div>\n                        </div>\n                        <p className=\"strong\">stocks:</p>\n                        <p className=\"strong\">cash:</p>\n                        <p className=\"strong\">transfers in:</p>\n                        <p className=\"strong\">total:</p>\n                        <p className=\"strong\">my perf{ (this.props.baseline_name === 'sp500_pct_gain') ? ' delta' : '' }:</p>\n                        <p className=\"strong\">S&amp;P500:</p>\n                    </div>\n                    <div id=\"my-performance-periods\">\n                        { sorted_data.map( qdata => (\n                        <div className=\"period-data\" key={qdata.sort_name}>\n                            <p className=\"strong\">{qdata.display_name}</p>\n                            <p>{this.formatCurrency(qdata.end_tickervalue)} ({this.formatWholePercentage(qdata.end_tickervaluefraction)})</p>\n                            <p>{this.formatCurrency(qdata.end_cash)} ({this.formatWholePercentage(qdata.end_cashfraction)})</p>\n                            <p>{this.formatCurrency(qdata.end_transfersinvalue)}</p>\n                            <p className=\"strong\">{this.formatCurrency(qdata.end_totalvalue)}</p>\n                            <p className={ this.styleCell(displayed_performance[qdata.sort_name]) }>{ this.formatPerformance(displayed_performance[qdata.sort_name].display_value) }</p>\n                            <p>{ this.formatIndexPerformance(displayed_performance[qdata.sort_name].index_value) }</p>\n                        </div>\n                        ))}\n                    </div>\n                </div>\n                <div id=\"my-performance-footer\">\n                </div>\n\n            </div>\n        )\n    }\n}\n\nMyPerformance.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_positions: PropTypes.object.isRequired,\n    all_monthly_quotes: PropTypes.object.isRequired,\n    all_month_end_dates: PropTypes.array.isRequired,\n    baseline_name: PropTypes.string.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class Console extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data_sort_dir: 'desc',\n            expanded_message_sets: []\n        }\n        this.getClasses = this.getClasses.bind(this)\n        this.getMessageSetClasses = this.getMessageSetClasses.bind(this)\n        this.formatTimestamp = this.formatTimestamp.bind(this)\n        this.onToggleExpandMessageSet = this.onToggleExpandMessageSet.bind(this)\n        this.onToggleSortOrder = this.onToggleSortOrder.bind(this)\n    }\n\n    getClasses(message) {\n        let classes = 'message'\n        if (message.toUpperCase().startsWith('ERROR')) {\n            classes += ' warning'\n        }\n        return classes\n    }\n\n    getMessageSetClasses(message_set_count) {\n        let classes = 'message_set'\n        if (parseInt(message_set_count) > 1) {\n            classes += ' multiline'\n        }\n        return classes\n    }\n\n    formatTimestamp(epoch) {\n        let tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds\n        let localISOTime = (new Date(new Date(epoch) - tzoffset)).toISOString()\n        let iso = localISOTime.match(/(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2})/)\n        return iso[1] + ' ' + iso[2]\n    }\n\n    onToggleSortOrder() {\n        this.setState(prevState => {\n            let new_sort_dir = (prevState.data_sort_dir === 'asc') ? 'desc' : 'asc'\n            return { \n                data_sort_dir: new_sort_dir \n            }\n        })\n    }\n\n    onToggleExpandMessageSet(identifier) {\n        this.setState(prevState => {\n            let new_expanded_message_sets = JSON.parse(JSON.stringify(prevState.expanded_message_sets))\n            if (!new_expanded_message_sets.includes(identifier)) {\n                new_expanded_message_sets = [identifier]\n            } else {\n                new_expanded_message_sets = []\n            }\n            return { expanded_message_sets: new_expanded_message_sets }\n        })\n    }\n\n    render() {\n\n        const PopulateMessageSet = ({message_set}) => {\n            let timestamp = this.formatTimestamp(message_set.modified_at)\n            let count = message_set.messages.length\n            return (\n                <div className={this.getMessageSetClasses(count)}>\n                    <p className=\"summary\" onClick={ (e) => this.onToggleExpandMessageSet(timestamp)}>[{timestamp}] <span className={this.getClasses(message_set.summary)}>{message_set.summary}</span></p>\n                    { message_set.messages.length > 1 && this.state.expanded_message_sets.includes(timestamp) && message_set.messages.map ( (message, i) => (\n                        <p key={i} onClick={ (e) => this.onToggleExpandMessageSet(timestamp)}><span className={this.getClasses(message)}>{message}</span></p>\n                    ))}\n                </div>\n            )\n        }\n\n        let message_sets = this.props.all_console_messages\n        let ordered_message_sets\n        let self = this\n        ordered_message_sets = message_sets.sort(function(a,b) {\n            if (a.modified_at < b.modified_at) {\n                return (self.state.data_sort_dir === 'asc') ? -1 : 1\n            } else if (a.modified_at > b.modified_at) {\n                return (self.state.data_sort_dir === 'asc') ? 1 : -1\n            } else {\n                return 0\n            }\n\n        })\n        return (\n            <div id=\"console-messages-wrapper\">\n                <button onClick={ (e)=>this.onToggleSortOrder() } className=\"strong\">&#x21c5;</button> History:\n                <div id=\"console-messages\">\n                { ordered_message_sets && ordered_message_sets.map( (message_set, i) => (\n                    <PopulateMessageSet key={i} message_set={message_set} />\n                ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nConsole.propTypes = {\n    all_console_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_current_holdings',\n            balance_target_column: 'current_value',\n            sell_all_of: ['sell_none'],\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    componentDidMount() {\n        let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column))\n        this.setState({ balanceable_value: new_balanceable_value })\n\n        const stored_balance_target_set = JSON.parse(localStorage.getItem(\"balance_target_set\"))\n        if (stored_balance_target_set !== null) {\n            this.setState({ balance_target_set: stored_balance_target_set })\n        }\n\n        const stored_balance_target_column = JSON.parse(localStorage.getItem(\"balance_target_column\"))\n        if (stored_balance_target_column !== null) {\n            this.setState({ balance_target_column: stored_balance_target_column })\n        }\n\n        const stored_cash_remaining = JSON.parse(localStorage.getItem(\"cash_remaining\"))\n        if (stored_cash_remaining !== null) {\n            this.setState({ cash_remaining: stored_cash_remaining })\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value, selectedOptions } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(value, this.state.sell_all_of, this.state.balance_target_column))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balance_target_column') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.sell_all_of, value))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.,]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        if (name !== 'sell_all_of') {\n            this.setState({ [name]: value })\n        } else {\n            let multiple_tickers = Array.from(selectedOptions, (item) => item.value)\n            if (multiple_tickers.includes('sell_none')) {\n                multiple_tickers = ['sell_none']\n            }\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, value, this.state.balance_target_column))\n            this.setState({ \n                sell_all_of: multiple_tickers,\n                balanceable_value: new_balanceable_value\n            })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'include') ? parseInt(user_remaining_cash) : null\n        this.props.on_whatif_submit(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, remaining_cash)\n    }\n\n    isDisabled() {\n\n        if (this.state.cash_treatment === 'include' && !this.state.cash_valid) {\n            return true\n        } else if (this.state.balance_target_set === 'my_current_holdings') {\n            return (this.props.show_current_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        let excludable_tickers = []\n        if (this.state.balance_target_set === \"my_current_holdings\") {\n            excludable_tickers = Object.keys(this.props.all_positions).filter( ticker => ticker !== 'cash' && this.props.all_positions[ticker].current_shares)\n        } else if (this.props.all_tags.hasOwnProperty(this.state.balance_target_set)) {\n            excludable_tickers = this.props.all_tags[this.state.balance_target_set].filter( ticker => this.props.all_positions[ticker] && this.props.all_positions[ticker].current_shares)\n        }\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div id=\"operation\">Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_current_holdings\">current holdings ({Object.entries(this.props.all_positions).filter(position => position[0] !== 'cash' && position[1].current_shares !== 0).length})</option>\n                            <option value=\"untagged\">untagged tickers ({this.props.all_tags.untagged.length})</option>\n                            {Object.entries(this.props.all_tags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag} ({this.props.all_tags[tag].length})</option>\n                            )}\n                        </select>\n                        &nbsp;into&nbsp; \n                        <select name=\"balance_target_column\" value={this.state.balance_target_column} onChange={this.handleChange}>\n                            <option value=\"current_value\">equal values</option>\n                            <option value=\"value_at_risk\">equal values, risk adjusted</option>\n                            <option value=\"basis\">equal bases</option>\n                            <option value=\"basis_risked\">equal bases, risk adjusted</option>\n                            <option value=\"only_profits\">only profits remaining</option>\n                        </select>\n                        , but sell all of&nbsp;\n                        <select name=\"sell_all_of\" value={this.state.sell_all_of} multiple={true} onChange={this.handleChange}>\n                            <option value=\"sell_none\">(none. keep all.)</option>\n                            {excludable_tickers.sort().map(ticker => \n                                <option key={ticker} value={ticker}> {ticker} </option>\n                            )}\n                        </select>\n                        &nbsp;...\n                    </div>\n                    <div id=\"cash-treatment\">\n                        <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                        <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                        <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining} placeholder=\"$0\"></input>cash remaining (max: ${this.numberWithCommas(this.state.balanceable_value)})</label>\n                    </div>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_current_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { TickerAdd } from './TickerAdd'\nimport { TagAdd } from './TagAdd'\nimport { TransactionAdd } from './TransactionAdd'\nimport { TransactionsList } from './TransactionsList'\nimport { TagDelete } from './TagDelete'\nimport { MyPerformance } from './MyPerformance'\nimport { Console } from './Console'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | my-performance | what-ifs | console\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    componentDidMount() {\n        const stored_which_inputs = JSON.parse(localStorage.getItem(\"which_inputs\"))\n        if (stored_which_inputs !== null) {\n            this.setState({ which_inputs: stored_which_inputs })\n        }\n    }\n\n    onWhichInputs(new_which_inputs) {\n        localStorage.setItem('which_inputs', JSON.stringify(new_which_inputs))\n        if (this.state.which_inputs !== new_which_inputs) {\n            this.props.clear_last_console_message()\n        }\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"my-performance\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('my-performance')}>Performance</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"console\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('console')}>Messages</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <TickerAdd\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <TagAdd\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        <TagDelete\n                            all_tags={this.props.all_tags}\n                            on_delete_tags={this.props.on_delete_tags}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <div className=\"content-wrapper\">\n                            <div className=\"content-half\">\n                                <TransactionAdd\n                                    all_stocks={this.props.all_stocks}\n                                    all_tags={this.props.all_tags}\n                                    on_new_transaction={this.props.on_new_transaction}\n                                    on_new_cash={this.props.on_new_cash}\n                                    create_console_message_set={this.props.create_console_message_set}\n                                    on_new_console_messages={this.props.on_new_console_messages}\n                                />\n                            </div>\n                            <div className=\"content-half\">\n                                <TransactionsList\n                                    all_transactions={this.props.all_transactions}\n                                    all_risk={this.props.all_risk}\n                                    on_delete_transaction={this.props.on_delete_transaction}\n                                    on_import_transactions={this.props.on_import_transactions}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_current_holdings={this.props.show_current_holdings}\n                            show_previous_holdings={this.props.show_previous_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'my-performance' && (\n                        <React.Fragment>\n                        <MyPerformance\n                            all_transactions={this.props.all_transactions}\n                            all_positions={this.props.all_positions}\n                            all_monthly_quotes={this.props.all_monthly_quotes}\n                            all_month_end_dates={this.props.all_month_end_dates}\n                            baseline_name={this.props.baseline_name}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'console' && (\n                        <React.Fragment>\n                        <Console\n                            all_console_messages={this.props.all_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object.isRequired,\n    all_monthly_quotes: PropTypes.object.isRequired,\n    all_month_end_dates: PropTypes.array.isRequired,\n    all_positions: PropTypes.object,\n    all_transactions: PropTypes.array,\n    all_risk: PropTypes.object,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    baseline_name: PropTypes.string,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tags: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    all_console_messages: PropTypes.array.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func,\n    clear_last_console_message: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string',\n        category: 'always'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2,\n    //     category: 'performance'\n    // },\n    {\n        name: 'quote_date',\n        display_name: 'Price Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis',\n        display_name: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'profit',\n        display_name: 'Profit',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'risk_factor_modified',\n        display_name: 'Risk Factor Edited Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'risk_factor',\n        display_name: 'Risk Factor (default=0.20)',\n        type: 'number',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    {\n        name: 'value_at_risk',\n        display_name: 'Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_value_at_risk',\n        display_name: 'What-If Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis_risked',\n        display_name: 'Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis_risked',\n        display_name: 'What-If Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'start_date',\n        display_name: 'Holding Started Date',\n        type: 'string',\n        category: 'holdings'\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthEndDates: [],\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: [],\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n            allConsoleMessages: [],\n            last_console_message: '',\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_current_holdings',\n            balance_target_column: '',\n            sell_all_of: [],\n            remaining_cash: null,\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            show_current_holdings: true,\n            show_previous_holdings: false,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            error_if_not_todays_quote: true,\n            show_only_achieved_performance: false,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getTransactionById = this.getTransactionById.bind(this)\n        this.getTransactionsByTicker = this.getTransactionsByTicker.bind(this)\n        this.getPositionFromSingleTickerTransactions = this.getPositionFromSingleTickerTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.createConsoleMessageSet = this.createConsoleMessageSet.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onImportTransactions = this.onImportTransactions.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTags = this.onDeleteTags.bind(this)\n        this.onDeleteTransaction = this.onDeleteTransaction.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewConsoleMessages = this.onNewConsoleMessages.bind(this)\n        this.clearLastConsoleMessage = this.clearLastConsoleMessage.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n        this.currentQuoteExists = this.currentQuoteExists.bind(this)\n        this.getClosingPrice = this.getClosingPrice.bind(this)\n        this.getMostRecentClosingPrice = this.getMostRecentClosingPrice.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.getMaxBalanceableValue = this.getMaxBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getCurrentHoldings = this.getCurrentHoldings.bind(this)\n        this.getPreviousHoldings = this.getPreviousHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.getTickersFromSet = this.getTickersFromSet.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        // 1. load all locally-stored data\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        let allTags = {}\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n            allTags = JSON.parse(JSON.stringify(stored_allTags))\n        }\n\n        let allTransactions = []\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n            allTransactions = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        const stored_allRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (stored_allRisk !== null) {\n            this.setState({ allRisk: stored_allRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['show_current_holdings', 'show_previous_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates', 'show_only_achieved_performance', 'error_if_not_todays_quote']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n\n        // 2. calculate historical performance data for each added ticker\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        let indexed_risk_data = {}\n        if (stored_allRisk !== null) {\n            indexed_risk_data = JSON.parse(JSON.stringify(stored_allRisk))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'].toUpperCase())\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'].toUpperCase())\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeriesDesc = Object.entries(indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series'])\n                .sort(function(a,b) {\n                    if(a[0] < b[0]) {\n                        return 1\n                    } else if (a[0] > b[0]) {\n                        return -1\n                    } else {\n                        return 0\n                    }\n                })\n                let monthly_prices = Object.entries(quoteTimeSeriesDesc).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n\n        // 3. calculate position data (from transactions) for all holdings\n\n        let all_stocks = []\n        allTransactions.forEach(function(transaction) {\n            if (!all_stocks.includes(transaction.ticker)) {\n                all_stocks.push(transaction.ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_risk_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        all_stocks = all_stocks.filter(ticker => ticker !== 'cash')\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthEndDates = []\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n        let cash_delta_from_stock_transactions = 0\n\n        all_stocks.forEach(function(ticker) {\n\n            // create a stock position if any transactions exist\n            allTransactions.forEach(function(transaction) {\n                if (!newPositions.hasOwnProperty(transaction.ticker) && transaction.ticker !== 'cash') {\n                    let newPosition = {}\n                    let ticker = transaction.ticker\n                    newPosition = self.getPositionFromSingleTickerTransactions(allTransactions.filter(transaction => transaction.ticker === ticker))\n                    newPosition['symbol'] = ticker\n                    newPositions[ticker] = newPosition\n                    if (transaction.action === 'buy') {\n                        cash_delta_from_stock_transactions -= transaction.total\n                    } else {\n                        cash_delta_from_stock_transactions += transaction.total\n                    }\n                }\n            })\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuote['quote_date'] = quoteResult['07. latest trading day']\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n\n                let newTickerQuotes = {}\n                Object.entries(indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']).forEach(function(entry) {\n\n                    let full_date = entry[0]\n\n                    // collect all quotes for this ticker\n                    let newQuote = {}\n                    newQuote['adjusted_close'] = parseFloat(entry[1]['5. adjusted close'])\n                    newTickerQuotes[full_date] = newQuote\n\n                    // build the month-end dates (YYYY-MM-DD)\n                    let target_month = full_date.substr(0,7)\n                    if (!newMonthEndDates.includes(full_date)) {\n                        let found_idx = newMonthEndDates.findIndex(element => element.substr(0,7) === target_month)\n                        if (found_idx === -1) {\n                            newMonthEndDates.push(full_date)\n                        } else if (newMonthEndDates[found_idx] < full_date) {\n                            newMonthEndDates[found_idx] = full_date\n                        }\n                    }\n                })\n                newMonthlyQuotes[ticker] = newTickerQuotes\n\n                // calculate performance\n                let newPerformance = {}\n\n                let ticker_now = self.getClosingPrice(ticker, newMonthEndDates[0], newMonthlyQuotes)\n                if (typeof ticker_now !== 'number') {\n                    ticker_now = self.getMostRecentClosingPrice(ticker, newCurrentQuotes)\n                }\n                let ticker_short_ago = self.getClosingPrice(ticker, newMonthEndDates[5], newMonthlyQuotes)\n                let ticker_medium_ago = self.getClosingPrice(ticker, newMonthEndDates[11], newMonthlyQuotes)\n                let ticker_long_ago = self.getClosingPrice(ticker, newMonthEndDates[23], newMonthlyQuotes)\n                let ticker_perf_short, ticker_perf_medium, ticker_perf_long\n                if (typeof ticker_now === 'number') {\n                    if (typeof ticker_short_ago === 'number') {\n                        ticker_perf_short = (ticker_now - ticker_short_ago) / ticker_now * 100\n                        newPerformance['short_change_pct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_short - index_performance.short_change_pct \n                            : ticker_perf_short\n                    } else {\n                        newPerformance['short_change_pct'] = 'err.'\n                    }\n                    if (typeof ticker_medium_ago === 'number') {\n                        ticker_perf_medium = (ticker_now - ticker_medium_ago) / ticker_now * 100\n                        newPerformance['medium_change_pct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_medium - index_performance.medium_change_pct \n                            : ticker_perf_medium\n                    } else {\n                        newPerformance['medium_change_pct'] = 'err.'\n                    }\n                    if (typeof ticker_long_ago === 'number') {\n                        ticker_perf_long = (ticker_now - ticker_long_ago) / ticker_now * 100\n                        newPerformance['long_change_pct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_long - index_performance.long_change_pct \n                            : ticker_perf_long\n                    } else {\n                        newPerformance['long_change_pct'] = 'err.'\n                    }\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            if (indexed_risk_data.hasOwnProperty(ticker)) {\n                newRisk[ticker] = JSON.parse(JSON.stringify(indexed_risk_data[ticker]))\n            }\n        })\n        newMonthEndDates = newMonthEndDates.sort().reverse()\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        let cash_transactions = allTransactions.filter(transaction => transaction.ticker === 'cash')\n        if (cash_transactions.length || cash_delta_from_stock_transactions !== 0) {\n            let newPosition = {}\n            newPosition = this.getPositionFromCashTransactions(cash_transactions)\n            newPosition['symbol'] = 'cash'\n            if (cash_delta_from_stock_transactions) {\n                newPosition['basis'] += cash_delta_from_stock_transactions\n                newPosition['current_shares'] += cash_delta_from_stock_transactions\n            }\n            newPositions['cash'] = newPosition\n        }\n\n        // 5. handle aggregates\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(allTags, newPositions, newCurrentQuotes, stored_controls['show_current_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(allTags, newPerformanceNumbers)))\n\n\n        // 6. update the app's state with all of the above changes\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthEndDates: newMonthEndDates,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getTransactionById(transaction_id) {\n        return this.state.allTransactions.filter(transaction => transaction.modified_at === transaction_id)[0]\n    }\n\n    getTransactionsByTicker(ticker) {\n        return this.state.allTransactions.filter(transaction => transaction.ticker === ticker)\n    }\n\n    getPositionFromSingleTickerTransactions(transactions) { // assumes the transactions are all from a single ticker\n        let inflows = 0, outflows = 0, current_shares = 0, date, action, num_shares, ticker, value\n        let sorted_transactions = transactions.sort(function(a,b) {\n            if (a.date > b.date) {\n                return -1\n            } else if (a.date < b.date) {\n                return -1\n            } else {\n                return 0\n            }\n        })\n        let position_start_date = '1970/01/01'\n        sorted_transactions.forEach(function(transaction) {\n            [date, action, num_shares, ticker, value] = transaction.summary.split(' ')\n            date = date.substr(0, date.length-1)\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (current_shares === 0) {\n                position_start_date = date\n            }\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n            if (current_shares === 0) {\n                position_start_date = 'n/a'\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            start_date: position_start_date,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [, action, value] = cash_transaction.summary.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'transferIN' || action === 'dividend') {\n                total += cash_amount\n            } else if (action === 'transferOUT' || action === 'fee') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_current_holdings, show_cash) {\n\n        let holdings = (show_current_holdings === null) ? this.state.show_current_holdings : show_current_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            if (ticker_basis < 0) {\n                ticker_basis = 0\n            }\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let quote_exists = all_quotes.hasOwnProperty(ticker)\n            let ticker_price, ticker_total_value\n            if (ticker === 'cash') {\n                ticker_price = 1\n                ticker_total_value = ticker_price * ticker_shares\n            } else if (ticker_shares === 0) {\n                ticker_total_value = 0\n            } else if (quote_exists) {\n                ticker_price = all_quotes[ticker]['current_price']\n                ticker_total_value = ticker_price * ticker_shares\n                if (ticker_total_value < 0) {\n                    ticker_total_value = 0\n                }\n            } else {\n                ticker_total_value = 'err.'\n            }\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                if (aggr_totalvalue_by_tag['_everything_'] === 'err.') {\n                    aggr_totalvalue_by_tag['_everything_'] = 'err.'\n                } else if (ticker_total_value === 'err.') {\n                    aggr_totalvalue_by_tag['_everything_'] = 'err.'\n                } else {\n                    aggr_totalvalue_by_tag['_everything_'] += ticker_total_value\n                }\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        if (aggr_totalvalue_by_tag === 'err.') {\n                            aggr_totalvalue_by_tag[tag] = 'err.'\n                        } else if (ticker_total_value === 'err.') {\n                            aggr_totalvalue_by_tag[tag] = 'err.'\n                        } else {\n                            aggr_totalvalue_by_tag[tag] += ticker_total_value\n                        }\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short, medium, long, prev_short, prev_medium, prev_long\n            if (all_performance_numbers.hasOwnProperty(ticker)) {\n                short = all_performance_numbers[ticker]['short_change_pct']\n                medium = all_performance_numbers[ticker]['medium_change_pct']\n                long = all_performance_numbers[ticker]['long_change_pct']\n                prev_short = aggr_performance_by_tag['_everything_'].short_change_pct\n                prev_medium = aggr_performance_by_tag['_everything_'].medium_change_pct\n                prev_long = aggr_performance_by_tag['_everything_'].long_change_pct\n                aggr_performance_by_tag['_everything_'].short_change_pct = (prev_short === 'err.' || short === 'err.') ? 'err.' : prev_short + short\n                aggr_performance_by_tag['_everything_'].medium_change_pct = (prev_medium === 'err.' || medium === 'err.') ? 'err.' : prev_medium + medium\n                aggr_performance_by_tag['_everything_'].long_change_pct = (prev_long === 'err.' || long === 'err.') ? 'err.' : prev_long + long\n            } else {\n                short = 'err.'\n                medium = 'err.'\n                long = 'err.'\n                aggr_performance_by_tag['_everything_'].short_change_pct = 'err.'\n                aggr_performance_by_tag['_everything_'].medium_change_pct = 'err.'\n                aggr_performance_by_tag['_everything_'].long_change_pct = 'err.'\n            }\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    prev_short = aggr_performance_by_tag[tag].short_change_pct\n                    prev_medium = aggr_performance_by_tag[tag].medium_change_pct\n                    prev_long = aggr_performance_by_tag[tag].long_change_pct\n                    aggr_performance_by_tag[tag].short_change_pct = (prev_short === 'err.') ? 'err.' : short\n                    aggr_performance_by_tag[tag].medium_change_pct = (prev_medium === 'err.') ? 'err.' : medium\n                    aggr_performance_by_tag[tag].long_change_pct = (prev_long === 'err.') ? 'err.' : long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                if (performance[time_range] !== 'err.') {\n                    let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                    aggr_performance_by_tag[tag][time_range] = value\n                }\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_current_holdings = (name === 'show_current_holdings') ? new_value : this.state.show_current_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_current_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            column_names.forEach(function(column_name) {\n                if (!new_shown_column_names.includes(column_name)) {\n                    new_shown_column_names.push(column_name)\n                }\n            })\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    createConsoleMessageSet(new_message) {\n        let new_console_message_set = {\n            modified_at: new Date().getTime(),\n            summary: new_message,\n            messages: [new_message]\n        }\n        return new_console_message_set\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.ticker !== delete_ticker)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Ticker \"' + delete_ticker + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary + ((new_console_message_set.messages.length > 1) ? ' See the \"Messages\" tab.' : ''),\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let date, action, num_shares, ticker, total\n        [date, action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: ticker,\n                action: action,\n                shares: num_shares,\n                total: total,\n                summary: new_transaction_summary\n            }\n            newAllTransactions.push(new_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let orig_start_date, orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_start_date = newAllPositions[ticker]['start_date']\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let new_current_shares = (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares\n            let new_start_date\n            if (orig_start_date === undefined) {\n                new_start_date = date\n            } else {\n                new_start_date = (new Date(date) < new Date(orig_start_date)) ? date : orig_start_date\n            }\n            let updatedPosition = {\n                current_shares: new_current_shares,\n                start_date: (new_current_shares) ? new_start_date : 'n/a',\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the cash position numbers\n            orig_current_shares = (newAllPositions.hasOwnProperty('cash')) ? newAllPositions['cash'].current_shares : 0\n            new_current_shares = (action === 'buy') ? orig_current_shares - total : orig_current_shares + total\n            let updatedCashPosition = {\n                current_shares: new_current_shares,\n                symbol: 'cash',\n                basis: new_current_shares,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedCashPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onImportTransactions(file_contents) {\n\n        let imported_tickers = []\n\n        let imported_transactions = JSON.parse(JSON.stringify(file_contents.transactions))\n        imported_transactions.forEach( transaction => imported_tickers.push(transaction.ticker) )\n\n        let imported_risk = JSON.parse(JSON.stringify(file_contents.risk))\n        Object.keys(imported_risk).forEach( ticker => imported_tickers.push(ticker))\n\n        let all_stocks_of_interest = Array.from(new Set(imported_tickers))\n        this.setState(prevState => {\n\n            // update the \"untagged\" tag so that all added tickers belong to a tag\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let already_added = []\n            Object.keys(newAllTags).forEach(function(tag) {\n                newAllTags[tag].forEach(function(ticker) {\n                    if (!already_added.includes(ticker)) {\n                        already_added.push(ticker)\n                    }\n                })\n            })\n            all_stocks_of_interest.forEach( function(ticker) {\n                if (!already_added.includes(ticker) && ticker !== 'cash') {\n                    newAllTags['untagged'].push(ticker)\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // replace the stored transactions\n            localStorage.setItem('allTransactions', JSON.stringify(imported_transactions))\n\n            // replace the stored risk\n            localStorage.setItem('allRisk', JSON.stringify(imported_risk))\n\n            return\n        })\n\n        window.location.reload(false)\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let date, action, total\n        [date, action, total]  = new_cash_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: 'cash',\n                action: action,\n                shares: total,\n                total: total,\n                summary: new_cash_transaction_summary\n            }\n            newAllTransactions.push(new_cash_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'dividend' || action === 'transferIN') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTransaction(delete_transaction_id) {\n\n        let transaction_to_delete = this.getTransactionById(delete_transaction_id)\n        let ticker = transaction_to_delete.ticker\n\n        this.setState(prevState => {\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.modified_at !== delete_transaction_id)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Transaction \"' + transaction_to_delete.summary + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the position numbers\n            let remainingTransactionsForTicker = newAllTransactions.filter(transaction => transaction.ticker === ticker)\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let updatedPosition\n            if (!remainingTransactionsForTicker.length) {\n                delete newAllPositions[ticker]\n            } else {\n                if (ticker === 'cash') {\n                    updatedPosition = this.getPositionFromCashTransactions(remainingTransactionsForTicker)\n                } else {\n                    updatedPosition = this.getPositionFromSingleTickerTransactions(remainingTransactionsForTicker)\n                }\n                newAllPositions[ticker] = updatedPosition\n            }\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n\n            return { \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary + ((new_console_message_set.messages.length > 1) ? ' See the \"Messages\" tab.' : ''),\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTags(delete_tags) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = []\n            delete_tags.forEach(function(tag) {\n                tickers_losing_a_tag = tickers_losing_a_tag.concat(newAllTags[tag])\n                delete newAllTags[tag]\n            })\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker) && !newUntagged.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let summary, new_messages = []\n            delete_tags.forEach(function(tag) {\n                new_messages.push('Tag \"' + tag + '\" has now been deleted.')\n            })\n            if (new_messages.length === 1) {\n                summary = 'Tag \"' + delete_tags[0] + '\" has now been deleted.'\n            } else {\n                summary = 'Deleted ' + delete_tags.length + ' tags.'\n            }\n            let new_console_message_set = this.createConsoleMessageSet(summary)\n            if (new_messages.length > 1) {\n                new_console_message_set.messages = [...new_messages]\n            }\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary + ((new_console_message_set.messages.length > 1) ? ' See the \"Messages\" tab.' : ''),\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(row_name) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== row_name\n                && row_name !== this.props.editing_row\n                && !this.nameIsAnAggregate(row_name)\n                && !this.nameIsSpecial(row_name)\n            ) {\n                return { editing_row: row_name }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n                newAllRisk[ticker]['modified_at'] = new Date().getTime()\n            } else {\n                let newRisk = { \n                    modified_at: new Date().getTime(),\n                    factor: parseFloat(new_value) \n                }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewConsoleMessages(new_console_message_set) {\n        this.setState(prevState => {\n            let newAllConsoleMessages = JSON.parse(JSON.stringify(prevState.allConsoleMessages))\n            newAllConsoleMessages.push(new_console_message_set)\n            return { \n                last_console_message: new_console_message_set.summary + ((new_console_message_set.messages.length > 1) ? ' See the \"Messages\" tab.' : ''),\n                allConsoleMessages: newAllConsoleMessages }\n        })\n    }\n\n    clearLastConsoleMessage() {\n        this.setState({ last_console_message: ' ' })\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let days_ago = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return days_ago\n        }\n    }\n\n    currentQuoteExists(ticker) {\n        if (this.state.allCurrentQuotes.hasOwnProperty(ticker)) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    getClosingPrice(ticker, date, data) {\n        if (data.hasOwnProperty(ticker)) {\n            if (data[ticker].hasOwnProperty(date)) {\n                return data[ticker][date].adjusted_close\n            }\n        }\n        return undefined\n    }\n\n    getMostRecentClosingPrice(ticker, data) {\n        if (data.hasOwnProperty(ticker)) {\n            return data[ticker].current_price\n        }\n        return undefined\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getMaxBalanceableValue(target_set, sell_all_set, target_column) {\n        let include_cash = true\n        return this.getBalanceableValue(target_set, sell_all_set, target_column, include_cash)\n    }\n\n    getBalanceableValue(target_set, sell_all_set, target_column, include_cash) {\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_value = 0\n        if (include_cash && this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_value = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_value\n\n        let target_tickers = this.getTickersFromSet(target_set)\n        if ( (target_set === 'my_current_holdings' && this.state.show_current_holdings)\n            || (target_set === 'untagged' && this.state.show_untagged) \n            || (target_set !== 'my_current_holdings' && target_set !== 'untagged') ) {\n            target_tickers.forEach( function(ticker) {\n                let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (target_column === 'current_value' || target_column === 'value_at_risk' || target_column === 'only_profits') {\n                    balanceable_value += current_value\n                } else if (target_column === 'basis' || target_column === 'basis_risked') {\n                    if (sell_all_set.includes(ticker)) {\n                        balanceable_value += current_value\n                    } else {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                }\n            })\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(target_set, sell_all_of, target_column, remaining_cash) {\n        this.setState({ \n            remaining_cash: remaining_cash, \n            balance_target_set: target_set, \n            sell_all_of: sell_all_of,\n            balance_target_column: target_column \n            })\n        let column = target_column\n        let show_whatif_columns = ['current_shares', 'whatif_current_shares']\n        if (target_column === 'only_profits') {\n            column = 'basis'\n        }\n        show_whatif_columns.push(column)\n        show_whatif_columns.push('whatif_'+column)\n        if (target_column === 'only_profits') {\n            show_whatif_columns.push('profit')\n        }\n        if (target_column.includes('risk')) {\n            show_whatif_columns.push('risk_factor')\n        }\n        this.showColumns(show_whatif_columns)\n        this.onWhatifGo(target_set, sell_all_of, target_column, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(target_set, sell_all_set, target_column, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && (remaining_cash !== null || target_column === 'only_profits')\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_amount_to_balance = this.getBalanceableValue(target_set, sell_all_set, target_column, adjusting_cash)\n        if (adjusting_cash) {\n            total_amount_to_balance -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let target_tickers = this.getTickersFromSet(target_set)\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balance_target_column: target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        let risk_factors = {}\n        target_tickers.forEach(function(ticker) {\n            if (self.state.allRisk.hasOwnProperty(ticker)){\n                risk_factors[ticker] = self.state.allRisk[ticker].factor\n            } else {\n                risk_factors[ticker] = 0.20\n            }\n        })\n        let target = total_amount_to_balance / target_tickers.filter(ticker => !sell_all_set.includes(ticker)).length\n        target_tickers.forEach(function(ticker) {\n\n            let whatif_currentshares, whatif_balancedvalue\n            \n            new_whatif.values[ticker] = {}\n\n            let value_delta = 0\n            let original_currentvalue = self.getCurrentValue(ticker)\n            let original_basis = self.getBasis(ticker)\n\n            if (target_column === 'current_value' || target_column === 'basis' || target_column === 'only_profits') {\n                if (sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['current_shares'] = 0\n                    new_whatif.values[ticker]['basis'] = 0\n                    new_whatif.values[ticker]['basis_risked'] = 0\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 0\n                    if (adjusting_cash) {\n                        actual_remaining_cash += original_currentvalue \n                    }\n                    return\n                }\n            }\n\n            // balancing by value is a simple average of current values\n            if (target_column === 'current_value') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                let whatif_basis = original_basis + value_delta\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_basis\n                new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (target_column === 'basis') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_balancedbasis < 0) {\n                    whatif_balancedbasis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n\n                value_delta = whatif_balancedbasis - original_basis\n                new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n\n            } else if (target_column === 'only_profits') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let original_currentvalue = original_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                let target_delta_shares\n                let losing = (original_basis > original_currentvalue) ? true : false\n                if (losing) {\n                    whatif_currentshares = 0\n                } else {\n                    let target_delta = original_basis\n                    target_delta_shares = -1 * Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    whatif_currentshares = original_currentshares + target_delta_shares\n                }\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                if (losing || sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['basis'] = 'n/a'\n                    new_whatif.values[ticker]['basis_risked'] = 'n/a'\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 'n/a'\n                    value_delta = -1 * original_currentvalue\n                } else {\n                    let whatif_basis = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    let whatif_currentvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    value_delta = whatif_currentvalue - original_currentvalue\n                    new_whatif.values[ticker]['current_value'] = whatif_currentvalue\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_currentvalue * risk_factors[ticker]\n                }\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n        // The above applies to risk-balancing VALUE. This results in each position currently\n        // having the same dollar value at risk right now. Similarly, in order to risk-balance \n        // by BASIS, the same formula may be used except with Btot (total basis) in the numerator.\n        // This results in each position having the same amount of sunk investment dollars at risk,\n        // it is unaffected by each position's current stock price.\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (target_column === 'value_at_risk' || target_column === 'basis_risked') {\n\n            let target_nonzero_tickers = target_tickers.filter(ticker => !sell_all_set.includes(ticker))\n            \n            // determine the numerator\n            let numerator_product = 1\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= risk_factors[ticker]\n                }\n            })\n            let numerator = total_amount_to_balance * numerator_product\n\n            // determine the denominator\n            let denominator_terms = Array(target_nonzero_tickers.length).fill(1)\n            target_nonzero_tickers.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * risk_factors[ticker]\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue, 0 )\n\n            // determine the target value for each ticker; each will be different if their risk factors are different\n            let nonzero_targets = Array(target_nonzero_tickers.length).fill(0)\n            nonzero_targets[0] = numerator / denominator\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    nonzero_targets[idx] = Math.round(nonzero_targets[0] * risk_factors[target_nonzero_tickers[0]] / risk_factors[ticker])\n                }\n            })\n            let targets = Array(target_tickers.length).fill(0)\n            target_nonzero_tickers.forEach(function (nonzero_ticker, nonzero_i) {\n                let i = target_tickers.indexOf(nonzero_ticker)\n                targets[i] = nonzero_targets[nonzero_i]\n            })\n\n            // for each ticker, use its target to derive the other metrics\n            target_tickers.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                let original_currentvalue = self.getCurrentValue(ticker)\n                let original_basis = self.getBasis(ticker)\n                let value_delta, target = targets[idx]\n\n                // for values, \"target\" is the target market value for this position\n                if (target_column === 'value_at_risk') {\n\n                    let whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                    value_delta = whatif_balancedvalue - original_currentvalue\n                    let whatif_basis = original_basis + value_delta\n                    if (whatif_basis < 0) {\n                        whatif_basis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n                // for bases, \"target\" is the target basis for this position\n                } else if (target_column === 'basis_risked') {\n\n                    let original_currentshares = self.getCurrentShares(ticker)\n                    let target_delta = target - original_basis\n                    let target_delta_shares\n                    if (target === 0) {\n                        new_whatif.values[ticker]['current_shares'] = 0\n                        new_whatif.values[ticker]['basis'] = 0\n                        new_whatif.values[ticker]['basis_risked'] = 0\n                        new_whatif.values[ticker]['current_value'] = 0\n                        new_whatif.values[ticker]['value_at_risk'] = 0\n                        value_delta = -1 * original_currentvalue\n                    } else {\n                        if (target_delta >= 0) {\n                            target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        } else {\n                            target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        }\n                        let whatif_currentshares = original_currentshares + target_delta_shares\n                        new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                        let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                        if (whatif_balancedbasis < 0) {\n                            whatif_balancedbasis = 0\n                        }\n                        new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                        new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n        \n                        value_delta = whatif_balancedbasis - original_basis\n                        new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n        \n                        new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n                    }\n                }\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['value_at_risk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balance_target_column: new_whatif.balance_target_column })\n    }\n\n    getCurrentHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] !== 0).map(holding => holding[0])\n    }\n\n    getPreviousHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] === 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    getTickersFromSet(set) {\n        let tickers = []\n        if (set === 'my_current_holdings') {\n            tickers = [...this.getCurrentHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (set === 'untagged') {\n            tickers = [...this.getUntagged()]\n        } else {\n            tickers = this.state.allTags[set]\n        }\n        return tickers\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'quote_date', 'volume', 'dollar_volume']\n        let holdings_columns = ['start_date', 'current_shares', 'current_value', 'percent_value', 'value_at_risk', 'basis', 'basis_risked', 'realized_gains', 'percent_basis', 'profit', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'profit' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if ( (sort_column === 'profit' || sort_column === 'percent_profit') && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(a)) {\n                            value_a = self.state.allPositions[a]['basis'] * self.state.allRisk[a]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'profit' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if ( (sort_column === 'profit' || sort_column === 'percent_profit') && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(b)) {\n                            value_b = self.state.allPositions[b]['basis'] * self.state.allRisk[b]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sort_column === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : (a === 'cash') ? 0 : 0.20\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : (b === 'cash') ? 0 : 0.20\n\n            } else if (sort_column === 'risk_factor_modified') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].modified_at : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].modified_at : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_current_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getCurrentHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_previous_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getPreviousHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['start_date'] = self.state.allPositions[ticker].start_date\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['start_date'] = 'n/a'\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['start_date'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        let all_categories = ['always', 'stock-specific', 'holdings', 'performance']\n        let all_columns_by_category = {}\n        all_categories.forEach(function(category_name) {\n            let this_category_columns = JSON.parse(JSON.stringify(all_columns_namesorted)).filter(column => column.category === category_name)\n            all_columns_by_category[category_name] = this_category_columns\n        })\n\n        const row_popover = (\n            <Popover id=\"row-popover\">\n                <Popover.Title as=\"h3\">Included Rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show current holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_current_holdings\" name=\"show_current_holdings\" type=\"checkbox\" checked={this.state.show_current_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_current_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show previous holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_previous_holdings\" name=\"show_previous_holdings\" type=\"checkbox\" checked={this.state.show_previous_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_previous_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"column-popover\">\n                <Popover.Title as=\"h3\">Included Columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {Object.keys(all_columns_by_category).filter(key => key !== 'always').map(key => (\n                        <div key={key} id=\"column-category\">\n                            <div className=\"strong\">{key}</div>\n                            <ul>\n                                {all_columns_by_category[key].map(column => (\n                                    <li key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name)} className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</li>\n                                ))}\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n\n        const general_settings_popover = (\n            <Popover id=\"general-settings-popover\">\n                <Popover.Title as=\"h3\">General Settings:</Popover.Title>\n                <Popover.Content>\n                <div id=\"general-settings-control\">\n                    <div id=\"baseline-control\">\n                        <label htmlFor=\"baseline\">performance baseline:</label>\n                        <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                            <option value=\"zero_pct_gain\">0% gain</option>\n                            <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                        </select>\n                    </div>\n                    <div id=\"performance-control\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show performance only if achieved:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"show_only_achieved_performance\" name=\"show_only_achieved_performance\" type=\"checkbox\" checked={this.state.show_only_achieved_performance} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"show_only_achieved_performance\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"recency-control\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show error if quote is not from today:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"error_if_not_todays_quote\" name=\"error_if_not_todays_quote\" type=\"checkbox\" checked={this.state.error_if_not_todays_quote} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"error_if_not_todays_quote\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const GeneralSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={general_settings_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; General</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate, highlight_column}) => (\n            <GridHeaderRow\n                highlight_column={highlight_column}\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                quote_date={row_data.quote_date}\n                volume={row_data.volume}\n                basis={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                         || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                         ? row_data.basis \n                         : 'n/a'}\n                start_date={row_data.start_date}\n                current_shares={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                  || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                  ? row_data.current_shares \n                                  : 'n/a'}\n                current_value={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                 || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                 ? row_data.current_value \n                                 : 'n/a'}\n                realized_gains={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                  || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                  ? row_data.realized_gains \n                                  : 'n/a'}\n                risk_factor={row_data.risk_factor}\n                risk_factor_modified={row_data.risk_factor_modified}\n                performance_numbers={row_data.performance_numbers}\n                error_if_not_todays_quote={this.state.error_if_not_todays_quote}\n                show_only_achieved_performance={this.state.show_only_achieved_performance}\n                baseline={row_data.baseline}\n                style_realized_performance={row_data.style_realized_performance}\n                total_value={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                               || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                               ? row_data.total_value \n                               : 'n/a'}\n                total_basis={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                               || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                               ? row_data.total_basis \n                               : 'n/a'}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tags={row_data.on_delete_tags}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                on_escape_key={this.onEscapeKey}\n            />\n        )\n\n        // if an old quote exists and if this is an error, the grand total becomes an error too\n        let a_quote_is_old = false, aggr_total_value, aggr_basis \n        sorted_tickers.forEach(function(ticker) {\n            if (a_quote_is_old === false \n                && ticker !== 'cash' \n                && !self.getIndicies().includes(ticker) \n                && self.daysAgo(self.state.allCurrentQuotes[ticker].quote_date) >= 1) {\n                    a_quote_is_old = true\n            }\n        })\n        if (!a_quote_is_old || !self.state.error_if_not_todays_quote) {\n            aggr_total_value = self.state.aggrTotalValue['_everything_']\n            aggr_basis = self.state.aggrBasis['_everything_']\n        } else {\n            aggr_total_value = 'err.'\n            aggr_basis = self.state.aggrBasis['_everything_']\n        }\n\n        let error_performance_numbers = {\n            short_change_pct: 'err.',\n            medium_change_pct: 'err.',\n            long_change_pct: 'err.'\n        }\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let quote_exists = self.currentQuoteExists(ticker)\n            let performance_numbers_exist = self.state.allPerformanceNumbers.hasOwnProperty(ticker)\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].current_price : 'err.'\n            new_row['change_pct'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].change_pct : 'err.'\n            new_row['quote_date'] = (!quote_exists) ? 'err.' : (ticker !== 'cash' && !self.getIndicies().includes(ticker)) ? self.state.allCurrentQuotes[ticker].quote_date : 'n/a'\n            new_row['volume'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].volume : 'err.'\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['start_date'] = row_data[ticker]['start_date']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].factor : null\n            new_row['risk_factor_modified'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].modified_at : null\n            new_row['performance_numbers'] = (performance_numbers_exist) ? self.state.allPerformanceNumbers[ticker] : error_performance_numbers\n            new_row['baseline'] = self.state.baseline\n            new_row['style_realized_performance'] = (Object.entries(self.state.allPositions).filter(position => position[0] !== 'cash' && position[1].current_shares).length) ? true : false\n            new_row['total_value'] = aggr_total_value\n            new_row['total_basis'] = aggr_basis\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tags'] = self.onDeleteTags\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n                // if an old quote exists within this aggregate and if this is an error, the aggregate total becomes an error too\n                let quote_date\n                for (let ticker of self.state.allTags[aggr_ticker]) {\n                    let quote_exists = (self.currentQuoteExists(ticker)) ? true : false\n                    quote_date = (quote_exists) ? self.state.allCurrentQuotes[ticker].quote_date : 'err.'\n                    if (self.daysAgo(quote_date) >= 1) {\n                        break\n                    }\n                }\n\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['quote_date'] = quote_date\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['start_date'] = aggr_row_data[aggr_ticker]['start_date']\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['risk_factor_modified'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['style_realized_performance'] = false\n                new_row['total_value'] = self.state.aggrTotalValue[aggr_ticker]\n                new_row['total_basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tags'] = self.onDeleteTags\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n        let all_ticker_rows = all_row_data.filter(row_data => !row_data.is_aggregate)\n        let all_aggregate_rows = all_row_data.filter(row_data => row_data.is_aggregate)\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"left-side\">\n                        <div id=\"input-controls\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                all_current_quotes={this.state.allCurrentQuotes}\n                                all_monthly_quotes={this.state.allMonthlyQuotes}\n                                all_month_end_dates={this.state.allMonthEndDates}\n                                all_positions={this.state.allPositions}\n                                all_transactions={this.state.allTransactions}\n                                all_risk={this.state.allRisk}\n                                show_current_holdings={this.state.show_current_holdings}\n                                show_previous_holdings={this.state.show_previous_holdings}\n                                show_tagged={this.state.show_tagged}\n                                show_untagged={this.state.show_untagged}\n                                show_cash={this.state.show_cash}\n                                baseline_name={this.state.baseline.name}\n                                get_balanceable_value={this.getMaxBalanceableValue}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tags={this.onDeleteTags}\n                                on_delete_transaction={this.onDeleteTransaction}\n                                on_new_transaction={this.onNewTransaction}\n                                on_import_transactions={this.onImportTransactions}\n                                on_new_cash={this.onNewCash}\n                                create_console_message_set={this.createConsoleMessageSet}\n                                clear_last_console_message={this.clearLastConsoleMessage}\n                                all_console_messages={this.state.allConsoleMessages}\n                                on_new_console_messages={this.onNewConsoleMessages}\n                                on_whatif_submit={this.onWhatifSubmit}\n                            />\n                        </div>\n                        <div id=\"last-console-message\">\n                            {this.state.last_console_message && this.state.last_console_message.length ? (\n                            <div className={ (this.state.last_console_message.startsWith('ERROR')) ? 'warning' : ''}>{this.state.last_console_message}</div>\n                            ) : null }\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"page-settings\">\n                            <GeneralSettings />\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={this.state.balance_target_column} />\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        {this.state.done && all_ticker_rows.length ? (\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={aggr_total_value}\n                            total_basis={aggr_basis}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                        ) : (\n                            <tr>\n                                <td className=\"no_table_data\" colSpan={this.state.shown_columns.length+1}>No stocks have been added yet. Please add them using the form on the \"Tickers\" tab.</td>\n                            </tr>\n                        ) }\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow is_aggregate={true} highlight_column={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_aggregate_rows.filter(row => row.name !== 'untagged').length ? all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            )) : (\n                                <tr>\n                                    <td className=\"no_table_data\" colSpan={this.state.shown_columns.length+1}>No tags exist yet. Please create them using the form on the \"Tags\" tab.</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}