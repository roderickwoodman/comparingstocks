{"version":3,"sources":["components/GridHeaderRow.js","components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/AddCash.js","components/DeleteTag.js","components/StatusMessages.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","map","i","key","className","onClick","e","undefined","React","Component","GridRow","state","hover","onWhatifCellClick","toggleHover","populateMemberButton","populateDeleteButton","populateCellValue","numberWithCommas","setState","symbol","is_aggr","row_name","on_remove_from_tag","disabled","special_classes","includes","membership_set","on_delete_tag","isNaN","current_shares","on_delete_ticker","change_pct","performance","performance_numbers","baseline","short_change_pct","medium_change_pct","long_change_pct","num_decimals","value","baseline_value","percent_value","percent_basis","percent_profit","prefix","suffix","adjust_decimal","performance_value","total_value","total_basis","current_price","current_value","basis","realized_gains","whatif","type","volume","length","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","row_classes","special_class","member_count","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","total_performance","styleTotalsCell","populateTotalsCellValue","AddTicker","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","handleSubmit","validateTickers","event","target","preventDefault","user_tag","user_tickers","String","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","id","onSubmit","onReset","onChange","placeholder","required","sort","filter","tag_name","AddTag","user_tags_string","handleChange","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction","validateTransaction","new_value","user_transaction","action","num_shares","parseInt","total","parseFloat","valid_transaction","on_new_transaction","size","AddCash","user_action","user_cash_amount","handleCashChange","handleActionChange","on_new_cash","DeleteTag","delete_tag","StatusMessages","all_status_messages","message","WhatIf","balanceable_value","balance_target_set","cash_treatment","cash_remaining","cash_valid","isDisabled","all_positions","all_current_quotes","new_balanceable_value","get_balanceable_value","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","user_remaining_cash","remaining_cash","on_whatif_submit","show_holdings","show_untagged","show_tagged","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","new_which_inputs","Fragment","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","allWhatifs","column_balanced","status_messages","allPerformanceNumbers","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getPositionFromTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","onToggleShowColumn","onNewTransaction","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","onNewMessages","getCurrentValue","getBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getHoldings","getAdded","getTagged","getUntagged","nameIsAnAggregate","sortTickers","stored_baseline","JSON","parse","localStorage","getItem","assign","short_pct_gain","medium_pct_gain","long_pct_gain","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_controls","control","stored_control","indexed_transaction_data","stringify","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","monthly_prices","entries","price","now","prev_short","prev_medium","prev_long","setItem","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","init_shown_columns","stored_shown_columns","aggr_position_info","aggr_performance","transactions","inflows","outflows","substr","cash_transactions","cash_transaction","cash_amount","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","prevState","new_shown_column_names","splice","findIndex","new_shown_columns","idx","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newStatusMessages","new_transaction","orig_basis","orig_current_shares","orig_realized_gains","updatedPosition","new_cash_transaction","new_cash","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","new_messages","reverse","current_cash_position","adjusting_cash","original_cash_position","total_balance_value","tickers_to_balance","new_whatif","actual_remaining_cash","target_value","whatif_shares","floor","whatif_value","original_value","holding","added_tickers","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","fromCharCode","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","untagged","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","row_popover","Popover","Title","as","Content","column_popover","PopulateHeaderRow","symbol_count","PopulateRow","all_row_data","new_row","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","ReactDOM","render","document","getElementById"],"mappings":"u7s5CAKaA,G,MAAb,YAEI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAHF,EAFvB,uEAQcE,EAAcC,GACpB,IAAIC,EAAU,GAOd,OANqB,IAAjBF,IACAE,GAAW,cAEXD,EAAYE,WAAW,aACvBD,GAAW,WAERA,IAhBf,wCAmBsBD,GACVA,EAAYE,WAAW,WACvBC,KAAKR,MAAMS,0BAEXD,KAAKR,MAAMU,eAAeL,KAvBtC,+BA2Bc,IAAD,OAEDM,EAAeH,KAAKR,MAAMW,aAC1BC,EAAcJ,KAAKR,MAAMY,YACzBC,EAAgBL,KAAKR,MAAMa,cAC3BC,EAAmBN,KAAKR,MAAMc,iBAE9BC,EAAc,GAEdC,EAAe,CACfC,KAAM,SAENT,KAAKR,MAAMW,aACXK,EAAY,aAAmB,UAE/BA,EAAY,aAAmB,OAEnCD,EAAYG,KAAKF,GAEjB,IAAIG,EAAOX,KAsBX,OArBAA,KAAKR,MAAMoB,QAAQC,SAAQ,SAASC,GAChC,IAAIC,EAAa,GACjBA,EAAU,KAAWD,EAAOL,KACR,WAAhBK,EAAOL,KAEHM,EAAU,aADVZ,EAC6B,OAEA,UAE1BW,EAAOL,KAAKV,WAAW,WACG,WAA7BY,EAAKnB,MAAMwB,cACXD,EAAU,aAAmBD,EAAOG,aAAaC,QAAQ,UAAW,iBAEpEH,EAAU,aAAmBD,EAAOG,aAAaC,QAAQ,UAAW,eAGxEH,EAAU,aAAmBD,EAAOG,aAExCV,EAAYG,KAAKK,MAIjBR,EAAYY,KAAK,SAACL,EAAOM,GAAR,OACb,wBACIC,IAAMP,EAAOL,KACba,UAAYX,EAAKhB,UAAUyB,EAAGN,EAAOL,MACrCc,QAAe,IAAJH,EAAS,SAACI,GAAD,OAAK,EAAK/B,kBAAkBqB,EAAOL,YAAQgB,GAHnE,MAIW,IAAJL,GAAUjB,EAAyDW,EAAOG,aAAhDH,EAAOG,aAAeX,EACjDQ,EAAOL,OAASL,EAAcC,EAAgB,WA3EpE,GAAmCqB,IAAMC,YCE5BC,EAAb,YAEI,WAAYpC,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTC,OAAO,GAEX,EAAKC,kBAAoB,EAAKA,kBAAkBrC,KAAvB,gBACzB,EAAKsC,YAAc,EAAKA,YAAYtC,KAAjB,gBACnB,EAAKuC,qBAAuB,EAAKA,qBAAqBvC,KAA1B,gBAC5B,EAAKwC,qBAAuB,EAAKA,qBAAqBxC,KAA1B,gBAC5B,EAAKyC,kBAAoB,EAAKA,kBAAkBzC,KAAvB,gBACzB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAK0C,iBAAmB,EAAKA,iBAAiB1C,KAAtB,gBAXT,EAFvB,iFAiBQM,KAAKR,MAAMS,4BAjBnB,oCAqBQD,KAAKqC,SAAS,CAAEP,OAAQ9B,KAAK6B,MAAMC,UArB3C,2CAyByBQ,GAAS,IAAD,OACrBC,EAAUvC,KAAKR,MAAMW,aACrBqC,EAAWxC,KAAKR,MAAMgD,SAC1B,OAAID,EAGiB,aAAbC,EAEI,4BAAQnB,IAAKmB,EAAWF,EAASC,EAASjB,UAAU,cAAcC,QAAU,SAACC,GAAQ,EAAKhC,MAAMiD,mBAAmBD,EAAUF,KAAaA,GAI1I,4BAAQjB,IAAKmB,EAAWF,EAASC,EAASjB,UAAU,cAAcoB,UAAU,GAAQJ,GAMvFtC,KAAKR,MAAMmD,gBAAgBC,SAAS,UAAa5C,KAAKR,MAAMmD,gBAAgBC,SAAS,SAAY5C,KAAKR,MAAMqD,eAAeD,SAAS,YAMjI,IAJA,4BAAQvB,IAAKmB,EAAWF,EAASC,EAASjB,UAAU,cAAcC,QAAU,SAACC,GAAQ,EAAKhC,MAAMiD,mBAAmBH,EAAQE,KAAeF,KA7C9J,2CAwDyBzC,EAAaM,GAAe,IAAD,OACxCL,EAAU,SAId,OAHIE,KAAK6B,MAAMC,QACXhC,GAAW,aAEXK,EACoB,WAAhBN,GAAoD,aAAxBG,KAAKR,MAAMgD,SAEnC,4BAAQlB,UAAWxB,EAASyB,QAAU,SAACC,GAAO,EAAKhC,MAAMsD,cAAc,EAAKtD,MAAMgD,YAAlF,UAGJ,EAGgB,WAAhB3C,GACIG,KAAKR,MAAMmD,gBAAgBC,SAAS,UACX,SAAxB5C,KAAKR,MAAMgD,UAAuBO,MAAM/C,KAAKR,MAAMwD,qBAKxD,EAHI,4BAAQ1B,UAAWxB,EAASyB,QAAU,SAACC,GAAO,EAAKhC,MAAMyD,iBAAiB,EAAKzD,MAAMgD,YAArF,OA1EpB,gCAkFc3C,GACN,IAAIC,EAAU,gBACR0C,EAAWxC,KAAKR,MAAMgD,SACtBU,EAAalD,KAAKR,MAAM0D,WACxBF,EAAiBhD,KAAKR,MAAMwD,eAC5BL,EAAkB3C,KAAKR,MAAMmD,gBAC7BQ,EAAcnD,KAAKR,MAAM4D,oBACzBC,EAAWrD,KAAKR,MAAM6D,SAc5B,QAbKrD,KAAK6B,MAAMC,OACO,WAAhBjC,GACC8C,EAAgBC,SAAS,UACb,aAAbJ,GACe,SAAbA,GAAuBO,MAAMC,KAClClD,GAAW,aAEVD,EAAYE,WAAW,aACxBD,GAAW,qBAEM,WAAhBD,GAAyC,aAAb2C,IAC7B1C,GAAW,YAEPD,GACJ,IAAK,SACDC,GAAW,cACX,MACJ,IAAK,aACGoD,EAAa,EACbpD,GAAW,cACJoD,EAAa,IACpBpD,GAAW,aAEf,MACJ,IAAK,mBACGqD,EAAYG,iBAAmB,GAAKH,EAAYG,iBAAmBD,EAASC,iBAC5ExD,GAAW,cACJqD,EAAYG,iBAAmB,GAAKH,EAAYG,iBAAmBD,EAASC,mBACnFxD,GAAW,aAEf,MACJ,IAAK,oBACGqD,EAAYI,kBAAoB,GAAKJ,EAAYI,kBAAoBF,EAASE,kBAC9EzD,GAAW,cACJqD,EAAYI,kBAAoB,GAAKJ,EAAYI,kBAAoBF,EAASE,oBACrFzD,GAAW,aAEf,MACJ,IAAK,kBACGqD,EAAYK,gBAAkB,GAAKL,EAAYK,gBAAkBH,EAASG,gBAC1E1D,GAAW,cACJqD,EAAYK,gBAAkB,GAAKL,EAAYK,gBAAkBH,EAASG,kBACjF1D,GAAW,aAMvB,OAAOA,IA1If,wCA+IsBgB,GACd,IAGI2C,EACAC,EAAOC,EAYPC,EAAeC,EAAeC,EAhB9BC,EAAS,GACTC,EAAS,GACTC,GAAiB,EAGjBC,GAAoB,EAElBC,EAAcnE,KAAKR,MAAM2E,YACzBC,EAAcpE,KAAKR,MAAM4E,YACzBC,EAAgBrE,KAAKR,MAAM6E,cAC7BrB,EAAiBhD,KAAKR,MAAMwD,eAC1BsB,EAAgBtE,KAAKR,MAAM8E,cAC7BC,EAAQvE,KAAKR,MAAM+E,MACnBC,EAAiBxE,KAAKR,MAAMgF,eAC1BC,EAASzE,KAAKR,MAAMiF,OAyC1B,OAnCIb,EADAb,MAAMuB,GACU,MAEZvB,MAAMoB,IAAgC,IAAhBA,EACN,MAEmB,QAAlBG,EAA2BA,EAAgBH,EAAc,IAAM,MAMpFN,EADAd,MAAMuB,GACU,MAEZvB,MAAMqB,IAAgC,IAAhBA,EACN,MAEmB,QAAlBE,EAA2BC,EAAQH,EAAc,IAAM,MAM5EN,EADAf,MAAMuB,IAAkBvB,MAAMwB,GACb,MAEM,IAAnBvB,EACiB,MACVuB,EAAQD,EACE,SACVC,EAAQD,EACgC,KAA7B,EAAIC,EAAQD,GAEb,EAIjBxD,EAAO4D,MACX,IAAK,SACDT,GAAiB,EACjBR,EAAe3C,EAAO2C,aACtB,MACJ,IAAK,WACDQ,GAAiB,EACjBR,EAAe3C,EAAO2C,aACtBM,EAAS,IACT,MACJ,IAAK,aACDE,GAAiB,EACjBR,EAAe3C,EAAO2C,aACtBO,EAAS,IAMjB,OAAQlD,EAAOL,MACX,IAAK,SACDiD,EAAQ1D,KAAKR,MAAMgD,SACnB,MACJ,IAAK,iBACDkB,EAAQV,EACR,MACJ,IAAK,wBAEGU,EADW,OAAXe,EACQ,MAC4B,WAA7BzE,KAAKR,MAAMwB,cACVyD,EAAOzB,gBAAsC,QAAnBA,EAA4B,EAAIA,GAE1DyB,EAAOzB,eAEnB,MACJ,IAAK,gBACDU,EAAQW,EACR,MACJ,IAAK,gBACDX,EAAQY,EACR,MACJ,IAAK,uBAEGZ,EADW,OAAXe,EACQ,MAC4B,WAA7BzE,KAAKR,MAAMwB,cACVyD,EAAOH,eAAoC,QAAlBA,EAA2B,EAAIA,GAExDG,EAAOH,cAEnB,MACJ,IAAK,gBACDZ,EAAQE,EACR,MACJ,IAAK,QACDF,EAAQa,EACR,MACJ,IAAK,gBACDb,EAAQG,EACR,MACJ,IAAK,iBACDH,EAAQI,EACR,MACJ,IAAK,iBACDJ,EAAQc,EACR,MACJ,IAAK,aACDd,EAAQ1D,KAAKR,MAAM0D,WACnB,MACJ,IAAK,SACDQ,EAAQ1D,KAAKR,MAAMmF,OACnB,MACJ,IAAK,gBACDjB,EAAQ1D,KAAKR,MAAM6E,cAAgBrE,KAAKR,MAAMmF,OAC9C,MACJ,IAAK,mBACDjB,EAAQ1D,KAAKR,MAAM4D,oBAAoBE,iBACvCY,GAAoB,EACpBP,EAAiB3D,KAAKR,MAAM6D,SAASC,iBACrC,MACJ,IAAK,oBACDI,EAAQ1D,KAAKR,MAAM4D,oBAAoBG,kBACvCW,GAAoB,EACpBP,EAAiB3D,KAAKR,MAAM6D,SAASE,kBACrC,MACJ,IAAK,kBACDG,EAAQ1D,KAAKR,MAAM4D,oBAAoBI,gBACvCU,GAAoB,EACpBP,EAAiB3D,KAAKR,MAAM6D,SAASG,gBAK7C,GAA6B,SAAxBxD,KAAKR,MAAMgD,UAAwBxC,KAAKR,MAAMW,eAAiBH,KAAKR,MAAMqD,eAAe+B,OAC1F,OAAQ9D,EAAOL,MACX,IAAK,iBACL,IAAK,iBACL,IAAK,SACL,IAAK,gBACL,IAAK,mBACL,IAAK,oBACL,IAAK,kBACDiD,EAAQ,MAOpB,OAAc,OAAVA,GAA4B,QAAVA,EACX,IACgB,WAAhB5C,EAAO4D,KACPhB,EACCX,MAAMW,GAkBP5C,EAAO+D,eAAe,wBAA0B/D,EAAM,oBACtD4C,EACgB,WAAhB5C,EAAO4D,MAAqC,eAAhB5D,EAAO4D,MAAyC,aAAhB5D,EAAO4D,KACnE,IAEA,MAtBHT,IACInD,EAAO+D,eAAe,mBACtBnB,GAASoB,KAAKC,IAAI,GAAIjE,EAAOkE,gBAE7Bd,GAAkD,kBAA7BlE,KAAKR,MAAM6D,SAAS5C,OACzCiD,GAAgBC,GAEhBD,EAAMuB,WAAWC,QAAQ,OACzBxB,GAASoB,KAAKK,MAAML,KAAKC,IAAI,GAAItB,GAAgBC,GAASoB,KAAKC,IAAI,GAAItB,IAAe2B,QAAQ3B,KAGlGC,GAAS,GACTK,EAAUjD,EAAOL,KAAKV,WAAW,YAA2C,WAA7BC,KAAKR,MAAMwB,cAA8B,IAAM+C,EAASA,GAC/E/D,KAAKoC,iBAAiBsB,GAASM,EAExC,IAAMD,EAAS/D,KAAKoC,iBAAiB0C,KAAKO,IAAI3B,IAAUM,KAvUvF,uCAkVqBsB,GACb,OAAOA,EAAEL,WAAW/D,QAAQ,wBAAyB,OAnV7D,+BAsVc,IAAD,OACCqB,EAAUvC,KAAKR,MAAMW,aAEvBoF,EAAc,eAClBvF,KAAKR,MAAMmD,gBAAgB9B,SAAQ,SAAS2E,GAClB,UAAlBA,IACAD,GAAe,sBAEG,SAAlBC,IACAD,GAAe,qBAEG,cAAlBC,IACAD,GAAe,6BAIvB,IAAIE,EAAezF,KAAKR,MAAMqD,eAAe+B,OAEzCjE,EAAOX,KACX,OACI,wBAAIsB,UAAYiE,GACZ,4BACME,EAAezF,KAAKR,MAAMqD,eAAe1B,KAAI,SAAAmB,GAAM,OAAI,EAAKL,qBAAqBK,MAAYtC,KAAKR,MAAMmD,gBAAgBiC,OAAS,GAAK,KAE1I5E,KAAKR,MAAMoB,QAAQO,KAAI,SAASL,GAC9B,MAAoB,WAAhBA,EAAOL,KAEH,wBAAIY,IAAKP,EAAOL,KAAMa,UAAYX,EAAKhB,UAAUmB,EAAOL,MAAQiF,aAAc/E,EAAKqB,YAAa2D,aAAchF,EAAKqB,aAAerB,EAAKwB,kBAAkBrB,GAAWyB,GAAWkD,EAAe,IAAIA,EAAa,IAAM,GAAM9E,EAAKuB,qBAAqBpB,EAAOL,KAAM8B,IAE/PzB,EAAOL,KAAKV,WAAW,WAE1B,wBAAIsB,IAAKP,EAAOL,KAAMa,UAAYX,EAAKhB,UAAUmB,EAAOL,MAAQc,QAAWT,EAAOL,KAAKV,WAAW,WAAc,SAACyB,GAAD,OAAKb,EAAKoB,0BAAsBN,GAAcd,EAAKwB,kBAAkBrB,GAAWH,EAAKuB,qBAAqBpB,EAAOL,KAAM8B,IAIvO,wBAAIlB,IAAKP,EAAOL,KAAMa,UAAYX,EAAKhB,UAAUmB,EAAOL,OAAUE,EAAKwB,kBAAkBrB,GAAWH,EAAKuB,qBAAqBpB,EAAOL,KAAM8B,YAzXvK,GAA6Bb,IAAMC,WAmYnCC,EAAQgE,aAAe,CACnBxC,oBAAqB,CACjBE,iBAAkB,EAClBC,kBAAmB,EACnBC,gBAAiB,IC1YlB,IAAMqC,EAAb,iLAIQ,IAAM1B,EAAcnE,KAAKR,MAAM2E,YACzBC,EAAcpE,KAAKR,MAAM4E,YACzB0B,EAAoB9F,KAAKR,MAAMsG,kBAErC,SAAS1D,EAAiBkD,GACtB,OAAOA,EAAEL,WAAW/D,QAAQ,wBAAyB,KAqCzD,SAAS6E,EAAgBjF,GACrB,IAAIhB,EAAU,GACd,OAAQgB,GACJ,IAAK,gBACL,IAAK,gBACL,IAAK,QACL,IAAK,gBACL,IAAK,mBACL,IAAK,oBACL,IAAK,kBACDhB,GAAW,SACX,MACJ,QACIA,EAAU,GAGlB,OAAOA,EAGX,OACI,4BACI,6BACEE,KAAKR,MAAMoB,QAAQO,KAAI,SAAAL,GAAM,OAC/B,wBAAIO,IAAKP,EAAOL,KAAMa,UAAYyE,EAAgBjF,EAAOL,OAzDjE,SAAiCK,GAC7B,IAAI4C,EACJ,OAAQ5C,EAAOL,MACX,IAAK,gBACDiD,EAAQ,IAAMtB,EAAiB0C,KAAKK,MAAMhB,IAC1C,MACJ,IAAK,gBACDT,EAASS,EAAe,OAAS,MACjC,MACJ,IAAK,QACDT,EAAQ,IAAMtB,EAAiB0C,KAAKK,MAAMf,IAC1C,MACJ,IAAK,gBACDV,EAASU,EAAe,OAAS,MACjC,MACJ,IAAK,mBACDV,GAASoB,KAAKK,MAAM,GAAKW,EAAkBxC,kBAAoB,IAAI8B,QAAQ,GAAK,IAChF,MACJ,IAAK,oBACD1B,GAASoB,KAAKK,MAAM,GAAKW,EAAkBvC,mBAAqB,IAAI6B,QAAQ,GAAK,IACjF,MACJ,IAAK,kBACD1B,GAASoB,KAAKK,MAAM,GAAKW,EAAkBtC,iBAAmB,IAAI4B,QAAQ,GAAK,IAKvF,OAAc,OAAV1B,GAA4B,QAAVA,EACX,IAEAA,EA2B4DsC,CAAwBlF,YArE3G,GAAmCY,IAAMC,WCA5BsE,EAAb,YAEI,WAAYzG,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTqE,oBAAqB,GACrBC,WAAY,YAEhB,EAAKC,oBAAsB,EAAKA,oBAAoB1G,KAAzB,gBAC3B,EAAK2G,gBAAkB,EAAKA,gBAAgB3G,KAArB,gBACvB,EAAK4G,YAAc,EAAKA,YAAY5G,KAAjB,gBACnB,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,gBACpB,EAAK8G,gBAAkB,EAAKA,gBAAgB9G,KAArB,gBAVR,EAFvB,iFAewB+G,GAChBzG,KAAKqC,SAAS,CAAE6D,oBAAqBO,EAAMC,OAAOhD,UAhB1D,sCAmBoB+C,GACZzG,KAAKqC,SAAS,CAAE8D,WAAYM,EAAMC,OAAOhD,UApBjD,kCAuBgB+C,GACRzG,KAAKqC,SAAS,CAAE6D,oBAAqB,OAxB7C,mCA2BiBO,GACTA,EAAME,iBACN,IAAIC,EAAW5G,KAAK6B,MAAMsE,WACtBU,EAAeC,OAAO9G,KAAK6B,MAAMqE,qBAChCa,MAAM,KACN5F,KAAI,SAAA6F,GAAG,OAAIA,EAAIC,UACf9F,KAAI,SAAA6F,GAAG,OAAIA,EAAIE,iBACf/F,KAAI,SAAA6F,GAAG,OAAIA,EAAI9F,QAAQ,UAAW,OACvClB,KAAKwG,gBAAgBI,EAAUO,MAAMC,KAAK,IAAIC,IAAIR,OAnC1D,sCAsCoBS,EAAKC,GACjB,IAAIC,EAAiB,GACjBC,EAAsB,GACtB9G,EAAOX,KACXuH,EAAQ1G,SAAQ,SAAS6G,GAErB,GAAK/G,EAAKnB,MAAMmI,WAAW/E,SAAS8E,GAI7B,GAAI/G,EAAKnB,MAAMoI,SAASN,GAAK1E,SAAS8E,GAC7B,aAARJ,EACAG,EAAoB/G,KAAK,iBAAmBgH,EAAS,4BAErDD,EAAoB/G,KAAK,iBAAmBgH,EAAS,mCAAoCJ,EAAK,UAI/F,CACH,IAAIO,EAAiB,GACrBC,OAAOC,KAAKpH,EAAKnB,MAAMoI,UAAU/G,SAAQ,SAASyG,GAClC,aAARA,IACAO,EAAiBA,EAAeG,OAAOrH,EAAKnB,MAAMoI,SAASN,QAGvD,aAARA,GAAsBO,EAAejF,SAAS8E,GAC9CD,EAAoB/G,KAAK,iBAAmBgH,EAAS,kDAEzC,aAARJ,EACAG,EAAoB/G,KAAK,UAAYgH,EAAS,wBAE9CD,EAAoB/G,KAAK,UAAYgH,EAAS,+BAAiCJ,EAAM,MAEzFE,EAAe9G,KAAKgH,SA1BxBD,EAAoB/G,KAAK,iBAAmBgH,EAAS,uBA8B7D1H,KAAKR,MAAMyI,eAAeX,EAAKE,GAC/BxH,KAAKR,MAAM0I,gBAAgBT,GAC3BzH,KAAKsG,gBA7Eb,+BAiFQ,OACI,6BAAS6B,GAAG,cACR,0BAAMC,SAAUpI,KAAKuG,aAAc8B,QAASrI,KAAKsG,aAC7C,iDACA,2BAAO5C,MAAO1D,KAAK6B,MAAMqE,oBAAqBoC,SAAUtI,KAAKoG,oBAAqBmC,YAAY,qBAAqBC,UAAQ,IAC3H,6CAEI,4BAAQ9E,MAAO1D,KAAK6B,MAAMsE,WAAYmC,SAAUtI,KAAKqG,iBACjD,4BAAQhF,IAAI,WAAWqC,MAAM,YAA7B,YACCoE,OAAOC,KAAK/H,KAAKR,MAAMoI,UAAUa,OAAOC,QAAO,SAAAC,GAAQ,MAAiB,aAAbA,KAAyBxH,KAAI,SAAAwH,GAAQ,OACjG,4BAAQtH,IAAKsH,EAAUjF,MAAOiF,GAAWA,QAIjD,6BAASrH,UAAU,aACf,2BAAOA,UAAU,2BAA2BoD,KAAK,SAAShB,MAAM,gBAAgBhB,SAA2C,KAAjC1C,KAAK6B,MAAMqE,6BAhG7H,GAA+BxE,IAAMC,WCAxBiH,EAAb,YAEI,WAAYpJ,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTgH,iBAAkB,IAEtB,EAAKC,aAAe,EAAKA,aAAapJ,KAAlB,gBACpB,EAAK4G,YAAc,EAAKA,YAAY5G,KAAjB,gBACnB,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,gBACpB,EAAKqJ,aAAe,EAAKA,aAAarJ,KAAlB,gBARL,EAFvB,0EAaiB+G,GACTzG,KAAKqC,SAAS,CAAEwG,iBAAkBpC,EAAMC,OAAOhD,UAdvD,kCAiBgB+C,GACRzG,KAAKqC,SAAS,CAAEwG,iBAAkB,OAlB1C,mCAqBiBpC,GACTA,EAAME,iBACN,IAAIqC,EAAYlC,OAAO9G,KAAK6B,MAAMgH,kBAC7B9B,MAAM,KACN5F,KAAI,SAAA6F,GAAG,OAAIA,EAAIC,UACf9F,KAAI,SAAA6F,GAAG,OAAIA,EAAIiC,iBACf9H,KAAI,SAAA6F,GAAG,OAAIA,EAAI9F,QAAQ,oBAAqB,OACjDlB,KAAK+I,aAAa5B,MAAMC,KAAK,IAAIC,IAAI2B,OA5B7C,mCA+BiBE,GACT,IAAIC,EAAc,GACd1B,EAAsB,GACtB9G,EAAOX,KACXkJ,EAAKrI,SAAQ,SAASyG,GACd3G,EAAKnB,MAAMoI,SAAS/C,eAAeyC,GACnCG,EAAoB/G,KAAK,eAAiB4G,EAAM,gCAEhDG,EAAoB/G,KAAK,QAAU4G,EAAM,2BACzC6B,EAAYzI,KAAK4G,OAGzBtH,KAAKR,MAAM4J,YAAYD,GACvBnJ,KAAKR,MAAM0I,gBAAgBT,GAC3BzH,KAAKsG,gBA7Cb,+BAiDQ,OACI,6BAAS6B,GAAG,WACR,0BAAMC,SAAUpI,KAAKuG,aAAc8B,QAASrI,KAAKsG,aAC7C,mDACA,2BAAO5C,MAAO1D,KAAK6B,MAAMgH,iBAAkBP,SAAUtI,KAAK8I,aAAcN,UAAQ,IAChF,6BAASlH,UAAU,aACf,2BAAOA,UAAU,2BAA2BoD,KAAK,SAAShB,MAAM,gBAAgBhB,SAAwC,KAA9B1C,KAAK6B,MAAMgH,0BAvD7H,GAA4BnH,IAAMC,WCArB0H,EAAb,YAEI,WAAY7J,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTyH,YAAa,IAEjB,EAAKR,aAAe,EAAKA,aAAapJ,KAAlB,gBACpB,EAAK4G,YAAc,EAAKA,YAAY5G,KAAjB,gBACnB,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,gBACpB,EAAK6J,oBAAsB,EAAKA,oBAAoB7J,KAAzB,gBARZ,EAFvB,0EAaiB+G,GACT,IAAMC,EAASD,EAAMC,OACf8C,EAAY9C,EAAOhD,MACnBjD,EAAOiG,EAAOjG,KACpBT,KAAKqC,SAAL,eAAiB5B,EAAO+I,MAjBhC,kCAoBgB/C,GACRzG,KAAKqC,SAAS,CACViH,YAAa,OAtBzB,mCA0BiB7C,GACTA,EAAME,iBACN,IAAI8C,EAAmB3C,OAAO9G,KAAK6B,MAAMyH,aACpCvC,MAAM,KACN5F,KAAI,SAAA6F,GAAG,OAAIA,EAAIC,UACf9F,KAAI,SAAA6F,GAAG,OAAIA,EAAI9F,QAAQ,kBAAmB,OAC/ClB,KAAKuJ,oBAAoBE,KAhCjC,0CAmCwBH,GAChB,IAAI7B,EAAsB,GAE1B,GAAI6B,EAAY1E,OAAS,EAErB6C,EAAoB/G,KAAK,uBAAyB4I,EAAc,0BAE7D,CAEH,IAAII,EAASJ,EAAY,GAAGL,cACb,QAAXS,GAA+B,SAAXA,GACpBjC,EAAoB/G,KAAK,kBAAoB4I,EAAY,GAAK,qCAGlE,IAAIK,EAAaC,SAASN,EAAY,KAClCvG,MAAM4G,IAAeA,EAAa,IAClClC,EAAoB/G,KAAK,uBAAyB4I,EAAY,GAAK,iCAGvE,IAAI5B,EAAS4B,EAAY,GAAGpC,cAAchG,QAAQ,UAAW,IACzDwG,IAAW4B,EAAY,GAAGpC,eAAkBlH,KAAKR,MAAMmI,WAAW/E,SAAS8E,EAAOR,gBAClFO,EAAoB/G,KAAK,kBAAoB4I,EAAY,GAAK,qBAGlE,IAAIO,EAAQC,WAAWR,EAAY,GAAGpI,QAAQ,WAAY,KAQ1D,GAPI6B,MAAM8G,IAAUA,EAAQ,EACxBpC,EAAoB/G,KAAK,wBAA0B4I,EAAY,GAAK,oCAEpEO,EAAQC,YAAYhF,KAAKK,MAAc,IAAR0E,GAAe,KAAKzE,QAAQ,KAI1DqC,EAAoB7C,OAAQ,CAG7B,IAAIiD,EAAiB,GACjBlH,EAAOX,KACX8H,OAAOC,KAAK/H,KAAKR,MAAMoI,UAAU/G,SAAQ,SAASyG,GAC9C3G,EAAKnB,MAAMoI,SAASN,GAAKzG,SAAQ,SAAS6G,GACjCG,EAAejF,SAAS8E,IACzBG,EAAenH,KAAKgH,SAI5BG,EAAejF,SAAS0G,EAAY,GAAGpC,gBACvCO,EAAoB/G,KAAK,UAAY4I,EAAY,GAAGpC,cAAgB,wBAGxE,IAAI6C,EAAoBL,EAAS,IAAMC,EAAa,IAAMjC,EAAS,KAAOmC,EAAMzE,QAAQ,GACxFqC,EAAoB/G,KAAK,gBAAkBqJ,EAAoB,4BAC/D/J,KAAKR,MAAMwK,mBAAmBD,IAMtC/J,KAAKR,MAAM0I,gBAAgBT,KA3FnC,+BA+FQ,OACI,6BAASU,GAAG,mBACR,0BAAMC,SAAUpI,KAAKuG,aAAc8B,QAASrI,KAAKsG,aAC7C,mDAEA,2BAAO7F,KAAK,cAAciD,MAAO1D,KAAK6B,MAAMyH,YAAahB,SAAUtI,KAAK8I,aAAcmB,KAAK,KAAK1B,YAAY,wBAAwBC,UAAQ,IAE5I,6BAASlH,UAAU,aACf,2BAAOA,UAAU,2BAA2BoD,KAAK,SAAShB,MAAM,kBAAkBhB,SAAmC,KAAzB1C,KAAK6B,MAAMyH,qBAvG/H,GAAoC5H,IAAMC,WCA7BuI,EAAb,YAEI,WAAY1K,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTsI,YAAa,MACbC,iBAAkB,IAEtB,EAAKC,iBAAmB,EAAKA,iBAAiB3K,KAAtB,gBACxB,EAAK4K,mBAAqB,EAAKA,mBAAmB5K,KAAxB,gBAC1B,EAAK4G,YAAc,EAAKA,YAAY5G,KAAjB,gBACnB,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,gBATL,EAFvB,gFAcuB+G,GACfzG,KAAKqC,SAAS,CAAE8H,YAAa1D,EAAMC,OAAOhD,UAflD,uCAkBqB+C,GACbzG,KAAKqC,SAAS,CAAE+H,iBAAkB3D,EAAMC,OAAOhD,UAnBvD,kCAsBgB+C,GACRzG,KAAKqC,SAAS,CAAE+H,iBAAkB,OAvB1C,mCA0BiB3D,GACTA,EAAME,iBACN,IAAIc,EAAsB,GACtB0C,EAAcnK,KAAK6B,MAAMsI,YACzBC,EAAmBN,WAAW9J,KAAK6B,MAAMuI,iBAAiBnD,OAAO/F,QAAQ,MAAO,KACpF,GAAI6B,MAAMqH,GACN3C,EAAoB/G,KAAK,uBAAyBV,KAAK6B,MAAMuI,iBAAmB,oCAC7E,CACH,IACIL,EAAoBI,EAAc,KAD1BL,YAAYhF,KAAKK,MAAyB,IAAnBiF,GAA0B,KAAKhF,QAAQ,IACvBA,QAAQ,GAAK,QAChEqC,EAAoB/G,KAAK,gBAAkBqJ,EAAoB,4BAC/D/J,KAAKR,MAAM+K,YAAYR,GACvB/J,KAAKsG,cAETtG,KAAKR,MAAM0I,gBAAgBT,KAxCnC,+BA4CQ,OACI,6BAASU,GAAG,cACR,0BAAMC,SAAUpI,KAAKuG,aAAc8B,QAASrI,KAAKsG,aAC7C,kDACI,4BAAQ5C,MAAO1D,KAAK6B,MAAM6H,OAAQpB,SAAUtI,KAAKsK,oBAC7C,4BAAQ5G,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,WAEJ,2BAAOA,MAAO1D,KAAK6B,MAAMuI,iBAAkB9B,SAAUtI,KAAKqK,iBAAkBJ,KAAK,KAAK1B,YAAY,QAAQC,UAAQ,KAEtH,6BAASlH,UAAU,aACf,2BAAOA,UAAU,2BAA2BoD,KAAK,SAAShB,MAAM,cAAchB,SAAwC,KAA9B1C,KAAK6B,MAAMuI,0BAvD3H,GAA6B1I,IAAMC,WCAtB6I,EAAb,YAEI,WAAYhL,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACT4I,WAAY,YAEhB,EAAKpE,gBAAkB,EAAKA,gBAAgB3G,KAArB,gBACvB,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,gBANL,EAFvB,6EAWoB+G,GACZzG,KAAKqC,SAAS,CAAEoI,WAAYhE,EAAMC,OAAOhD,UAZjD,mCAeiB+C,GACTA,EAAME,iBACN,IAAIC,EAAW5G,KAAK6B,MAAM4I,WACtBhD,EAAsB,GAET,aAAbb,IACAa,EAAoB/G,KAAK,QAAUkG,EAAW,2BAC9C5G,KAAKR,MAAM0I,gBAAgBT,GAC3BzH,KAAKR,MAAMsD,cAAc8D,GACzB5G,KAAKqC,SAAS,CAAEoI,WAAY,gBAxBxC,+BA6BQ,OACI,6BAAStC,GAAG,cACR,0BAAMC,SAAUpI,KAAKuG,cACjB,6CAEI,4BAAQ7C,MAAO1D,KAAK6B,MAAM4I,WAAYnC,SAAUtI,KAAKqG,iBACjD,4BAAQhF,IAAI,WAAWqC,MAAM,YAA7B,UACCoE,OAAOC,KAAK/H,KAAKR,MAAMoI,UAAUa,OAAOC,QAAO,SAAAC,GAAQ,MAAiB,aAAbA,KAAyBxH,KAAI,SAAAwH,GAAQ,OACjG,4BAAQtH,IAAKsH,EAAUjF,MAAOiF,GAAWA,QAIjD,6BAASrH,UAAU,aACf,2BAAOA,UAAU,2BAA2BoD,KAAK,SAAShB,MAAM,aAAahB,SAAkC,aAAxB1C,KAAK6B,MAAM4I,oBA1C1H,GAA+B/I,IAAMC,WCAxB+I,EAAb,iLAGQ,OACI,yBAAKvC,GAAG,2BACFnI,KAAKR,MAAMmL,oBAAoB/F,OAAS,WAAa,GACvD,yBAAKuD,GAAG,mBACNnI,KAAKR,MAAMmL,oBACRxJ,KACG,SAACyJ,EAASxJ,GACN,OAAQwJ,EAAQ3B,cAAclJ,WAAW,SACvC,uBAAGsB,IAAKD,EAAGE,UAAU,iBAAiBsJ,GACtC,uBAAGvJ,IAAKD,EAAGE,UAAU,WAAWsJ,YAZ9D,GAAoClJ,IAAMC,WCA7BkJ,EAAb,YAEI,WAAYrL,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTiJ,kBAAmB,EACnBC,mBAAoB,cACpBC,eAAgB,SAChBC,eAAgB,KAChBC,YAAY,GAEhB,EAAKpC,aAAe,EAAKA,aAAapJ,KAAlB,gBACpB,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,gBACpB,EAAKyL,WAAa,EAAKA,WAAWzL,KAAhB,gBAXH,EAFvB,iFAgByB,IAAD,OACZoL,EAAoB,EACxBhD,OAAOC,KAAK/H,KAAKR,MAAM4L,eAAevK,SAAS,SAAA6G,GAAM,OAAIoD,GAAqB,EAAKtL,MAAM4L,cAAc1D,GAAQ1E,eAAiB,EAAKxD,MAAM6L,mBAAmB3D,GAAQrD,iBACtKrE,KAAKqC,SAAS,CAAEyI,kBAAmBA,MAnB3C,mCAsBiBrE,GAAQ,IAAD,EAEKA,EAAMC,OAAtBjG,EAFW,EAEXA,KAAMiD,EAFK,EAELA,MAGX,GAAa,uBAATjD,EAA+B,CAC/B,IAAI6K,EAAwBtL,KAAKR,MAAM+L,sBAAsB7H,GAC7D1D,KAAKqC,SAAS,CAAEyI,kBAAmBQ,IAIvC,GAAa,mBAAT7K,EAA2B,CAC3B,IAAI+K,EAA4B9H,EAAMxC,QAAQ,IAAI,IAAI6F,MAAM,KAAK,GAC7D0E,EAAqB7B,SAAS4B,GAC9BE,EAA6BhI,EAAMxC,QAAQ,WAAW,IAAI6F,MAAM,KAAK,GACrE2E,EAA2B9G,QACxB4G,IAA8BE,GAC9BD,GAAsB,GACtBA,GAAsBzL,KAAK6B,MAAMiJ,kBACpC9K,KAAKqC,SAAS,CAAE6I,YAAY,IAE5BlL,KAAKqC,SAAS,CAAE6I,YAAY,IAKpClL,KAAKqC,SAAL,eAAiB5B,EAAOiD,MAhDhC,mCAmDiB+C,GACTA,EAAME,iBACN,IAAIgF,EAAsB3L,KAAK6B,MAAMoJ,eAAelE,MAAM,KAAK,GAAG7F,QAAQ,UAAW,IACjF0K,EAAgD,WAA9B5L,KAAK6B,MAAMmJ,eAA+B,KAAOpB,SAAS+B,GAChF3L,KAAKR,MAAMqM,iBAAiB7L,KAAK6B,MAAMkJ,mBAAoBa,KAvDnE,mCA2DQ,MAAsC,gBAAlC5L,KAAK6B,MAAMkJ,oBACH/K,KAAKR,MAAMsM,cACsB,aAAlC9L,KAAK6B,MAAMkJ,oBACV/K,KAAKR,MAAMuM,eAEX/L,KAAKR,MAAMwM,cAhE/B,+BAqEQ,OACI,6BAAS7D,GAAG,WACR,0BAAMC,SAAUpI,KAAKuG,aAAc8B,QAASrI,KAAKsG,aAC7C,2CACI,4BAAQ7F,KAAK,qBAAqBiD,MAAO1D,KAAK6B,MAAMkJ,mBAAoBzC,SAAUtI,KAAK8I,cACnF,4BAAQpF,MAAM,eAAd,eACA,4BAAQA,MAAM,YAAd,oBACCoE,OAAOC,KAAK/H,KAAKR,MAAMoI,UAAUa,OAAOC,QAAO,SAAApB,GAAG,MAAY,aAARA,KAAoBnG,KAAI,SAAAmG,GAAG,OAC9E,4BAAQjG,IAAKiG,EAAK5D,MAAO4D,GAAzB,QAAoCA,OALhD,4BASA,2BAAO2E,QAAQ,UAAS,2BAAOvH,KAAK,QAAQyD,GAAG,SAAS1H,KAAK,iBAAiBiD,MAAM,SAASwI,UAAQ,EAAC5D,SAAUtI,KAAK8I,aAAcqD,gBAAc,IAAjJ,4BACA,2BAAOF,QAAQ,WAAU,2BAAOvH,KAAK,QAAQyD,GAAG,UAAU1H,KAAK,iBAAiBiD,MAAM,UAAU4E,SAAUtI,KAAK8I,aAAcpG,UAAW1C,KAAKR,MAAM4M,YAAnJ,8CACA,2BAAO1H,KAAK,OAAOyD,GAAG,iBAAiB1H,KAAK,iBAAiBwJ,KAAK,KAAK3B,SAAUtI,KAAK8I,aAAcpF,MAAO1D,KAAK6B,MAAMoJ,iBADtH,0BACsKjL,KAAK6B,MAAMiJ,kBADjL,KAEA,6BAASxJ,UAAU,aACf,2BAAOA,UAAU,2BAA2BoD,KAAK,SAAShB,MAAM,WAAWhB,SAAU1C,KAAKmL,sBArFlH,GAA4BzJ,IAAMC,WCOrB0K,EAAb,YAEI,WAAY7M,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTyK,aAAc,WAElB,EAAKC,cAAgB,EAAKA,cAAc7M,KAAnB,gBALN,EAFvB,2EAUkB8M,GACVxM,KAAKqC,SAAS,CAAEiK,aAAcE,MAXtC,+BAcc,IAAD,OACL,OACI,yBAAKrE,GAAG,eACJ,6BAASA,GAAG,wBACR,0BAAM7G,UAAW,uBAAmD,YAA1BtB,KAAK6B,MAAMyK,aAA2B,YAAc,IAAM/K,QAAU,SAACC,GAAD,OAAK,EAAK+K,cAAc,aAAtI,WACA,0BAAMjL,UAAW,uBAAmD,SAA1BtB,KAAK6B,MAAMyK,aAAwB,YAAc,IAAM/K,QAAU,SAACC,GAAD,OAAK,EAAK+K,cAAc,UAAnI,QACA,0BAAMjL,UAAW,uBAAmD,iBAA1BtB,KAAK6B,MAAMyK,aAAgC,YAAc,IAAM/K,QAAU,SAACC,GAAD,OAAK,EAAK+K,cAAc,kBAA3I,gBACA,0BAAMjL,UAAW,uBAAmD,SAA1BtB,KAAK6B,MAAMyK,aAAwB,YAAc,IAAM/K,QAAU,SAACC,GAAD,OAAK,EAAK+K,cAAc,UAAnI,QACA,0BAAMjL,UAAW,uBAAmD,aAA1BtB,KAAK6B,MAAMyK,aAA4B,YAAc,IAAM/K,QAAU,SAACC,GAAD,OAAK,EAAK+K,cAAc,cAAvI,aAEJ,6BAASpE,GAAG,oBACqB,YAA5BnI,KAAK6B,MAAMyK,cACR,kBAAC,IAAMG,SAAP,KACA,kBAAC,EAAD,CACI9E,WAAY3H,KAAKR,MAAMmI,WACvBC,SAAU5H,KAAKR,MAAMoI,SACrBK,eAAgBjI,KAAKR,MAAMyI,eAC3BC,gBAAiBlI,KAAKR,MAAM0I,mBAIP,SAA5BlI,KAAK6B,MAAMyK,cACR,kBAAC,IAAMG,SAAP,KACA,kBAAC,EAAD,CACI7E,SAAU5H,KAAKR,MAAMoI,SACrBwB,YAAapJ,KAAKR,MAAM4J,YACxBlB,gBAAiBlI,KAAKR,MAAM0I,kBAEhC,kBAAC,EAAD,CACIN,SAAU5H,KAAKR,MAAMoI,SACrB9E,cAAe9C,KAAKR,MAAMsD,cAC1BoF,gBAAiBlI,KAAKR,MAAM0I,mBAIP,iBAA5BlI,KAAK6B,MAAMyK,cACZ,kBAAC,IAAMG,SAAP,KACI,kBAAC,EAAD,CACI9E,WAAY3H,KAAKR,MAAMmI,WACvBC,SAAU5H,KAAKR,MAAMoI,SACrBoC,mBAAoBhK,KAAKR,MAAMwK,mBAC/B9B,gBAAiBlI,KAAKR,MAAM0I,kBAEhC,kBAAC,EAAD,CACIqC,YAAavK,KAAKR,MAAM+K,YACxBrC,gBAAiBlI,KAAKR,MAAM0I,mBAIP,SAA5BlI,KAAK6B,MAAMyK,cACR,kBAAC,IAAMG,SAAP,KACA,kBAAC,EAAD,CACI9B,oBAAqB3K,KAAKR,MAAMmL,uBAIX,aAA5B3K,KAAK6B,MAAMyK,cACR,kBAAC,IAAMG,SAAP,KACA,kBAAC,EAAD,CACIpB,mBAAoBrL,KAAKR,MAAM6L,mBAC/BD,cAAepL,KAAKR,MAAM4L,cAC1BxD,SAAU5H,KAAKR,MAAMoI,SACrB2D,sBAAuBvL,KAAKR,MAAM+L,sBAClCO,cAAe9L,KAAKR,MAAMsM,cAC1BE,YAAahM,KAAKR,MAAMwM,YACxBD,cAAe/L,KAAKR,MAAMuM,cAC1BK,UAAWpM,KAAKR,MAAM4M,UACtBP,iBAAkB7L,KAAKR,MAAMqM,0BAjFzD,GAAgCnK,IAAMC,W,gBCDhCpB,EAAc,CAChB,CACIE,KAAM,SACNQ,aAAc,SACdyD,KAAM,UAEV,CACIjE,KAAM,iBACNQ,aAAc,SACdyD,KAAM,SACNjB,aAAc,GAElB,CACIhD,KAAM,wBACNQ,aAAc,iBACdyD,KAAM,SACNjB,aAAc,GAElB,CACIhD,KAAM,gBACNQ,aAAc,QACdyD,KAAM,WACNjB,aAAc,GAElB,CACIhD,KAAM,gBACNQ,aAAc,QACdyD,KAAM,WACNjB,aAAc,GAElB,CACIhD,KAAM,uBACNQ,aAAc,gBACdyD,KAAM,WACNjB,aAAc,GAElB,CACIhD,KAAM,gBACNQ,aAAc,qBACdyD,KAAM,aACNjB,aAAc,GAElB,CACIhD,KAAM,QACNQ,aAAc,QACdyD,KAAM,WACNjB,aAAc,GAElB,CACIhD,KAAM,gBACNQ,aAAc,qBACdyD,KAAM,aACNjB,aAAc,GAElB,CACIhD,KAAM,iBACNQ,aAAc,aACdyD,KAAM,aACNgI,qBAAqB,EACrBjJ,aAAc,GAElB,CACIhD,KAAM,iBACNQ,aAAc,WACdyD,KAAM,WACNjB,aAAc,GASlB,CACIhD,KAAM,SACNQ,aAAc,SACdyD,KAAM,SACNjB,aAAc,GAElB,CACIhD,KAAM,gBACNQ,aAAc,iBACdyD,KAAM,WACNM,eAAgB,EAChBvB,aAAc,GAElB,CACIhD,KAAM,mBACNQ,aAAc,UACdyD,KAAM,aACNjB,aAAc,GAElB,CACIhD,KAAM,oBACNQ,aAAc,SACdyD,KAAM,aACNjB,aAAc,GAElB,CACIhD,KAAM,kBACNQ,aAAc,SACdyD,KAAM,aACNjB,aAAc,IAIhBkJ,EAAwB,CAAC,SAAU,iBAAkB,gBAAiB,gBAAiB,gBAAiB,iBAAkB,mBAAoB,oBAAqB,mBAE5JC,EAAb,YAEI,WAAYpN,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTgL,mBAAoB,CAAE,OACtBC,mBAAoB,CAAE,UACtBC,UAAW,GACXC,iBAAkB,GAClBC,iBAAkB,GAClBC,aAAc,GACdC,gBAAiB,GACjBC,QAAS,CACL,SAAY,IAEhBC,WAAY,GACZrM,cAAe,SACf+J,mBAAoB,cACpBuC,gBAAiB,GACjB1B,eAAgB,KAChB2B,gBAAiB,GACjBlK,SAAU,CACN5C,KAAM,gBACN6C,iBAAkB,EAClBC,kBAAmB,EACnBC,gBAAiB,GAErBgK,sBAAuB,GACvBC,gBAAiB,GACjBC,UAAW,GACXC,aAAc,GACdC,eAAgB,GAChB9B,eAAe,EACfE,aAAa,EACbD,eAAe,EACf8B,YAAY,EACZzB,WAAW,EACX0B,iBAAiB,EACjB1N,YAAa,SACb2N,cAAc,EACdC,cAAe,GACfC,MAAM,GAEV,EAAKC,cAAgB,EAAKA,cAAcxO,KAAnB,gBACrB,EAAKyO,uBAAyB,EAAKA,uBAAuBzO,KAA5B,gBAC9B,EAAK0O,4BAA8B,EAAKA,4BAA4B1O,KAAjC,gBACnC,EAAK2O,gCAAkC,EAAKA,gCAAgC3O,KAArC,gBACvC,EAAK4O,0BAA4B,EAAKA,0BAA0B5O,KAA/B,gBACjC,EAAK6O,yBAA2B,EAAKA,yBAAyB7O,KAA9B,gBAChC,EAAK8O,oBAAsB,EAAKA,oBAAoB9O,KAAzB,gBAC3B,EAAK+O,cAAgB,EAAKA,cAAc/O,KAAnB,gBACrB,EAAKgP,kBAAoB,EAAKA,kBAAkBhP,KAAvB,gBACzB,EAAKiP,qBAAuB,EAAKA,qBAAqBjP,KAA1B,gBAC5B,EAAKkP,aAAe,EAAKA,aAAalP,KAAlB,gBACpB,EAAKmP,mBAAqB,EAAKA,mBAAmBnP,KAAxB,gBAC1B,EAAKoP,iBAAmB,EAAKA,iBAAiBpP,KAAtB,gBACxB,EAAKqP,UAAY,EAAKA,UAAUrP,KAAf,gBACjB,EAAKsP,UAAY,EAAKA,UAAUtP,KAAf,gBACjB,EAAKuP,aAAe,EAAKA,aAAavP,KAAlB,gBACpB,EAAKwP,gBAAkB,EAAKA,gBAAgBxP,KAArB,gBACvB,EAAKyP,eAAiB,EAAKA,eAAezP,KAApB,gBACtB,EAAK0P,YAAc,EAAKA,YAAY1P,KAAjB,gBACnB,EAAK2P,cAAgB,EAAKA,cAAc3P,KAAnB,gBACrB,EAAK4P,gBAAkB,EAAKA,gBAAgB5P,KAArB,gBACvB,EAAK6P,oBAAsB,EAAKA,oBAAoB7P,KAAzB,gBAC3B,EAAK8P,eAAiB,EAAKA,eAAe9P,KAApB,gBACtB,EAAK+P,WAAa,EAAKA,WAAW/P,KAAhB,gBAClB,EAAKgQ,YAAc,EAAKA,YAAYhQ,KAAjB,gBACnB,EAAKiQ,YAAc,EAAKA,YAAYjQ,KAAjB,gBACnB,EAAKkQ,SAAW,EAAKA,SAASlQ,KAAd,gBAChB,EAAKmQ,UAAY,EAAKA,UAAUnQ,KAAf,gBACjB,EAAKoQ,YAAc,EAAKA,YAAYpQ,KAAjB,gBACnB,EAAKqQ,kBAAoB,EAAKA,kBAAkBrQ,KAAvB,gBACzB,EAAKsQ,YAAc,EAAKA,YAAYtQ,KAAjB,gBAvEJ,EAFvB,iFA8EQ,IAAI2D,EAAW,GACT4M,EAAkBC,KAAKC,MAAMC,aAAaC,QAAQ,aAEpDhN,EADoB,OAApB4M,EACWnI,OAAOwI,OAAO,GAAIL,GAElB,CACPxP,KAAM,gBACN8P,eAAgB,EAChBC,gBAAiB,EACjBC,cAAe,GAIvB,IAAMC,EAAqBR,KAAKC,MAAMC,aAAaC,QAAQ,gBAChC,OAAvBK,GACA1Q,KAAKqC,SAAS,CAAEjC,YAAasQ,IAGjC,IAAMC,EAAsBT,KAAKC,MAAMC,aAAaC,QAAQ,iBAChC,OAAxBM,GACA3Q,KAAKqC,SAAS,CAAE0L,aAAc4C,IAGlC,IAAMC,EAAuBV,KAAKC,MAAMC,aAAaC,QAAQ,kBAChC,OAAzBO,GACA5Q,KAAKqC,SAAS,CAAErB,cAAe4P,IAGnC,IAAMC,EAAiBX,KAAKC,MAAMC,aAAaC,QAAQ,YAChC,OAAnBQ,GACA7Q,KAAKqC,SAAS,CAAE+K,QAASyD,IAG7B,IAAMC,EAAyBZ,KAAKC,MAAMC,aAAaC,QAAQ,oBAChC,OAA3BS,GACA9Q,KAAKqC,SAAS,CAAE8K,gBAAiB2D,IAGrC,IAAInQ,EAAOX,KAGP+Q,EAAkB,GADA,CAAC,gBAAiB,cAAe,gBAAiB,aAAc,YAAa,mBAErFlQ,SAAQ,SAASmQ,GAC3BD,EAAgBC,GAAW,KAC3B,IAAMC,EAAiBf,KAAKC,MAAMC,aAAaC,QAAQW,IAChC,OAAnBC,IACAF,EAAgBC,GAAWC,EAC3BtQ,EAAK0B,SAAL,eAAiB2O,EAAUC,QAInC,IAAIC,EAA2B,GACA,OAA3BJ,IACAI,EAA2BhB,KAAKC,MAAMD,KAAKiB,UAAUL,KAGzD,IAAIM,EAAyBC,EAAQ,IAAoCC,sBACrEC,EAA6B,GACjCH,EAAuBvQ,SAAQ,SAAS2Q,GACpC,IAAIC,EAAkB9Q,EAAKwN,uBAAuBqD,EAAU,gBAAgB,eAC5ED,EAA2BE,GAAmBD,KAGlD,IAAIE,EAAyBL,EAAQ,IAAoCM,sBACrEC,EAA6B,GAC7BC,EAAoB,GACxBH,EAAuB7Q,SAAQ,SAAS2Q,GACpC,IAAIC,EAAkB9Q,EAAKwN,uBAAuBqD,EAAU,aAAa,cAEzE,GADAI,EAA2BH,GAAmBD,EACtB,WAApBC,EAA8B,CAC9B,IAAIK,EAAkBF,EAA2BH,GAAiB,gCAC9DM,EAAiBjK,OAAOkK,QAAQF,GAAiB3Q,KAAI,SAAA8Q,GAAK,OAAInI,WAAWmI,EAAM,GAAG,yBAClFC,EAAMH,EAAe,GACrBI,EAAaJ,EAAe,GAC5BK,EAAcL,EAAe,IAC7BM,EAAYN,EAAe,IAC/BF,EAAiB,kBAAwBK,EAAMC,GAAcD,EAAM,IACnEL,EAAiB,mBAAyBK,EAAME,GAAeF,EAAM,IACrEL,EAAiB,iBAAuBK,EAAMG,GAAaH,EAAM,IACjE7O,EAAQ,iBAAuBwO,EAAiB,iBAChDxO,EAAQ,kBAAwBwO,EAAiB,kBACjDxO,EAAQ,gBAAsBwO,EAAiB,gBAC/ClR,EAAK0B,SAAS,CAAEgB,SAAUA,IAC1B+M,aAAakC,QAAQ,WAAYpC,KAAKiB,UAAU9N,QAIxDrD,KAAKqC,SAAS,CAAEwP,kBAAmBA,IAEnC,IAAIlK,EAAa,GACjBG,OAAOC,KAAKmJ,GAA0BrQ,SAAQ,SAAS6G,GAC9CC,EAAW/E,SAAS8E,IAAsB,SAAXA,GAChCC,EAAWjH,KAAKgH,MAGxBI,OAAOC,KAAKwJ,GAA4B1Q,SAAQ,SAAS6G,GAChDC,EAAW/E,SAAS8E,IACrBC,EAAWjH,KAAKgH,MAGxBI,OAAOC,KAAK6J,GAA4B/Q,SAAQ,SAAS6G,GAChDC,EAAW/E,SAAS8E,IACrBC,EAAWjH,KAAKgH,MAIxB,IAAI6K,EAAe,GACfC,EAAmB,GACnBC,EAAmB,GACnBC,EAAwB,GAE5B/K,EAAW9G,SAAQ,SAAS6G,GAExB,GAAIwJ,EAAyBrM,eAAe6C,GAAS,CACjD,IAAIiL,EAAc,IAClBA,EAAchS,EAAKyN,4BAA4B8C,EAAyBxJ,KAC7D,OAAaA,EACxB6K,EAAa7K,GAAUiL,EAI3B,GAAIpB,EAA2B1M,eAAe6C,GAAS,CACnD,IAAIkL,EAAkB,GAClBC,EAActB,EAA2B7J,GAAQ,gBACrDkL,EAAe,OAAalL,EAC5BkL,EAAe,cAAoB9I,YAAYhF,KAAKK,MAAM,IAAM2E,WAAW+I,EAAY,eAAiB,KAAKzN,QAAQ,IACrHwN,EAAe,OAAa9I,YAAYhF,KAAKK,MAAM,IAAM2E,WAAW+I,EAAY,gBAAkB,KAAKzN,QAAQ,IAC/GwN,EAAe,WAAiB9I,YAAYhF,KAAKK,MAAM,IAAM2E,WAAW+I,EAAY,sBAAsBC,MAAM,GAAI,KAAO,KAAK1N,QAAQ,IACxIwN,EAAe,OAAahJ,SAASiJ,EAAY,eACjDL,EAAiB9K,GAAUkL,EAI/B,GAAIhB,EAA2B/M,eAAe6C,GAAS,CACnD,IAAIqL,EAAkB,GAClBjB,EAAkBF,EAA2BlK,GAAQ,gCACzDqL,EAAe,OAAarL,EAC5BqL,EAAe,eAAqBjL,OAAOkK,QAAQF,GAAiB3Q,KAAI,SAAA8Q,GAAK,OAAInI,WAAWmI,EAAM,GAAG,yBACrGQ,EAAiB/K,GAAUqL,EAG3B,IAAIC,EAAiB,GACjBC,EAAaF,EAAe,eAAmB,GAI/CG,GAAqBD,EAHDF,EAAe,eAAmB,IAGCE,EAAa,IACpEE,GAAsBF,EAHDF,EAAe,eAAmB,KAGEE,EAAa,IACtEG,GAAoBH,EAHDF,EAAe,eAAmB,KAGAE,EAAa,IAChD,mBAAlB5P,EAAS5C,MACTuS,EAAc,iBAAuBE,EAAoBrB,EAAkBvO,iBAC3E0P,EAAc,kBAAwBG,EAAqBtB,EAAkBtO,kBAC7EyP,EAAc,gBAAsBI,EAAmBvB,EAAkBrO,kBAEzEwP,EAAc,iBAAuBE,EACrCF,EAAc,kBAAwBG,EACtCH,EAAc,gBAAsBI,GAExCV,EAAsBhL,GAAUsL,MAYxCR,EAAgB,KAPO,CACnBa,OAAQ,EACRnQ,WAAY,EACZmB,cAAe,EACf/B,OAAQ,OACRqC,OAAQ,GAaZ,GAHA+N,EAAqB,KALC,CAClBpP,iBAAkB,EAClBC,kBAAmB,EACnBC,gBAAiB,GAKjB0N,EAAyBrM,eAAe,QAAS,CACjD,IAAI8N,EAAc,IAClBA,EAAchS,EAAK0N,gCAAgC6C,EAAwB,OAChE,OAAa,OACxBqB,EAAY,KAAWI,EAI3B,IAAIW,EAAqB,GACnBC,EAAuBrD,KAAKC,MAAMC,aAAaC,QAAQ,kBAEzDiD,EADyB,OAAzBC,EACkB,YAAOA,GAEJhT,EAAYmI,QAAO,SAAA5H,GAAM,OAAI6L,EAAsB/J,SAAS9B,EAAOL,SAG5F,IAAI+S,EAAqBtD,KAAKC,MAAMD,KAAKiB,UAAUnR,KAAKsO,0BAA0BuC,EAAgB0B,EAAcC,EAAkBzB,EAAe,cAAmBA,EAAe,aAC/K0C,EAAmBvD,KAAKC,MAAMD,KAAKiB,UAAUnR,KAAKuO,yBAAyBsC,EAAgB6B,KAE/F1S,KAAKqC,SAAS,CAAE0K,UAAWpF,EACXuF,aAAcqF,EACdvF,iBAAkBwF,EAClBvF,iBAAkBwF,EAClBjF,sBAAuBkF,EACvBhF,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,EACjBzF,cAAesF,EACfrF,MAAM,MAhS9B,kDAiUgCyF,GACxB,IAAmDhK,EAAQC,EAAYjC,EAAQhE,EAA3EiQ,EAAU,EAAGC,EAAW,EAAG5Q,EAAiB,EAqBhD,OAnBA0Q,EAAa7S,SAAQ,SAASyI,GAAc,IAAD,EACDA,EAAYvC,MAAM,KADjB,mBACtC2C,EADsC,KAC9BC,EAD8B,KAClBjC,EADkB,KACVhE,EADU,KAEvCiG,EAAaC,SAASD,GACtBjG,EAAQoG,WAAWpG,EAAMmQ,OAAO,IACjB,QAAXnK,GACAkK,GAAYlQ,EACZV,GAAkB2G,GACA,SAAXD,IACPiK,GAAWjQ,EACXV,GAAkB2G,MAGR,CACdrH,OAAQoF,EACR1E,eAAgBA,EAChBuB,MAAOO,KAAKK,MAAOyO,EAAWD,EAAWC,EAAWD,EAAU,GAC9DnP,eAAgBM,KAAKK,MAAOwO,EAAUC,GAA+B,IAAnB5Q,EAAwB2Q,EAAUC,EAAW,MApV3G,sDA0VoCE,GAC5B,IAAepK,EAAQhG,EAAnBmG,EAAQ,EAkBZ,OAhBAiK,EAAkBjT,SAAQ,SAASkT,GAAmB,IAAD,EAC/BA,EAAiBhN,MAAM,KADQ,mBAChD2C,EADgD,KACxChG,EADwC,KAEjD,IAAIsQ,EAAclK,WAAWpG,EAAMmQ,OAAO,IAC3B,QAAXnK,EACAG,GAASmK,EACS,WAAXtK,IACPG,GAASmK,MAGC,CACd1R,OAAQ,OACRU,eAAgB6G,EAChBtF,MAAOsF,EACPrF,eAAgB,KA1W5B,gDAgX8BoD,EAAUwD,EAAe6I,EAAYnI,EAAeM,GAE1E,IAAI8H,EAA8B,OAAlBpI,EAA0B9L,KAAK6B,MAAMiK,cAAgBA,EACjEqI,EAAsB,OAAd/H,EAAsBpM,KAAK6B,MAAMuK,UAAYA,EAErDgI,EAAyB,GAAIC,EAA4B,GAAIC,EAAyB,GA0C1F,OAzCAF,EAAsB,aAAmB,EACzCC,EAAyB,aAAmB,EAC5CC,EAAsB,aAAmB,EACzCxM,OAAOC,KAAKH,GAAU/G,SAAQ,SAASyG,GACnC+M,EAA0B/M,GAAO,MACjC8M,EAAuB9M,GAAO,MAC9BgN,EAAuBhN,GAAO,MAC9BQ,OAAOC,KAAKqD,GAAevK,SAAQ,SAAS6G,GACpCE,EAASN,GAAK1E,SAAS8E,KACvB2M,EAA0B/M,GAAO,EACjC8M,EAAuB9M,GAAO,EAC9BgN,EAAuBhN,GAAO,SAI1CQ,OAAOkK,QAAQ5G,GAAevK,SAAQ,SAAS0T,GAC3C,IAAI7M,EAAS6M,EAAc,GACvBC,EAAeD,EAAc,GAAd,MACfE,EAAwBF,EAAc,GAAd,eACxBG,EAAgBH,EAAc,GAAd,eAChBI,EAAeV,EAAWvM,GAAX,eAAuC,GAC1C,SAAXA,GAAqBwM,GAAyB,SAAXxM,GAAqByM,KACzDC,EAAsB,cAAoBI,EAAeC,EACzDJ,EAAyB,cAAoBI,EAC7CH,EAAsB,cAAoBK,EAAeD,EACzD5M,OAAOC,KAAKH,GAAU/G,SAAQ,SAASyG,GAC/BM,EAASN,GAAK1E,SAAS8E,KACvB0M,EAAuB9M,IAAQkN,EAAeC,EAC9CJ,EAA0B/M,IAAQwC,WAAW2K,GACzCL,EAAuB9M,GAAO,IAC9B8M,EAAuB9M,GAAO,GAElCgN,EAAuBhN,IAAQqN,EAAeD,UAK1DN,EAAsB,aAAmB,IACzCA,EAAsB,aAAmB,GAGtC,CAACA,EAAwBC,EAA2BC,KA/ZnE,+CAka6B1M,EAAUgN,GAE/B,IAAIC,EAA0B,CAC9BA,aAA0C,CACtCvR,iBAAkB,EAClBC,kBAAmB,EACnBC,gBAAiB,EACjBsR,YAAa,IAGbC,EAAyB,GA2C7B,OA1CAjN,OAAOkN,OAAOpN,GAAU/G,SAAQ,SAASoU,GACrCA,EAAiBpU,SAAQ,SAAA6G,GAAM,OAAIqN,EAAuBrU,KAAKgH,UAEnEqN,EAAyB5N,MAAMC,KAAK,IAAIC,IAAI0N,KAErBlU,SAAQ,SAAS6G,GAEpC,IAAIwN,EAAQN,EAAwBlN,GAAxB,iBACRyN,EAASP,EAAwBlN,GAAxB,kBACT0N,EAAOR,EAAwBlN,GAAxB,gBAEXmN,EAAuB,aAAiBvR,kBAAoB4R,EAC5DL,EAAuB,aAAiBtR,mBAAqB4R,EAC7DN,EAAuB,aAAiBrR,iBAAmB4R,EAC3DP,EAAuB,aAAiBC,aAAe,EAEvDhN,OAAOC,KAAKH,GAAU/G,SAAQ,SAASyG,GACnC,GAAIuN,EAAwBhQ,eAAeyC,IAAQM,EAASN,GAAK1E,SAAS8E,GACtEmN,EAAwBvN,GAAKhE,kBAAoB4R,EACjDL,EAAwBvN,GAAK/D,mBAAqB4R,EAClDN,EAAwBvN,GAAK9D,iBAAmB4R,EAChDP,EAAwBvN,GAAKwN,aAAe,OACzC,GAAIlN,EAASN,GAAK1E,SAAS8E,GAAS,CACvC,IAAI2N,EAAuB,GAC3BA,EAAoB,iBAAuBH,EAC3CG,EAAoB,kBAAwBF,EAC5CE,EAAoB,gBAAsBD,EAC1CC,EAAoB,YAAkB,EACtCR,EAAwBvN,GAAO+N,SAK3CvN,OAAOkK,QAAQ6C,GAAyBhU,SAAQ,SAASyU,GACrD,IAAIhO,EAAMgO,EAAgB,GACtBnS,EAAcmS,EAAgB,GAClCxN,OAAOC,KAAK5E,GAAauF,QAAO,SAAA6M,GAAU,MAAmB,gBAAfA,KAA8B1U,SAAQ,SAAS0U,GACzF,IAAI7R,EAASP,EAAW,YAAmBA,EAAYoS,GAAcpS,EAAY2R,YAAc,MAC/FD,EAAwBvN,GAAKiO,GAAc7R,QAI5CmR,IAvdf,oCA0dkBpO,GAGV,GAAa,aAFFA,EAAMC,OAAOjG,KAEC,CACrB,IAAI+U,EAAoB/O,EAAMC,OAAOhD,MACjC+R,EAAe,GACnBA,EAAY,KAAWD,EACG,mBAAtBA,GACAC,EAAY,iBAAuBzV,KAAK6B,MAAM2L,sBAAsB,UAAjC,iBACnCiI,EAAY,kBAAwBzV,KAAK6B,MAAM2L,sBAAsB,UAAjC,kBACpCiI,EAAY,gBAAsBzV,KAAK6B,MAAM2L,sBAAsB,UAAjC,kBAElCiI,EAAY,iBAAuB,EACnCA,EAAY,kBAAwB,EACpCA,EAAY,gBAAsB,GAGtCrF,aAAakC,QAAQ,WAAYpC,KAAKiB,UAAUsE,IAChDzV,KAAKqC,SAAS,CAAEgB,SAAUoS,OA5etC,wCAgfsBhP,GAAQ,IAAD,EACfC,EAASD,EAAMC,OACf8C,EAA4B,aAAhB9C,EAAOhC,KAAsBgC,EAAOgP,QAAUhP,EAAOhD,MACjEjD,EAAOiG,EAAOjG,KACpB2P,aAAakC,QAAQ7R,EAAMyP,KAAKiB,UAAU3H,IAG1C,IAAI4C,EAAsB,cAAT3L,EAAwB+I,EAAYxJ,KAAK6B,MAAMuK,UAC5DN,EAA0B,kBAATrL,EAA4B+I,EAAYxJ,KAAK6B,MAAMiK,cACpE0H,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrCnR,KAAKsO,0BACDtO,KAAK6B,MAAMuL,QACXpN,KAAK6B,MAAMqL,aACXlN,KAAK6B,MAAMmL,iBACXlB,EACAM,KAEK,cAAT3L,GACAT,KAAKyP,WAAWzP,KAAK6B,MAAMkJ,mBAAoBvB,EAAWxJ,KAAK6B,MAAM+J,gBAGzE5L,KAAKqC,UAAL,mBACK5B,EAAO+I,GADZ,0BAEegK,EAAmB,IAFlC,6BAGkBA,EAAmB,IAHrC,+BAIoBA,EAAmB,IAJvC,MArgBR,6CA8gBQ,IAAImC,EAAkD,WAA7B3V,KAAK6B,MAAMb,cAA8B,aAAe,SACjFoP,aAAakC,QAAQ,gBAAiBpC,KAAKiB,UAAUwE,IACrD3V,KAAKqC,SAAS,CAAErB,cAAe2U,MAhhBvC,mCAmhBiBC,GACLA,IAAoB5V,KAAK6B,MAAMzB,cAC/BgQ,aAAakC,QAAQ,eAAgBpC,KAAKiB,WAAWnR,KAAK6B,MAAMkM,eAChE/N,KAAKqC,UAAS,SAAAwT,GAAS,MAAK,CACxB9H,cAAe8H,EAAU9H,kBAGjCqC,aAAakC,QAAQ,cAAepC,KAAKiB,UAAUyE,IACnD5V,KAAKqC,SAAS,CAAEjC,YAAawV,MA3hBrC,yCA8hBuB/V,GACfG,KAAKqC,UAAS,SAAAwT,GACV,IAAIC,EAAyB5F,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU7H,gBAAgB7M,KAAI,SAAAL,GAAM,OAAIA,EAAOL,QAClGqV,EAAuBlT,SAAS/C,GAChCiW,EAAuBC,OAAOD,EAAuBE,WAAU,SAAAvV,GAAI,OAAIA,IAASZ,KAAc,GAE9FiW,EAAuBpV,KAAKb,GAEhC,IAAIoW,EAAoB1V,EAAYmI,QAAO,SAAA5H,GAAM,OAAIgV,EAAuBlT,SAAS9B,EAAOL,SAE5F,OADA2P,aAAakC,QAAQ,gBAAiBpC,KAAKiB,UAAU8E,IAC9C,CAAEjI,cAAeiI,QAxiBpC,oCA4iBkBvO,GACV,SAAQ1H,KAAK6B,MAAMgL,mBAAmBjK,SAAS8E,KAAW1H,KAAK6B,MAAMiL,mBAAmBlK,SAAS8E,MA7iBzG,6CAgjB2BA,GACnB,IAAIwO,EAAMlW,KAAK6B,MAAMgL,mBAAmB3H,QAAQwC,GAChD,OAAa,IAATwO,EACOlW,KAAK6B,MAAMiL,mBAAmBoJ,GAE9BxO,IArjBnB,gCAyjBcyO,GAAW,IAAD,OAChBnW,KAAKqC,UAAS,SAAAwT,GAGV,IAAIO,EAAalG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAUzI,UACrD+I,EAAStV,SAAQ,SAASyG,GAEjB8O,EAAWvR,eAAeyC,KAC3B8O,EAAW9O,GAFF,OAKjB8I,aAAakC,QAAQ,UAAWpC,KAAKiB,UAAUiF,IAG/C,IAAI5C,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD8H,EACA,EAAKvU,MAAMqL,aACX,EAAKrL,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD6H,EACA,EAAKvU,MAAM2L,yBAEnB,MAAO,CACHJ,QAASgJ,EACT1I,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QAxlBjC,mCA6lBiBnM,EAAK+O,GAAc,IAAD,OAC3BrW,KAAKqC,UAAS,SAAAwT,GAGV,IAAIO,EAAalG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAUzI,UACrDiJ,EAAYxV,SAAQ,SAAS6G,GACpB0O,EAAW9O,GAAK1E,SAAS8E,KAC1B0O,EAAW9O,GAAK5G,KAAKgH,GACT,aAARJ,IACA8O,EAAU,SAAeA,EAAU,SAAa1N,QAAO,SAAA4N,GAAe,OAAIA,IAAoB5O,UAI1G0I,aAAakC,QAAQ,UAAWpC,KAAKiB,UAAUiF,IAG/C,IAAI5C,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD8H,EACA,EAAKvU,MAAMqL,aACX,EAAKrL,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD6H,EACA,EAAKvU,MAAM2L,yBAEnB,MAAO,CACHJ,QAASgJ,EACT1I,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QA9nBjC,qCAmoBmB8C,GAAgB,IAAD,OAC1BvW,KAAKqC,UAAS,SAAAwT,GAGV,IAAIO,EAAalG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAUzI,UACjDoJ,EAA2B,GAC/B1O,OAAOC,KAAKqO,GAAYvV,SAAQ,SAAS8H,GACrC6N,EAAyB9V,KAAKiI,MAElC6N,EAAyB3V,SAAQ,SAASyG,GACtC8O,EAAW9O,GAAO8O,EAAW9O,GAAKoB,QAAO,SAAAhB,GAAM,OAAIA,IAAW6O,QAElEnG,aAAakC,QAAQ,UAAWpC,KAAKiB,UAAUiF,IAG/C,IAAIK,EAAkBvG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU3I,sBACnDuJ,EAAgBF,GAGvB,IAAIG,EAAqBxG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU1I,yBACtDuJ,EAAmBH,GAC1BnG,aAAakC,QAAQ,kBAAmBpC,KAAKiB,UAAUuF,IAGvD,IAAIC,EAAiB,YAAOd,EAAUtI,iBAEtCoJ,EAAiB,UADC,CAAC,UAAYJ,EAAgB,0BAC9B,YAAuBI,IAGxC,IAAInD,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD8H,EACAK,EACA,EAAK5U,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD6H,EACA,EAAKvU,MAAM2L,yBAEnB,MAAO,CACHJ,QAASgJ,EACTlJ,aAAcuJ,EACdtJ,gBAAiBuJ,EACjBnJ,gBAAiBoJ,EACjBjJ,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QAprBjC,uCAyrBqBmD,GAAkB,IAC3BlN,EAAQC,EAAYjC,EAAQmC,EADF,SAES+M,EAAgB7P,MAAM,KAF/B,mBAE7B2C,EAF6B,KAErBC,EAFqB,KAETjC,EAFS,KAEDmC,EAFC,KAG9BF,EAAaC,SAASD,GACtBE,EAAQC,WAAWD,EAAMgK,OAAO,IAChC7T,KAAKqC,UAAS,SAAAwT,GAGV,IAAIO,EAAalG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAUzI,UAC/C,EAAKwC,WAAWhN,SAAS8E,IAC3B0O,EAAU,SAAa1V,KAAKgH,GAEhC0I,aAAakC,QAAQ,UAAWpC,KAAKiB,UAAUiF,IAG/C,IAAIM,EAAqBxG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU1I,kBACzDuJ,EAAmB7R,eAAe6C,IAA0C,OAA/BgP,EAAmBhP,GAChEgP,EAAmBhP,GAAUgP,EAAmBhP,GAAQM,OAAO,CAAC4O,IAEhEF,EAAmBhP,GAAU,CAACkP,GAElCxG,aAAakC,QAAQ,kBAAmBpC,KAAKiB,UAAUuF,IAGvD,IAAID,EAAkBvG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU3I,eACtD2J,EAAa,EAAGC,EAAsB,EAAGC,EAAsB,EAC/DN,EAAgB5R,eAAe6C,IAAuC,OAA5B+O,EAAgB/O,KAC1DmP,EAAaJ,EAAgB/O,GAAhB,MACboP,EAAsBL,EAAgB/O,GAAhB,eACtBqP,EAAsBN,EAAgB/O,GAAhB,gBAE1B,IAAIsP,EAAkB,CAClB1U,OAAQoF,EACRnD,MAAmB,QAAXmF,EAAoBmN,EAAahN,EAAQgN,EAAahN,EAC9D7G,eAA4B,QAAX0G,EAAoBoN,EAAsBnN,EAAamN,EAAsBnN,EAC9FnF,eAA4B,SAAXkF,EAAqBqN,EAAsBlN,EAAQkN,GAEpEC,EAAe,MAAY,IAC3BA,EAAe,MAAY,GAE/BP,EAAgB/O,GAAUsP,EAG1B,IAAIxD,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD8H,EACAK,EACA,EAAK5U,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD6H,EACA,EAAKvU,MAAM2L,yBAEnB,MAAO,CACHJ,QAASgJ,EACTjJ,gBAAiBuJ,EACjBxJ,aAAcuJ,EACd/I,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QAvvBjC,gCA4vBcwD,GAAuB,IACzBvN,EAAQG,EADgB,SAEToN,EAAqBlQ,MAAM,KAFlB,mBAE3B2C,EAF2B,KAEnBG,EAFmB,KAG5BA,EAAQC,WAAWD,EAAMgK,OAAO,IAChC7T,KAAKqC,UAAS,SAAAwT,GAGV,IAAIa,EAAqBxG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU1I,kBACzDuJ,EAAmB7R,eAAe,SAA0C,OAA/B6R,EAAkB,KAC/DA,EAAkB,KAAWA,EAAkB,KAAS1O,OAAO,CAACiP,IAEhEP,EAAkB,KAAW,CAACO,GAElC7G,aAAakC,QAAQ,kBAAmBpC,KAAKiB,UAAUuF,IAGvD,IAAID,EAAkBvG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAU3I,eACtD4J,EAAsB,EACtBL,EAAgB5R,eAAe,UAC/BiS,EAAsBL,EAAe,KAAf,gBAE1B,IAAIS,EAAuB,QAAXxN,EAAoBoN,EAAsBjN,EAAQiN,EAAsBjN,EACpFmN,EAAkB,CAClB1U,OAAQ,OACRiC,MAAQ2S,GAAY,EAAKA,EAAW,EACpClU,eAAgBkU,EAChB1S,eAAgB,GAEpBiS,EAAe,KAAWO,EAG1B,IAAIxD,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD,EAAKzM,MAAMuL,QACXqJ,EACA,EAAK5U,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD,EAAK1M,MAAMuL,QACX,EAAKvL,MAAM2L,yBAEnB,MAAO,CACHL,gBAAiBuJ,EACjBxJ,aAAcuJ,EACd/I,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QA7yBjC,sCAkzBoB0D,EAAiBC,GAAgB,IAAD,OAC5CpX,KAAKqC,UAAS,SAAAwT,GACV,IAAIO,EAAalG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAUzI,UACrDgJ,EAAWe,GAAmBf,EAAWe,GAAiBzO,QAAO,SAAAhB,GAAM,OAAIA,IAAW0P,KAGtF,IAAIC,EAAiC,GAMrC,GALAvP,OAAOC,KAAKqO,GAAYvV,SAAQ,SAAS8H,GACjCA,IAAawO,GAAgC,aAAbxO,GAA2ByN,EAAWzN,GAAU/F,SAASwU,IACzFC,EAA+B3W,KAAKiI,OAGvC0O,EAA+BzS,OAAQ,CACxC,IAAI0S,EAAclB,EAAU,SAC5BkB,EAAY5W,KAAK0W,GACjBhB,EAAU,SAAekB,EAE7BlH,aAAakC,QAAQ,UAAWpC,KAAKiB,UAAUiF,IAG/C,IAAI5C,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD8H,EACA,EAAKvU,MAAMqL,aACX,EAAKrL,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD6H,EACA,EAAKvU,MAAM2L,yBAEnB,MAAO,CACHJ,QAASgJ,EACT1I,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QAv1BjC,kCA41BgBhJ,GAAa,IAAD,OACpBzK,KAAKqC,UAAS,SAAAwT,GAEV,IAAIO,EAAalG,KAAKC,MAAMD,KAAKiB,UAAU0E,EAAUzI,UACjDmK,EAAuBnB,EAAW3L,UAC/B2L,EAAW3L,GAGlB,IAAI+M,EAA2B,GAC/B1P,OAAOC,KAAKqO,GAAYvV,SAAQ,SAAS8H,GACpB,aAAbA,IACA6O,EAA2BA,EAAyBxP,OAAOoO,EAAWzN,QAG9E4O,EAAqB1W,SAAQ,SAAS6G,GAClC,IAAI4P,EAAclB,EAAU,SACvBoB,EAAyB5U,SAAS8E,KACnC4P,EAAY5W,KAAKgH,GACjB0O,EAAU,SAAekB,MAGjClH,aAAakC,QAAQ,UAAWpC,KAAKiB,UAAUiF,IAG/C,IAAIO,EAAiB,YAAOd,EAAUtI,iBAEtCoJ,EAAiB,UADC,CAAC,QAAUlM,EAAa,2BACzB,YAAuBkM,IAGxC,IAAInD,EAAqBtD,KAAKC,MAAMD,KAAKiB,UACrC,EAAK7C,0BACD8H,EACA,EAAKvU,MAAMqL,aACX,EAAKrL,MAAMmL,iBACX,EAAKnL,MAAMiK,cACX,EAAKjK,MAAMuK,aACfqH,EAAmBvD,KAAKC,MAAMD,KAAKiB,UACnC,EAAK5C,yBACD6H,EACA,EAAKvU,MAAM2L,yBAEnB,MAAO,CACHJ,QAASgJ,EACT7I,gBAAiBoJ,EACjBjJ,UAAW8F,EAAmB,GAC9B7F,aAAc6F,EAAmB,GACjC5F,eAAgB4F,EAAmB,GACnC/F,gBAAiBgG,QA34BjC,oCAg5BkBgE,GACVzX,KAAKqC,UAAS,SAAAwT,GACV,IAAIc,EAAiB,YAAOd,EAAUtI,iBAEtC,MAAO,CAAEA,gBADToJ,EAAiB,sBAAOc,EAAaC,WAApB,YAAkCf,UAn5B/D,sCAw5BoBjP,GACZ,OAAI1H,KAAK6B,MAAMqL,aAAarI,eAAe6C,GAChC1H,KAAK6B,MAAMmL,iBAAiBtF,GAAQrD,cAAgBrE,KAAK6B,MAAMqL,aAAaxF,GAAQ1E,eAEpF,IA55BnB,0CAg6BwB+H,GAEhB,IAAIpK,EAAOX,KACP8K,EAAoB,EAEpB6M,EAAwB,EA0B5B,OAzBI3X,KAAK6B,MAAMuK,WAAapM,KAAK6B,MAAMqL,aAAarI,eAAe,UAC/D8S,EAAwBhX,EAAKkB,MAAMqL,aAAX,KAAgClK,eAAiBrC,EAAKkB,MAAMmL,iBAAX,KAAoC3I,eAEjHyG,GAAqB6M,EAEM,gBAAvB5M,EACI/K,KAAK6B,MAAMiK,eACXhE,OAAOC,KAAK/H,KAAK6B,MAAMqL,cAAcxE,QAAQ,SAAAhB,GAAM,MAAe,SAAXA,KAAoB7G,SAAS,SAAS6G,GACzFoD,GAAqBnK,EAAKkB,MAAMqL,aAAaxF,GAAQ1E,eAAiBrC,EAAKkB,MAAMmL,iBAAiBtF,GAAQrD,iBAGpF,aAAvB0G,EACH/K,KAAK6B,MAAMkK,eAAiB/L,KAAK6B,MAAMuL,QAAQvI,eAAe,aAC9D7E,KAAK6B,MAAMuL,QAAX,SAA+B1E,QAAQ,SAAAhB,GAAM,OAAI/G,EAAKkB,MAAMqL,aAAarI,eAAe6C,MAAU7G,SAAS,SAAS6G,GAChHoD,GAAqBnK,EAAKkB,MAAMqL,aAAaxF,GAAQ1E,eAAiBrC,EAAKkB,MAAMmL,iBAAiBtF,GAAQrD,iBAI9GrE,KAAK6B,MAAMmK,aACXhM,KAAK6B,MAAMuL,QAAQrC,GAAoBrC,QAAQ,SAAAhB,GAAM,OAAI/G,EAAKkB,MAAMqL,aAAarI,eAAe6C,MAAU7G,SAAS,SAAS6G,GACxHoD,GAAqBnK,EAAKkB,MAAMqL,aAAaxF,GAAQ1E,eAAiBrC,EAAKkB,MAAMmL,iBAAiBtF,GAAQrD,iBAK/GyG,IA/7Bf,qCAk8BmBC,EAAoBa,GAC/B5L,KAAKqC,SAAS,CAAEuJ,eAAgBA,EAAgBb,mBAAoBA,IACpE/K,KAAKyP,WAAW1E,EAAoB/K,KAAK6B,MAAMuK,UAAWR,KAp8BlE,iCAu8Beb,EAAoBqB,EAAWR,GAEtC,IAAIjL,EAAOX,KACP4X,EAAiBxL,GAAgC,OAAnBR,EAC9BiM,EAA0B7X,KAAK6B,MAAMqL,aAAarI,eAAe,QAAW7E,KAAK6B,MAAMqL,aAAX,KAAgClK,eAAiBhD,KAAK6B,MAAMmL,iBAAX,KAAoC3I,cAAgB,EAGjLyT,EAAsB9X,KAAKuP,oBAAoBxE,GAE/C+M,GADmB,OAAnBlM,EACuBiM,EAEAjM,EAI3B,IAAImM,EAAqB,GAErBA,EADuB,gBAAvBhN,EACkB,YAAO/K,KAAK2P,cAAcjH,QAAQ,SAAAhB,GAAM,MAAe,SAAXA,MAChC,aAAvBqD,EACW,YAAO/K,KAAK8P,eAET9P,KAAK6B,MAAMuL,QAAQrC,GAI5C,IAAIiN,EAAa,CACb1K,gBAAiB,gBACjB0H,OAAQ,IAERiD,EAAwBJ,EAC5BE,EAAmBlX,SAAQ,SAAS6G,GAChC,IAAIwQ,EAAeJ,EAAsBC,EAAmBnT,OACxDuT,EAAgBrT,KAAKsT,MAAMF,EAAevX,EAAKkB,MAAMmL,iBAAiBtF,GAAQrD,eAC9EgU,EAAeF,EAAgBxX,EAAKkB,MAAMmL,iBAAiBtF,GAAQrD,cACnEiU,EAAiB3X,EAAK2O,gBAAgB5H,IAC1CsQ,EAAWhD,OAAOtN,GAAU,GAC5BsQ,EAAWhD,OAAOtN,GAAlB,eAA8CyQ,EAC9CH,EAAWhD,OAAOtN,GAAlB,cAA6C2Q,EACzCT,KAEAK,GADkBI,EAAeC,MAIrCV,IACAI,EAAWhD,OAAX,KAA4B,GAC5BgD,EAAWhD,OAAX,oBAA8CiD,EAC9CD,EAAWhD,OAAX,mBAA6CiD,GAEjDjY,KAAKqC,SAAS,CAAEgL,WAAY2K,EAAWhD,OAAQ1H,gBAAiB0K,EAAW1K,oBAv/BnF,oCA2/BQ,OAAOxF,OAAOkK,QAAQhS,KAAK6B,MAAMqL,cAAcxE,QAAO,SAAA6P,GAAO,OAAIA,EAAQ,GAAR,eAA+B,KAAGpX,KAAI,SAAAoX,GAAO,OAAIA,EAAQ,QA3/BlI,oCA+/BQ,OAAO,YAAIvY,KAAK6B,MAAMiL,sBA//B9B,iCAmgCQ,IAAI0L,EAAgB,GAChB7X,EAAOX,KAIX,OAHA8H,OAAOC,KAAK/H,KAAK6B,MAAMuL,SAASvM,SAAQ,SAASyG,GAC7CkR,EAAgBA,EAAcxQ,OAAOrH,EAAKkB,MAAMuL,QAAQ9F,OAErDH,MAAMC,KAAK,IAAIC,IAAImR,MAxgClC,kCA4gCQ,IAAI3Q,EAAiB,GACjBlH,EAAOX,KAMX,OALA8H,OAAOC,KAAK/H,KAAK6B,MAAMuL,SAASvM,SAAQ,SAASyG,GACjC,aAARA,IACAO,EAAiBA,EAAeG,OAAOrH,EAAKkB,MAAMuL,QAAQ9F,QAG3DH,MAAMC,KAAK,IAAIC,IAAIQ,MAnhClC,oCAuhCQ,OAAOV,MAAMC,KAAKpH,KAAK6B,MAAMuL,QAAX,YAvhC1B,0CA0hCwBqL,GAOhB,OANIzY,KAAK6B,MAAMgM,aACX4K,GAAa,GAEbzY,KAAK6B,MAAMuK,YACXqM,GAAa,GAEbA,EACO,IAAMA,EAAY,IAElB,KApiCnB,wCAwiCsBhY,GACd,OAAOqH,OAAOC,KAAK/H,KAAK6B,MAAMuL,SAASxK,SAASnC,KAziCxD,kCA4iCgBiY,GAER,IAAItY,EAAcJ,KAAK6B,MAAMzB,YACzBuY,EAAgB,CAAC,gBAAiB,aAAc,SAAU,iBAC1DC,EAAmB,CAAC,iBAAkB,gBAAiB,gBAAiB,QAAS,iBAAkB,gBAAiB,kBACpHC,EAAsB,CAAC,mBAAoB,oBAAqB,mBAEhEC,EAAiB,YAAOJ,GACxB/X,EAAOX,KA8MX,OA7MA8Y,EAAkBrQ,MAAK,SAASsQ,EAAEC,GAC9B,IAAIC,EAASC,EAGb,GAAoB,WAAhB9Y,EAA0B,CAC1B,GAAU,aAAN2Y,EACA,OAAQ,EACL,GAAU,aAANC,EACP,OAAO,EACJ,GAAU,WAAND,EACP,OAAQ,EACL,GAAU,WAANC,EACP,OAAO,EACJ,GAAU,SAAND,EACP,OAAQ,EACL,GAAU,SAANC,EACP,OAAO,EAEXC,EAAUF,EACVG,EAAUF,OAGP,GAAIL,EAAc/V,SAASxC,GAE1B6Y,EADAtY,EAAKoP,kBAAkBgJ,KAAOpY,EAAKkB,MAAMmL,iBAAiBnI,eAAekU,GAC/D,MAEU,kBAAhB3Y,EACUO,EAAKkB,MAAMmL,iBAAiB+L,GAA5B,cAAkDpY,EAAKkB,MAAMmL,iBAAiB+L,GAA5B,OAElDpY,EAAKkB,MAAMmL,iBAAiB+L,GAAG3Y,GAI7C8Y,EADAvY,EAAKoP,kBAAkBiJ,KAAOrY,EAAKkB,MAAMmL,iBAAiBnI,eAAemU,GAC/D,MAEU,kBAAhB5Y,EACUO,EAAKkB,MAAMmL,iBAAiBgM,GAA5B,cAAkDrY,EAAKkB,MAAMmL,iBAAiBgM,GAA5B,OAElDrY,EAAKkB,MAAMmL,iBAAiBgM,GAAG5Y,QAK9C,GAAIyY,EAAoBjW,SAASxC,GAEhC6Y,EADAtY,EAAKoP,kBAAkBgJ,IAAMpY,EAAKkB,MAAM4L,gBAAgB5I,eAAekU,GAC7DpY,EAAKkB,MAAM4L,gBAAgBsL,GAAG3Y,IAChCO,EAAKoP,kBAAkBgJ,IAAMpY,EAAKkB,MAAM2L,sBAAsB3I,eAAekU,GAC3EpY,EAAKkB,MAAM2L,sBAAsBuL,GAAG3Y,GAEpC,MAGV8Y,EADAvY,EAAKoP,kBAAkBiJ,IAAMrY,EAAKkB,MAAM4L,gBAAgB5I,eAAemU,GAC7DrY,EAAKkB,MAAM4L,gBAAgBuL,GAAG5Y,IAChCO,EAAKoP,kBAAkBiJ,IAAMrY,EAAKkB,MAAM2L,sBAAsB3I,eAAemU,GAC3ErY,EAAKkB,MAAM2L,sBAAsBwL,GAAG5Y,GAEpC,UAIX,KAAIwY,EAAiBhW,SAASxC,GAmHjC,OAAO,EAlHP,IAAI+Y,EAAiBC,EAAiBC,EAASC,EAC/C,GAAI3Y,EAAKoP,kBAAkBgJ,GACvB,OAAO3Y,GACH,IAAK,iBACD6Y,EAAU,MACV,MACJ,IAAK,gBACL,IAAK,gBACDA,EAAUtY,EAAKkB,MAAM+L,eAAemL,GACpC,MACJ,IAAK,QACL,IAAK,gBACDE,EAAUtY,EAAKkB,MAAM6L,UAAUqL,GAC/B,MACJ,IAAK,iBACDE,EAAUtY,EAAKkB,MAAM8L,aAAaoL,GAClC,MACJ,IAAK,iBACDI,EAAkBxY,EAAKkB,MAAM+L,eAAemL,GAC5CM,EAAU1Y,EAAKkB,MAAM6L,UAAUqL,GAE3BE,EADAlW,MAAMoW,IAAoBpW,MAAMsW,GACtB,MACiB,IAApBF,EACIE,GAAW,EAAK,EAAKA,EAAUF,EAAmB,SAEnDA,EAEd,MACJ,QACIF,EAAU,WAEXtY,EAAKkB,MAAMqL,aAAarI,eAAekU,GAC1B,kBAAhB3Y,GAAmD,kBAAhBA,GAAmD,mBAAhBA,EAClEO,EAAKkB,MAAMmL,iBAAiBnI,eAAekU,IAC3CI,EAAkBxY,EAAKkB,MAAMqL,aAAa6L,GAAxB,eAA+CpY,EAAKkB,MAAMmL,iBAAiB+L,GAA5B,cAG7DE,EAFgB,mBAAhB7Y,GAAwD,IAApB+Y,GACpCE,EAAU1Y,EAAKkB,MAAMqL,aAAa6L,GAAxB,QACY,EAAK,EAAKM,EAAUF,EAAmB,SAEnDA,GAGdF,EAAU,MAIVA,EAFGtY,EAAKkB,MAAMqL,aAAa6L,GAAxB,eACa,kBAAhB3Y,EACUO,EAAKkB,MAAMqL,aAAa6L,GAAxB,MAEApY,EAAKkB,MAAMqL,aAAa6L,GAAG3Y,GAG/B,MAGd6Y,EAAU,MAEd,GAAItY,EAAKoP,kBAAkBiJ,GACvB,OAAO5Y,GACH,IAAK,iBACD8Y,EAAU,MACV,MACJ,IAAK,gBACL,IAAK,gBACDA,EAAUvY,EAAKkB,MAAM+L,eAAeoL,GACpC,MACJ,IAAK,QACL,IAAK,gBACDE,EAAUvY,EAAKkB,MAAM6L,UAAUsL,GAC/B,MACJ,IAAK,iBACDE,EAAUvY,EAAKkB,MAAM8L,aAAaqL,GAClC,MACJ,IAAK,iBACDI,EAAkBzY,EAAKkB,MAAM+L,eAAeoL,GAC5CM,EAAU3Y,EAAKkB,MAAM6L,UAAUsL,GAE3BE,EADAnW,MAAMqW,IAAoBrW,MAAMuW,GACtB,MACiB,IAApBF,EACIE,GAAW,EAAK,EAAKA,EAAUF,EAAmB,SAEnDA,EAEd,MACJ,QACIF,EAAU,WAEXvY,EAAKkB,MAAMqL,aAAarI,eAAemU,GAC1B,kBAAhB5Y,GAAmD,kBAAhBA,GAAmD,mBAAhBA,EAClEO,EAAKkB,MAAMmL,iBAAiBnI,eAAemU,IAC3CI,EAAkBzY,EAAKkB,MAAMqL,aAAa8L,GAAxB,eAA+CrY,EAAKkB,MAAMmL,iBAAiBgM,GAA5B,cAG7DE,EAFgB,mBAAhB9Y,GAAwD,IAApBgZ,GACpCE,EAAU3Y,EAAKkB,MAAMqL,aAAa8L,GAAxB,QACY,EAAK,EAAKM,EAAUF,EAAmB,SAEnDA,GAGdF,EAAU,MAIVA,EAFGvY,EAAKkB,MAAMqL,aAAa8L,GAAxB,eACa,kBAAhB5Y,EACUO,EAAKkB,MAAMqL,aAAa8L,GAAxB,MAEArY,EAAKkB,MAAMqL,aAAa8L,GAAG5Y,GAG/B,MAGd8Y,EAAU,MAQlB,GAAID,IAAYC,EACZ,OAAO,EAEX,IAAgC,IAA5BvY,EAAKkB,MAAMkM,aAAuB,CAClC,GAAgB,QAAZkL,EACA,OAAO,EACJ,GAAgB,QAAZC,EACP,OAAQ,EACL,GAAID,EAAUC,EACjB,OAAQ,EACL,GAAID,EAAUC,EACjB,OAAO,MAER,CACH,GAAgB,QAAZD,EACA,OAAO,EACJ,GAAgB,QAAZC,EACP,OAAQ,EACL,GAAID,EAAUC,EACjB,OAAO,EACJ,GAAID,EAAUC,EACjB,OAAQ,EAGhB,OAAO,KAGJJ,IAlwCf,+BAqwCc,IAAD,OAEDnY,EAAOX,KAEPuZ,EAAkB,GAClBvZ,KAAK6B,MAAMoM,OACPjO,KAAK6B,MAAMgM,aACX0L,EAAe,sBAAOA,GAAP,YAA2BvZ,KAAK0P,iBAE/C1P,KAAK6B,MAAMiK,gBACXyN,EAAkB,sBAAIA,GAAJ,YAAwBvZ,KAAK2P,gBAAejH,QAAO,SAAAhB,GAAM,MAAe,SAAXA,MAE/E1H,KAAK6B,MAAMuK,WACXmN,EAAgB7Y,KAAK,QAErBV,KAAK6B,MAAMmK,cACXuN,EAAe,sBAAOA,GAAP,YAA2BvZ,KAAK6P,eAE/C7P,KAAK6B,MAAMkK,gBACXwN,EAAe,sBAAOA,GAAP,YAA2BvZ,KAAK8P,kBAGvD,IAAI0J,EAAyBrS,MAAMC,KAAK,IAAIC,IAAIkS,IAC5ClZ,GAA6C,IAA5BL,KAAK6B,MAAMkM,aAAyBjH,OAAO2S,aAAa,MAAQ3S,OAAO2S,aAAa,MACrGC,EAAiB1Z,KAAKgQ,YAAYwJ,GAElCG,EAAW,GACfD,EAAe7Y,SAAQ,SAAS6G,GAE5BiS,EAASjS,GAAU,GAEnB,IAAIkS,EAAiB,GACrB9R,OAAOkK,QAAQrR,EAAKkB,MAAMuL,SAASvM,SAAQ,SAASgZ,GAC5CA,EAAS,GAAGjX,SAAS8E,IACrBkS,EAAelZ,KAAKmZ,EAAS,OAGrCF,EAASjS,GAAT,KAA2BkS,EAE3B,IAAIjX,EAAkB,GAClBhC,EAAKuN,cAAcxG,IACnB/E,EAAgBjC,KAAK,SAEV,SAAXgH,GACA/E,EAAgBjC,KAAK,QAEzBiZ,EAASjS,GAAT,gBAAsC/E,EAElChC,EAAKkB,MAAMqL,aAAarI,eAAe6C,IACvCiS,EAASjS,GAAT,MAA4B/G,EAAKkB,MAAMqL,aAAaxF,GAAQnD,MAC5DoV,EAASjS,GAAT,eAAqC/G,EAAKkB,MAAMqL,aAAaxF,GAAQ1E,eACrE2W,EAASjS,GAAT,eAAqC/G,EAAKkB,MAAMqL,aAAaxF,GAAQlD,iBAErEmV,EAASjS,GAAT,MAA4B,MAC5BiS,EAASjS,GAAT,eAAqC,MACrCiS,EAASjS,GAAT,eAAqC,OAGrC/G,EAAKkB,MAAMwL,WAAWxI,eAAe6C,GACrCiS,EAASjS,GAAT,OAA6B/G,EAAKkB,MAAMwL,WAAW3F,GAGnDiS,EAASjS,GAAT,OAA6B,QAIrC,IAAIoS,EAAsB9Z,KAAKgQ,YAAYlI,OAAOC,KAAK/H,KAAK6B,MAAMuL,SAAS1E,QAAO,SAAAhB,GAAM,QAAiB,aAAXA,IAA0B,EAAK7F,MAAMuL,QAAQ2M,SAASnV,YAChJoV,EAAgB,GACpBF,EAAoBjZ,SAAQ,SAASoZ,GAEjC,IAAIC,EAAgB,GAEpBA,EAAa,OAAaD,EAC1BC,EAAa,KAAW,GACxBA,EAAa,gBAAsB,CAAC,aACpCA,EAAa,MAAY,MACzBA,EAAa,eAAqB,MAClCA,EAAa,cAAoB,MACjCA,EAAa,cAAoBvZ,EAAKkB,MAAM+L,eAAeqM,GAC3DC,EAAa,WAAiB,MAC9BA,EAAa,OAAa,MAC1BA,EAAa,MAAYvZ,EAAKkB,MAAM6L,UAAUuM,GAC9CC,EAAa,eAAqBvZ,EAAKkB,MAAM8L,aAAasM,GAC1DC,EAAa,YAAkBvZ,EAAKkB,MAAM4L,gBAAgBwM,GAC1DC,EAAa,OAAa,KAE1BF,EAAcC,GAAeC,KAGjC,IAAIC,EAAqBna,KAAK6B,MAAMmM,cAAc7M,KAAI,SAAAL,GAAM,OAAIA,EAAOL,QACnE2Z,EAAyBlK,KAAKC,MAAMD,KAAKiB,UAAU5Q,IAAckI,MAAK,SAAUsQ,EAAEC,GAClF,IAAIC,EAAUF,EAAE9X,aACZgY,EAAQrW,SAAS,QACjBqW,EAAU,IAAMA,EACTA,EAAQrW,SAAS,WACxBqW,EAAU,KAAOA,GAErB,IAAIC,EAAUF,EAAE/X,aAMhB,OALIiY,EAAQtW,SAAS,QACjBsW,EAAU,IAAMA,EACTA,EAAQtW,SAAS,WACxBsW,EAAU,KAAOA,GAEjBD,EAAUC,GACF,EACDD,EAAUC,EACV,EAEA,KAITmB,EACF,kBAACC,EAAA,EAAD,CAASnS,GAAG,iBACR,kBAACmS,EAAA,EAAQC,MAAT,CAAeC,GAAG,MAAlB,kBACA,kBAACF,EAAA,EAAQG,QAAT,KACA,yBAAKtS,GAAG,eACJ,8BACI,yBAAK7G,UAAU,mBAEX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,kBACA,yBAAKA,UAAU,kBACX,2BAAO6G,GAAG,gBAAgB1H,KAAK,gBAAgBiE,KAAK,WAAWgR,QAAS1V,KAAK6B,MAAMiK,cAAexD,SAAUtI,KAAK0O,oBACjH,2BAAOzC,QAAQ,gBAAgB3K,UAAU,aAIjD,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,gBACA,yBAAKA,UAAU,kBACX,2BAAO6G,GAAG,cAAc1H,KAAK,cAAciE,KAAK,WAAWgR,QAAS1V,KAAK6B,MAAMmK,YAAa1D,SAAUtI,KAAK0O,oBAC3G,2BAAOzC,QAAQ,cAAc3K,UAAU,aAI/C,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,kBACA,yBAAKA,UAAU,kBACX,2BAAO6G,GAAG,gBAAgB1H,KAAK,gBAAgBiE,KAAK,WAAWgR,QAAS1V,KAAK6B,MAAMkK,cAAezD,SAAUtI,KAAK0O,oBACjH,2BAAOzC,QAAQ,gBAAgB3K,UAAU,aAIjD,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,eACA,yBAAKA,UAAU,kBACX,2BAAO6G,GAAG,aAAa1H,KAAK,aAAaiE,KAAK,WAAWgR,QAAS1V,KAAK6B,MAAMgM,WAAYvF,SAAUtI,KAAK0O,oBACxG,2BAAOzC,QAAQ,aAAa3K,UAAU,aAI9C,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,cACA,yBAAKA,UAAU,kBACX,2BAAO6G,GAAG,YAAY1H,KAAK,YAAYiE,KAAK,WAAWgR,QAAS1V,KAAK6B,MAAMuK,UAAW9D,SAAUtI,KAAK0O,oBACrG,2BAAOzC,QAAQ,YAAY3K,UAAU,aAI7C,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBAAf,oBACA,yBAAKA,UAAU,kBACX,2BAAO6G,GAAG,kBAAkB1H,KAAK,kBAAkBiE,KAAK,WAAWgR,QAAS1V,KAAK6B,MAAMiM,gBAAiBxF,SAAUtI,KAAK0O,oBACvH,2BAAOzC,QAAQ,kBAAkB3K,UAAU,kBAejEoZ,EACF,kBAACJ,EAAA,EAAD,CAASnS,GAAG,iBACR,kBAACmS,EAAA,EAAQC,MAAT,CAAeC,GAAG,MAAlB,qBACA,kBAACF,EAAA,EAAQG,QAAT,KACA,yBAAKtS,GAAG,kBACHiS,EAAuBjZ,KAAI,SAAAL,GAAM,OAC9B,0BAAMO,IAAMP,EAAOL,KAAOc,QAAU,SAACC,GAAD,OAAK,EAAKqN,mBAAmB/N,EAAOL,OAAQa,UAAY6Y,EAAmBvX,SAAS9B,EAAOL,MAA0B,GAAlB,iBAAwBK,EAAOG,oBAYhL0Z,EAAoB,SAAC,GAAD,IAAExa,EAAF,EAAEA,aAAF,OACtB,kBAAC,EAAD,CACIA,aAAcA,EACdS,QAAS,EAAKiB,MAAMmM,cACpB1N,iBAAkBsa,EAClBxa,YAAa,EAAKyB,MAAMzB,YACxBC,cAAeA,EACfW,cAAe,EAAKa,MAAMb,cAC1Bd,eAAgB,EAAK0O,aACrB3O,wBAAyB,EAAK0O,wBAIhCkM,EAAc,SAAC,GAAD,IAAElB,EAAF,EAAEA,SAAF,OAChB,kBAAC,EAAD,CACItY,IAAKsY,EAASnX,SACdrC,aAAcwZ,EAASxZ,aACvBqC,SAAUmX,EAASnX,SACnBK,eAAgB8W,EAAS9W,eACzBjC,QAAS+Y,EAAS/Y,QAClB+B,gBAAiBgX,EAAShX,gBAC1B0B,cAAesV,EAAStV,cACxBnB,WAAYyW,EAASzW,WACrByB,OAAQgV,EAAShV,OACjBJ,MAAOoV,EAASpV,MAChBvB,eAAgB2W,EAAS3W,eACzBsB,cAAeqV,EAASrV,cACxBE,eAAgBmV,EAASnV,eACzBpB,oBAAqBuW,EAASvW,oBAC9BC,SAAUsW,EAAStW,SACnBc,YAAawV,EAASxV,YACtBC,YAAauV,EAASvV,YACtBK,OAAQkV,EAASlV,OACjBzD,cAAe,EAAKa,MAAMb,cAC1Bf,wBAAyB,EAAK0O,qBAC9BlM,mBAAoBkX,EAASlX,mBAC7BQ,iBAAkB0W,EAAS1W,iBAC3BH,cAAe6W,EAAS7W,iBAI5BgY,EAAe,GACnBpB,EAAe7Y,SAAQ,SAAS6G,GAC5B,IAAIqT,EAAU,CACdA,cAA0B,GAC1BA,EAAO,SAAerT,EACtBqT,EAAO,eAAqBpB,EAASjS,GAAT,KAC5BqT,EAAO,QAAcpa,EAAKkB,MAAMmM,cAChC+M,EAAO,gBAAsBpB,EAASjS,GAAT,gBAC7BqT,EAAO,cAAoBpa,EAAKkB,MAAMmL,iBAAiBtF,GAAQrD,cAC/D0W,EAAO,WAAiBpa,EAAKkB,MAAMmL,iBAAiBtF,GAAQxE,WAC5D6X,EAAO,OAAapa,EAAKkB,MAAMmL,iBAAiBtF,GAAQ/C,OACxDoW,EAAO,MAAYpB,EAASjS,GAAT,MACnBqT,EAAO,eAAqBpB,EAASjS,GAAT,eAC5BqT,EAAO,cAA+C,QAA1BA,EAAQ1W,eAAsD,QAA3B0W,EAAQ/X,eAA4B,MAAQ+X,EAAQ1W,cAAgB0W,EAAQ/X,eAC3I+X,EAAO,eAAqBpB,EAASjS,GAAT,eAC5BqT,EAAO,oBAA0Bpa,EAAKkB,MAAM2L,sBAAsB9F,GAClEqT,EAAO,SAAepa,EAAKkB,MAAMwB,SACjC0X,EAAO,YAAkBpa,EAAKkB,MAAM+L,eAAX,aACzBmN,EAAO,YAAkBpa,EAAKkB,MAAM6L,UAAX,aACzBqN,EAAO,OAAapB,EAASjS,GAAT,OACpBqT,EAAO,mBAAyBpa,EAAKuO,gBACrC6L,EAAO,iBAAuBpa,EAAKwO,eACnC4L,EAAO,cAAoBpa,EAAKyO,YAChC0L,EAAapa,KAAKqa,MAElB/a,KAAK6B,MAAMiM,iBACXgM,EAAoBjZ,SAAQ,SAASoZ,GACjC,IAAIc,EAAU,CACdA,cAA0B,GAC1BA,EAAO,SAAed,EACtBc,EAAO,eAAqBpa,EAAKkB,MAAMuL,QAAQ6M,GAC/Cc,EAAO,QAAcpa,EAAKkB,MAAMmM,cAChC+M,EAAO,gBAAsBf,EAAcC,GAAd,gBAC7Bc,EAAO,cAAoBf,EAAcC,GAAd,cAC3Bc,EAAO,WAAiBf,EAAcC,GAAd,WACxBc,EAAO,OAAaf,EAAcC,GAAd,OACpBc,EAAO,MAAYpa,EAAKkB,MAAM6L,UAAUuM,GACxCc,EAAO,eAAqBf,EAAcC,GAAd,eAC5Bc,EAAO,cAAoBf,EAAcC,GAAd,cAC3Bc,EAAO,eAAqBf,EAAcC,GAAd,eAC5Bc,EAAO,oBAA0Bf,EAAcC,GAAd,YACjCc,EAAO,SAAepa,EAAKkB,MAAMwB,SACjC0X,EAAO,YAAkBpa,EAAKkB,MAAM+L,eAAX,aACzBmN,EAAO,YAAkBpa,EAAKkB,MAAM6L,UAAX,aACzBqN,EAAO,OAAaf,EAAcC,GAAd,OACpBc,EAAO,mBAAyBpa,EAAKuO,gBACrC6L,EAAO,iBAAuBpa,EAAKwO,eACnC4L,EAAO,cAAoBpa,EAAKyO,YAChC0L,EAAapa,KAAKqa,MAI1B,IAAIH,EAAe5a,KAAKwO,oBAAoBkL,EAAe9U,QAE3D,OACI,yBAAKuD,GAAG,gBACJ,yBAAKA,GAAG,iBACJ,yBAAKA,GAAG,kBACJ,kBAAC,EAAD,CACIR,WAAY3H,KAAK6B,MAAMkL,UACvBnF,SAAU5H,KAAK6B,MAAMuL,QACrB/B,mBAAoBrL,KAAK6B,MAAMmL,iBAC/B5B,cAAepL,KAAK6B,MAAMqL,aAC1BpB,cAAe9L,KAAK6B,MAAMiK,cAC1BE,YAAahM,KAAK6B,MAAMmK,YACxBD,cAAe/L,KAAK6B,MAAMkK,cAC1BK,UAAWpM,KAAK6B,MAAMuK,UACtBb,sBAAuBvL,KAAKuP,oBAC5BtH,eAAgBjI,KAAKiP,aACrB7F,YAAapJ,KAAKgP,UAClBlM,cAAe9C,KAAKoP,YACpBpF,mBAAoBhK,KAAK8O,iBACzBvE,YAAavK,KAAK+O,UAClBpE,oBAAqB3K,KAAK6B,MAAM0L,gBAChCrF,gBAAiBlI,KAAKqP,cACtBxD,iBAAkB7L,KAAKwP,kBAG/B,yBAAKrH,GAAG,iBACJ,yBAAKA,GAAG,oBACJ,2BAAO8D,QAAQ,YAAf,yBACA,4BAAQ9D,GAAG,WAAW1H,KAAK,WAAWiD,MAAO1D,KAAK6B,MAAMwB,SAAS5C,KAAM6H,SAAUtI,KAAKyO,eAClF,4BAAQ/K,MAAM,iBAAd,WACA,4BAAQA,MAAM,kBAAd,kBAIR,yBAAKyE,GAAG,iBACJ,mBAxJA,kBAChB,kBAAC6S,EAAA,EAAD,CAAgBC,QAAQ,QAAQC,UAAU,OAAOC,QAASd,GACtD,4BAAQ/Y,UAAU,2BAA2B8Z,QAAQ,WAArD,kBAsJY,MACA,mBAxIG,kBACnB,kBAACJ,EAAA,EAAD,CAAgBC,QAAQ,QAAQC,UAAU,OAAOC,QAAST,GACtD,4BAAQpZ,UAAU,2BAA2B8Z,QAAQ,WAArD,qBAsIY,SAKZ,2BAAOjT,GAAG,mBAAmBkT,YAAY,KACrC,+BACI,4BACI,kBAACV,EAAD,CAAmBxa,cAAc,MAGzC,+BACKH,KAAK6B,MAAMoM,MAAQ6M,EAAapS,QAAO,SAAAiR,GAAQ,OAAKA,EAASxZ,gBAAcgB,KAAI,SAAAwY,GAAQ,OACpF,kBAACkB,EAAD,CAAaxZ,IAAKsY,EAASnX,SAAUmX,SAAUA,OAEnD,kBAAC,EAAD,CACI/Y,QAASZ,KAAK6B,MAAMmM,cACpB7J,YAAanE,KAAK6B,MAAM+L,eAAX,aACbxJ,YAAapE,KAAK6B,MAAM6L,UAAX,aACb5H,kBAAmB9F,KAAK6B,MAAM4L,gBAAX,iBAI9BzN,KAAK6B,MAAMoM,MAAQjO,KAAK6B,MAAMiM,iBAC3B,2BAAO3F,GAAG,wBAAwBkT,YAAY,KAC1C,+BACI,4BACI,kBAACV,EAAD,CAAmBxa,cAAc,MAGzC,+BACKH,KAAK6B,MAAMoM,MAAQ6M,EAAapS,QAAO,SAAAiR,GAAQ,OAAIA,EAASxZ,gBAAcgB,KAAI,SAAAwY,GAAQ,OACnF,kBAACkB,EAAD,CAAaxZ,IAAKsY,EAASnX,SAAUmX,SAAUA,cA5mD/E,GAAqCjY,IAAMC,WClH3C2Z,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,eAAe,W","file":"static/js/main.36e237a5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHover = this.toggleHover.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHover() {\n        this.setState({ hover: !this.state.hover })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hover) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n        if ( this.state.hover \n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let basis = this.props.basis\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'whatif_current_value':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                } else {\n                    value = whatif.current_value\n                }\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'percent_basis':\n                value = percent_basis\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    value = value - baseline_value\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHover} onMouseLeave={self.toggleHover}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    baseline: PropTypes.object,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const total_performance = this.props.total_performance\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100%' : 'n/a'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'n/a'\n                    break\n                case 'short_change_pct':\n                    value = (Math.round(10 * total_performance.short_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'medium_change_pct':\n                    value = (Math.round(10 * total_performance.medium_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'long_change_pct':\n                    value = (Math.round(10 * total_performance.long_change_pct) / 10).toFixed(1) + '%'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_status_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleReset(event) {\n        this.setState({ \n            transaction: ''\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push('ERROR: Transaction \"' + transaction + '\" must be 4 terms.')\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction = action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n                this.props.on_new_transaction(valid_transaction)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"30\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddCash extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_action = this.state.user_action\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.')\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction = user_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n            this.props.on_new_cash(valid_transaction)\n            this.handleReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"15\" placeholder=\"$1000\" required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddCash.propTypes = {\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push('Tag \"' + user_tag + '\" has now been deleted.')\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class StatusMessages extends React.Component {\n\n    render() {\n        return (\n            <div id=\"status-messages-wrapper\">\n                { this.props.all_status_messages.length ? 'History:' : '' }\n                <div id=\"status-messages\">\n                { this.props.all_status_messages\n                    .map(\n                        (message, i) => {\n                            return (message.toLowerCase().startsWith(\"error\"))\n                            ? <p key={i} className=\"message error\">{message}</p>\n                            : <p key={i} className=\"message\">{message}</p>\n                        }\n                    )\n                }\n                </div>\n            </div>\n        )\n    }\n}\n\nStatusMessages.propTypes = {\n    all_status_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_holdings',\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n    }\n\n    componentDidMount() {\n        let balanceable_value = 0\n        Object.keys(this.props.all_positions).forEach( ticker => balanceable_value += this.props.all_positions[ticker].current_shares * this.props.all_current_quotes[ticker].current_price)\n        this.setState({ balanceable_value: balanceable_value })\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the balance target input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = this.props.get_balanceable_value(value)\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // mirror the input in state, since this is a (React) controlled input\n        this.setState({ [name]: value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'ignore') ? null : parseInt(user_remaining_cash)\n        this.props.on_whatif_submit(this.state.balance_target_set, remaining_cash)\n    }\n\n    isDisabled() {\n        if (this.state.balance_target_set === 'my_holdings') {\n            return (this.props.show_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div>Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_holdings\">my holdings</option>\n                            <option value=\"untagged\">untagged tickers</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag}</option>\n                            )}\n                        </select>\n                        &nbsp;into equal values...</div>\n                    <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                    <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                    <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining}></input> cash remaining (max: ${this.state.balanceable_value})</label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-secondary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { AddCash } from './AddCash'\nimport { DeleteTag } from './DeleteTag'\nimport { StatusMessages } from './StatusMessages'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | logs | what-ifs\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    onWhichInputs(new_which_inputs) {\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"logs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('logs')}>Logs</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <AddTicker\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <AddTag\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <DeleteTag\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <AddTransaction\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_transaction={this.props.on_new_transaction}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <AddCash\n                            on_new_cash={this.props.on_new_cash}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'logs' && (\n                        <React.Fragment>\n                        <StatusMessages\n                            all_status_messages={this.props.all_status_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_holdings={this.props.show_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object,\n    all_positions: PropTypes.object,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    all_status_messages: PropTypes.array.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2\n    // },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: {},\n            allTags: {\n                'untagged': []\n            },\n            allWhatifs: {},\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_holdings',\n            column_balanced: '',\n            remaining_cash: null,\n            status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            allPerformanceNumbers: {},\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n            show_holdings: true,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getPositionFromTransactions = this.getPositionFromTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n        }\n\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n        }\n\n        let self = this\n\n        const view_controls = ['show_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_transaction_data = {}\n        if (stored_allTransactions !== null) {\n            indexed_transaction_data = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition = self.getPositionFromTransactions(indexed_transaction_data[ticker])\n                newPosition['symbol'] = ticker\n                newPositions[ticker] = newPosition\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        if (indexed_transaction_data.hasOwnProperty('cash')) {\n            let newPosition = {}\n            newPosition = self.getPositionFromCashTransactions(indexed_transaction_data['cash'])\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(stored_allTags, newPositions, newCurrentQuotes, stored_controls['show_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(stored_allTags, newPerformanceNumbers)))\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getPositionFromTransactions(transactions) {\n        let inflows = 0, outflows = 0, current_shares = 0, action, num_shares, ticker, value\n\n        transactions.forEach(function(transaction) {\n            [action, num_shares, ticker, value] = transaction.split(' ')\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [action, value] = cash_transaction.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_holdings, show_cash) {\n\n        let holdings = (show_holdings === null) ? this.state.show_holdings : show_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = all_quotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short = all_performance_numbers[ticker]['short_change_pct']\n            let medium = all_performance_numbers[ticker]['medium_change_pct']\n            let long = all_performance_numbers[ticker]['long_change_pct']\n\n            aggr_performance_by_tag['_everything_'].short_change_pct += short\n            aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n            aggr_performance_by_tag['_everything_'].long_change_pct += long\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    aggr_performance_by_tag[tag].short_change_pct += short\n                    aggr_performance_by_tag[tag].medium_change_pct += medium\n                    aggr_performance_by_tag[tag].long_change_pct += long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_holdings = (name === 'show_holdings') ? new_value : this.state.show_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            delete newAllTransactions[delete_ticker]\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                status_messages: newStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction) {\n        let action, num_shares, ticker, total\n        [action, num_shares, ticker, total]  = new_transaction.split(' ')\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty(ticker) && newAllTransactions[ticker] !== null) {\n                newAllTransactions[ticker] = newAllTransactions[ticker].concat([new_transaction])\n            } else {\n                newAllTransactions[ticker] = [new_transaction]\n            }\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewCash(new_cash_transaction) {\n        let action, total\n        [action, total]  = new_cash_transaction.split(' ')\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty('cash') && newAllTransactions['cash'] !== null) {\n                newAllTransactions['cash'] = newAllTransactions['cash'].concat([new_cash_transaction])\n            } else {\n                newAllTransactions['cash'] = [new_cash_transaction]\n            }\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Tag \"' + delete_tag + '\" has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                status_messages: newStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newStatusMessages = [...prevState.status_messages]\n            newStatusMessages = [...new_messages.reverse(), ...newStatusMessages]\n            return { status_messages: newStatusMessages }\n        })\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBalanceableValue(balance_target_set) { // 'my_holdings' | 'untagged' | {any tag name}\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_position = 0\n        if (this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_position = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_position\n\n        if (balance_target_set === 'my_holdings') {\n            if (this.state.show_holdings) {\n                Object.keys(this.state.allPositions).filter( ticker => ticker !== 'cash' ).forEach( function(ticker) {\n                    balanceable_value += self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                })\n            }\n        } else if (balance_target_set === 'untagged') {\n            if (this.state.show_untagged && this.state.allTags.hasOwnProperty('untagged')) {\n                this.state.allTags['untagged'].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    balanceable_value += self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                })\n            }\n        } else { // balance_target_set is a tag name\n            if (this.state.show_tagged) {\n                this.state.allTags[balance_target_set].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    balanceable_value += self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                })\n            }\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(balance_target_set, remaining_cash) {\n        this.setState({ remaining_cash: remaining_cash, balance_target_set: balance_target_set })\n        this.onWhatifGo(balance_target_set, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(balance_target_set, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && remaining_cash !== null\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_balance_value = this.getBalanceableValue(balance_target_set) // includes cash if show_cash is enabled\n        if (remaining_cash === null) {\n            total_balance_value -= original_cash_position\n        } else {\n            total_balance_value -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let tickers_to_balance = []\n        if (balance_target_set === 'my_holdings') {\n            tickers_to_balance = [...this.getHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (balance_target_set === 'untagged') {\n            tickers_to_balance = [...this.getUntagged()]\n        } else {\n            tickers_to_balance = this.state.allTags[balance_target_set]\n        }\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            column_balanced: 'current_value',\n            values: {}\n        }\n        let actual_remaining_cash = original_cash_position\n        tickers_to_balance.forEach(function(ticker) {\n            let target_value = total_balance_value / tickers_to_balance.length\n            let whatif_shares = Math.floor(target_value / self.state.allCurrentQuotes[ticker].current_price)\n            let whatif_value = whatif_shares * self.state.allCurrentQuotes[ticker].current_price\n            let original_value = self.getCurrentValue(ticker)\n            new_whatif.values[ticker] = {}\n            new_whatif.values[ticker]['current_shares'] = whatif_shares\n            new_whatif.values[ticker]['current_value'] = whatif_value\n            if (adjusting_cash) {\n                let value_delta = whatif_value - original_value\n                actual_remaining_cash -= value_delta \n            }\n        })\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n        }\n        this.setState({ allWhatifs: new_whatif.values, column_balanced: new_whatif.column_balanced })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_basis', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n\n        const row_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {all_columns_namesorted.map(column => (\n                        <span key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name) } className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</span>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate}) => (\n            <GridHeaderRow\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                volume={row_data.volume}\n                basis={row_data.basis}\n                current_shares={row_data.current_shares}\n                current_value={row_data.current_value}\n                realized_gains={row_data.realized_gains}\n                performance_numbers={row_data.performance_numbers}\n                baseline={row_data.baseline}\n                total_value={row_data.total_value}\n                total_basis={row_data.total_basis}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n            />\n        )\n\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = self.state.allCurrentQuotes[ticker].current_price\n            new_row['change_pct'] = self.state.allCurrentQuotes[ticker].change_pct\n            new_row['volume'] = self.state.allCurrentQuotes[ticker].volume\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['performance_numbers'] = self.state.allPerformanceNumbers[ticker]\n            new_row['baseline'] = self.state.baseline\n            new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n            new_row['total_basis'] = self.state.aggrBasis['_everything_']\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n                new_row['total_basis'] = self.state.aggrBasis['_everything_']\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n          \n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"input-controls\">\n                        <InputForms\n                            all_stocks={this.state.allStocks}\n                            all_tags={this.state.allTags}\n                            all_current_quotes={this.state.allCurrentQuotes}\n                            all_positions={this.state.allPositions}\n                            show_holdings={this.state.show_holdings}\n                            show_tagged={this.state.show_tagged}\n                            show_untagged={this.state.show_untagged}\n                            show_cash={this.state.show_cash}\n                            get_balanceable_value={this.getBalanceableValue}\n                            on_new_tickers={this.onNewTickers}\n                            on_new_tags={this.onNewTags}\n                            on_delete_tag={this.onDeleteTag}\n                            on_new_transaction={this.onNewTransaction}\n                            on_new_cash={this.onNewCash}\n                            all_status_messages={this.state.status_messages}\n                            on_new_messages={this.onNewMessages}\n                            on_whatif_submit={this.onWhatifSubmit}\n                        />\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n\n                        <div id=\"page-settings\">\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <PopulateHeaderRow is_aggregate={false} />\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={this.state.aggrTotalValue['_everything_']}\n                            total_basis={this.state.aggrBasis['_everything_']}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <tr>\n                                <PopulateHeaderRow is_aggregate={true} />\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}