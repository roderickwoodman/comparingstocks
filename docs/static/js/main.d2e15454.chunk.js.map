{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/TickerAdd.js","components/TagAdd.js","components/TransactionAdd.js","components/TransactionsList.js","components/TagDelete.js","components/MyPerformance.js","components/Console.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","highlight_column","map","i","key","String","fromCharCode","className","onClick","e","undefined","React","Component","EditNumericCell","state","user_value","user_value_is_valid","handleEscapeKey","handleChange","handleSubmit","isNaN","original_value","setState","elem","focus","document","addEventListener","removeEventListener","event","keyCode","on_escape_key","target","value","length","preventDefault","on_new_value","onSubmit","ref","type","id","onChange","size","disabled","GridRow","hovering_symbol","hovering_risk_factor","user_risk_factor","user_risk_factor_valid","formatDate","onWhatifCellClick","toggleHoverSymbol","toggleHoverRiskFactor","populateMemberButton","populateDeleteButton","populateEditButton","editRiskFactor","onNewValue","populateCellValue","numberWithCommas","daysAgo","isQuoteFromToday","flagQuoteError","flagQuoteErrorOnPositionCell","epoch","d","Date","month","getMonth","day","getDate","year","getFullYear","join","symbol","is_aggr","row_name","on_remove_from_tag","special_classes","includes","membership_set","on_delete_tag","current_shares","on_delete_ticker","editing_row","on_edit_cell","change_pct","performance","performance_numbers","baseline","short_change_pct","style_realized_performance","start_date","show_only_achieved_performance","medium_change_pct","long_change_pct","new_value","on_modify_risk_factor","current_edit_value","num_decimals","baseline_value","prefix","suffix","adjust_decimal","performance_value","quote_date","total_value","total_basis","current_price","current_value","risk_factor","visible_risk_factor","percent_value","percent_basis","profit","percent_profit","value_at_risk","basis","basis_risked","realized_gains","whatif","risk_factor_modified","parseInt","volume","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","date_str","now","then","days_ago","quote_date_str","error_if_not_todays_quote","row_classes","special_class","member_count","sort","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","short_perf","total_performance","medium_perf","long_perf","styleTotalsCell","populateTotalsCellValue","TickerAdd","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","validateTickers","user_tag","user_tickers","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_messages","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","new_console_message_set","num_errors","filter","message","create_console_message_set","messages","on_new_tickers","on_new_console_messages","onReset","placeholder","required","tag_name","TagAdd","user_tags_string","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","TransactionAdd","transaction_date","transaction","user_cash_action","user_cash_amount","validateTransaction","handleCashChange","handleCashReset","handleActionChange","handleCashSubmit","getCashOperationPlaceholder","new_message","user_date","user_cash_operation","terms","cash_amount","parseFloat","valid_transaction_summary","on_new_cash","user_transaction","summary_message","action","num_shares","total","on_new_transaction","TransactionsList","exportRef","createRef","importRef","filter_str","file","onExportButton","onHiddenImportChange","exported_json","transactions","JSON","parse","stringify","all_transactions","risk","all_risk","data","encodeURIComponent","a","createElement","href","download","innerHTML","current","appendChild","click","remove","files","reader","FileReader","readAsText","onload","evt","file_contents","result","on_import_transactions","sorted_filtered_transactions","summary","b","accept","style","width","visibility","modified_at","on_delete_transaction","TagDelete","delete_tag","MyPerformance","period_size","period_data","data_sort_dir","generatePeriodData","formatCurrency","getDisplayedPerformance","getMonthEndQuote","getYear","getPeriod","formatPerformance","formatIndexPerformance","formatWholePercentage","onToggleSortOrder","handlePeriodChange","stored_data_sort_dir","localStorage","getItem","stored_period_size","sorted_transactions","date","new_console_messages","first_period","first_year","first_month","floor","today_period","periods_of_performance","start_baselinequote","start_baselineprice","prev_quote_month","prev_quote_year","today","today_year","today_month","price","adjusted_close","start_shares","start_tickervalue","start_totalvalue","p","period","new_period","end_shares","end_cash","end_transfersinvalue","end_tickervalue","end_totalvalue","assign","period_sort_suffix","period_display_suffix","slice","toLocaleString","target_year","period_transactions","t","shares","cash_delta","share_delta","end_tickerdate","this_quote_month","this_quote_year","lastavailablequote_month_str","lastavailablequote_year_str","all_month_end_dates","lastavailablequote_month","lastavailablequote_year","entries","position","month_end_quote","end_baselineprice","end_baselinedate","end_baselinequote","adjusted_transfer_value","zb_start_month","zb_end_month","end_year","period_start_date","period_end_date","period_days","transactions_of_cash","fraction_of_period","transfer_date","zb_month","dollars","retval","sort_name","period_baseline_change_pct","my_perf","period_change_pct","baseline_perf","monthly_quotes","all_monthly_quotes","monthly_dates","period_idx","findIndex","performance_obj","displayed","index","display_value","index_value","percentage","num_periods","el","getElementById","period_width","scrollWidth","new_scroll_left","scrollLeft","prevState","new_sort_dir","setItem","newPeriod","displayed_performance","qdata","sorted_data","end_tickervaluefraction","end_cashfraction","Console","getClasses","message_sets","all_console_messages","message_set","j","WhatIf","balanceable_value","balance_target_set","balance_target_column","sell_all_of","cash_treatment","cash_remaining","cash_valid","isDisabled","new_balanceable_value","get_balanceable_value","stored_balance_target_set","stored_balance_target_column","stored_cash_remaining","selectedOptions","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","multiple_tickers","item","user_remaining_cash","remaining_cash","on_whatif_submit","show_current_holdings","show_untagged","show_tagged","excludable_tickers","all_positions","untagged","entry","multiple","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","stored_which_inputs","new_which_inputs","clear_last_console_message","Fragment","all_current_quotes","show_previous_holdings","category","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthEndDates","allMonthlyQuotes","allPositions","allTransactions","allTags","allPerformanceNumbers","allRisk","allWhatifs","allConsoleMessages","last_console_message","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getTransactionById","getTransactionsByTicker","getPositionFromSingleTickerTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","showColumns","createConsoleMessageSet","onToggleShowColumn","onNewTransaction","onImportTransactions","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","onDeleteTransaction","onEditCell","onModifyRiskFactor","onEscapeKey","onNewConsoleMessages","clearLastConsoleMessage","currentQuoteExists","getClosingPrice","getMostRecentClosingPrice","getCurrentValue","getCurrentShares","getBasis","getBalanceableValue","getMaxBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getCurrentHoldings","getPreviousHoldings","getAdded","getTagged","getUntagged","getTickersFromSet","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_allRisk","stored_controls","control","stored_control","init_shown_columns","stored_shown_columns","stored_baseline","short_pct_gain","medium_pct_gain","long_pct_gain","indexed_risk_data","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeriesDesc","monthly_prices","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthEndDates","newMonthlyQuotes","newPerformanceNumbers","newRisk","cash_delta_from_stock_transactions","newPosition","newCurrentQuote","quoteResult","newTickerQuotes","full_date","newQuote","target_month","substr","found_idx","element","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","ticker_short_ago","ticker_medium_ago","ticker_long_ago","reverse","change","cash_transactions","aggr_position_info","aggr_performance","transaction_id","inflows","outflows","position_start_date","cash_transaction","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_price","ticker_total_value","ticker_realized_gains","ticker_shares","quote_exists","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","column_names","new_shown_column_names","new_shown_columns","splice","idx","getTime","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newAllConsoleMessages","new_transaction_summary","new_transaction","orig_start_date","orig_basis","orig_current_shares","orig_realized_gains","new_start_date","new_current_shares","updatedPosition","updatedCashPosition","imported_tickers","imported_transactions","imported_risk","already_added","window","location","reload","new_cash_transaction_summary","new_cash_transaction","new_cash","delete_transaction_id","transaction_to_delete","remainingTransactionsForTicker","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","factor","target_set","sell_all_set","target_column","include_cash","current_cash_value","target_tickers","show_whatif_columns","adjusting_cash","original_cash_position","total_amount_to_balance","new_whatif","actual_remaining_cash","risk_factors","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","whatif_basis","target_delta_shares","original_currentshares","target_delta","ceil","whatif_balancedbasis","losing","whatif_currentvalue","target_nonzero_tickers","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","currentValue","nonzero_targets","targets","nonzero_ticker","nonzero_i","holding","added_tickers","set","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","all_columns_by_category","category_name","this_category_columns","aggr_total_value","aggr_basis","row_popover","Popover","Title","as","Content","column_popover","general_settings_popover","PopulateHeaderRow","symbol_count","PopulateRow","a_quote_is_old","error_performance_numbers","all_row_data","performance_numbers_exist","new_row","all_ticker_rows","all_aggregate_rows","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","colSpan","row","ReactDOM","render"],"mappings":"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","file":"static/js/main.d2e15454.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            <tr>\n            {this.props.highlight_column !== null && all_columns.map( (column,i) => (\n                <th\n                key={ column.name }\n                >\n                    { (column.name === this.props.highlight_column) \n                    ? 'BEFORE BALANCING' \n                    : (column.name === 'whatif_' + this.props.highlight_column) \n                        ? 'AFTER BALANCING' \n                        : String.fromCharCode(160) }\n                </th>\n            ))}\n            {this.props.highlight_column === null && all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))}\n            </tr>\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    highlight_column: PropTypes.string,\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class EditNumericCell extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_value: '',\n            user_value_is_valid: false\n        }\n        this.handleEscapeKey = this.handleEscapeKey.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (isNaN(this.props.original_value)) {\n            this.setState({ user_value: '' }) \n        } else {\n            this.setState({ user_value: this.props.original_value })\n        }\n        this.elem.focus()\n        document.addEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    handleEscapeKey(event) {\n        if (event.keyCode === 27) {\n            this.props.on_escape_key()\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'user_value') {\n            if (value.length && !isNaN(value) && value > 0) {\n                this.setState({ user_value: value, user_value_is_valid: true })\n            } else {\n                this.setState({ user_value: value, user_value_is_valid: false })\n            }\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.props.on_new_value(this.state.user_value)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input ref={(elem) => {this.elem = elem}} type=\"text\" id=\"edit-cell\" name=\"user_value\" value={this.state.user_value} onChange={this.handleChange} size=\"5\" />\n                <button type=\"submit\" disabled={!this.state.user_value_is_valid}>S</button>\n            </form>\n        )\n    }\n}\n\nEditNumericCell.propTypes = {\n    original_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_new_value: PropTypes.func.isRequired,\n    on_escape_key: PropTypes.func.isRequired\n}\n\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hovering_symbol: false,\n            hovering_risk_factor: false,\n            user_risk_factor: '',\n            user_risk_factor_valid: false\n        }\n        this.formatDate = this.formatDate.bind(this)\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHoverSymbol = this.toggleHoverSymbol.bind(this)\n        this.toggleHoverRiskFactor = this.toggleHoverRiskFactor.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateEditButton = this.populateEditButton.bind(this)\n        this.editRiskFactor = this.editRiskFactor.bind(this)\n        this.onNewValue = this.onNewValue.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n        this.isQuoteFromToday = this.isQuoteFromToday.bind(this)\n        this.flagQuoteError = this.flagQuoteError.bind(this)\n        this.flagQuoteErrorOnPositionCell = this.flagQuoteErrorOnPositionCell.bind(this)\n    }\n\n    formatDate(epoch) {\n        var d = new Date(epoch),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHoverSymbol() {\n        this.setState({ hovering_symbol: !this.state.hovering_symbol })\n    }\n\n    toggleHoverRiskFactor() {\n        this.setState({ hovering_risk_factor: !this.state.hovering_risk_factor })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hovering_symbol) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    populateEditButton(column_name, row_name) {\n        let classes = 'edit'\n        if (this.state.hovering_risk_factor) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'risk_factor'\n            && row_name !== this.props.editing_row\n            && row_name !== 'cash'\n            && !this.props.is_aggregate \n            && !this.props.special_classes.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    editRiskFactor(row_name) {\n        this.props.on_edit_cell(row_name)\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n\n        // hovering\n        if ( this.state.hovering_symbol\n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( this.state.hovering_risk_factor\n            && column_name === 'risk_factor' \n            && !special_classes.includes('index') \n            && !this.props.is_aggregate\n            && row_name !== 'cash' ) {\n            classes += ' hovering'\n        }\n\n        // whatif\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n\n        // italics\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (!this.flagQuoteError()) {\n                    if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                        classes += ' text-red'\n                    }\n                    if (this.props.style_realized_performance\n                        && row_name !== 'cash' \n                        && !special_classes.includes('index')) {\n                            if (isNaN(current_shares) \n                                || !current_shares \n                                || this.daysAgo(this.props.start_date) < 180\n                                ){\n                                classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            case 'medium_change_pct':\n                if (!this.flagQuoteError()) {\n                    if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                        classes += ' text-red'\n                    }\n                    if (this.props.style_realized_performance\n                        && row_name !== 'cash' \n                        && !special_classes.includes('index')) {\n                            if (isNaN(current_shares) \n                                || !current_shares \n                                || this.daysAgo(this.props.start_date) < 365\n                                ){\n                                classes += (this.props.show_only_achieved_performance) ? ' hide' :  ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            case 'long_change_pct':\n                if (!this.flagQuoteError()) {\n                    if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                        classes += ' text-red'\n                    }\n                    if (this.props.style_realized_performance\n                        && row_name !== 'cash' \n                        && !special_classes.includes('index')) {\n                            if (isNaN(current_shares) \n                                || !current_shares \n                                || this.daysAgo(this.props.start_date) < 730\n                                ){\n                                classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    onNewValue(new_value) {\n        this.props.on_modify_risk_factor(this.props.row_name, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n\n        if ( column.name === 'risk_factor'\n            && this.props.row_name === this.props.editing_row ) {\n            return (\n                <EditNumericCell \n                    original_value={this.props.current_edit_value} \n                    on_new_value={this.onNewValue} \n                    on_escape_key={this.props.on_escape_key}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const quote_date = this.props.quote_date\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 0.20\n        let visible_risk_factor = (this.props.risk_factor !== null) ? this.props.risk_factor : 'n/a'\n        if (this.props.row_name === 'cash') {\n            risk_factor = 0\n            visible_risk_factor = 0\n        }\n        let value_at_risk = current_value * risk_factor\n        let basis = this.props.basis\n        let basis_risked = basis * risk_factor\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, profit, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate profit and percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            profit = 'n/a'\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                profit = 'n/a'\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                profit = current_value - basis\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                profit = current_value - basis\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                profit = 0\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'start_date':\n                value = this.props.start_date\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'quote_date':\n                if (!this.props.is_aggregate) {\n                    value = quote_date\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'current_value':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (!this.flagQuoteErrorOnPositionCell()) {\n                        value = current_value\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_current_value':\n                if (!this.flagQuoteErrorOnPositionCell()) {\n                    if (whatif === null) {\n                        value = 'n/a'\n                    } else if (this.props.whatif_format === 'deltas') {\n                        value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                    } else {\n                        value = whatif.current_value\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'percent_value':\n                if (current_value === 'err.') {\n                    value = 'err.'\n                } else if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (!this.flagQuoteErrorOnPositionCell()) {\n                        value = percent_value\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'basis':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    value = basis\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'basis_risked':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (this.props.current_value === 0) {\n                        value = 'n/a'\n                    } else {\n                        value = basis_risked\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_basis_risked':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis_risked - ((basis_risked === 'n/a') ? 0 : basis_risked)\n                } else {\n                    value = whatif.basis_risked\n                }\n                break\n            case 'percent_basis':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    value = percent_basis\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'profit':\n                if (this.props.current_value === 0) {\n                    value = 'n/a'\n                } else if (!this.flagQuoteErrorOnPositionCell()) {\n                    value = profit\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'percent_profit':\n                if (this.props.current_value === 0) {\n                    value = 'n/a'\n                } else if (!this.flagQuoteErrorOnPositionCell()) {\n                    value = percent_profit\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'risk_factor':\n                value = visible_risk_factor\n                break\n            case 'risk_factor_modified':\n                if (this.props.risk_factor_modified !== null) {\n                    value = this.formatDate(parseInt(this.props.risk_factor_modified))\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'value_at_risk':\n                if (typeof current_shares === 'string' || (typeof current_shares === 'number' && current_shares >= 0)) {\n                    if (this.props.current_value === 0) {\n                        value = 'n/a'\n                    } else if (!this.flagQuoteErrorOnPositionCell()) {\n                        value = value_at_risk\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_value_at_risk':\n                if (!this.flagQuoteErrorOnPositionCell()) {\n                    if (whatif === null) {\n                        value = 'n/a'\n                    } else if (this.props.whatif_format === 'deltas') {\n                        value = whatif.value_at_risk - ((value_at_risk === 'n/a') ? 0 : value_at_risk)\n                    } else {\n                        value = whatif.value_at_risk\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'volume':\n                if (!this.flagQuoteError()) {\n                    value = this.props.volume\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'dollar_volume':\n                if (!this.flagQuoteError()) {\n                    if (this.props.volume === 'err.') {\n                        value = 'err.'\n                    } else {\n                        value = this.props.current_price * this.props.volume\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'short_change_pct':\n                if (!this.flagQuoteError()) {\n                    value = this.props.performance_numbers.short_change_pct\n                    performance_value = true\n                    baseline_value = this.props.baseline.short_change_pct\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'medium_change_pct':\n                if (!this.flagQuoteError()) {\n                    value = this.props.performance_numbers.medium_change_pct\n                    performance_value = true\n                    baseline_value = this.props.baseline.medium_change_pct\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'long_change_pct':\n                if (!this.flagQuoteError()) {\n                    value = this.props.performance_numbers.long_change_pct\n                    performance_value = true\n                    baseline_value = this.props.baseline.long_change_pct\n                } else {\n                    value = 'err.'\n                }\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'profit': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === 'err.') {\n            return 'err.'\n        } else if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    if (this.props.row_name === 'S&P500') {\n                        return 'ref.'\n                    } else {\n                        value = value - baseline_value\n                    }\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let days_ago = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return days_ago\n        }\n    }\n\n    isQuoteFromToday(quote_date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let quote_date = new Date(quote_date_str)\n        let days_ago = (now - quote_date) / 1000 / 60 / 60 / 24\n        if (-1 <= days_ago && days_ago <= 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // certain columns' cells can print an error if the quote is out of date\n    flagQuoteError() {\n        if (this.props.error_if_not_todays_quote && !this.isQuoteFromToday(this.props.quote_date)) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // certain POSITION columns' cells may print share-count-based \"n/a\" values before a quote out-of-date error applies\n    flagQuoteErrorOnPositionCell() {\n        if (this.props.is_aggregate) {\n            if (this.props.current_value !== 0 && this.props.error_if_not_todays_quote && !this.isQuoteFromToday(this.props.quote_date)) {\n                return true\n            }\n        } else {\n            if (typeof this.props.current_shares === 'number' && this.props.current_shares !== 0 && this.props.error_if_not_todays_quote && !this.isQuoteFromToday(this.props.quote_date)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.sort().map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHoverSymbol} onMouseLeave={self.toggleHoverSymbol}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name === 'risk_factor') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (e)=>self.editRiskFactor(self.props.row_name) } onMouseEnter={self.toggleHoverRiskFactor} onMouseLeave={self.toggleHoverRiskFactor}>{ self.populateCellValue(column) }{ self.populateEditButton(column.name, self.props.row_name) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    start_date: PropTypes.string,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    quote_date: PropTypes.string,\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor_modified: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    error_if_not_todays_quote: PropTypes.bool,\n    show_only_achieved_performance: PropTypes.bool,\n    baseline: PropTypes.object,\n    style_realized_performance: PropTypes.bool,\n    total_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    total_basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    on_escape_key: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const short_perf = this.props.total_performance.short_change_pct\n        const medium_perf = this.props.total_performance.medium_change_pct\n        const long_perf = this.props.total_performance.long_change_pct\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = (total_value !== 'err.') ? '$' + numberWithCommas(Math.round(total_value)) : 'err.'\n                    break\n                case 'percent_value':\n                    value = (total_value !== 'err.') ? '100%' : 'err.'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'err.'\n                    break\n                case 'short_change_pct':\n                    if (short_perf !== 'err.') {\n                        value = (Math.round(10 * short_perf) / 10).toFixed(1) + '%'\n                    } else {\n                        value = 'err.'\n                    }\n                    break\n                case 'medium_change_pct':\n                    if (medium_perf !== 'err.') {\n                        value = (Math.round(10 * medium_perf) / 10).toFixed(1) + '%'\n                    } else {\n                        value = 'err.'\n                    }\n                    break\n                case 'long_change_pct':\n                    if (long_perf !== 'err.') {\n                        value = (Math.round(10 * long_perf) / 10).toFixed(1) + '%'\n                    } else {\n                        value = 'err.'\n                    }\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TickerAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        let num_errors = new_messages.filter(message => message.includes('ERROR')).length\n        if (num_errors === 0) {\n            num_errors = 'no'\n        }\n        let new_console_message_set\n        if (new_messages.length > 1) {\n            new_console_message_set = this.props.create_console_message_set('Created ' + tickers_to_add.length + ' tickers with ' + num_errors + ' errors.')\n            new_console_message_set.messages = [...new_messages]\n        } else {\n            new_console_message_set = this.props.create_console_message_set(new_messages[0])\n        }\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_console_messages(new_console_message_set)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTickerAdd.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TagAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = [], new_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        let num_errors = new_messages.filter(message => message.includes('ERROR')).length\n        if (num_errors === 0) {\n            num_errors = 'no'\n        }\n        let new_console_message_set\n        if (new_messages.length > 1) {\n            new_console_message_set = this.props.create_console_message_set('Created ' + tags_to_add.length + ' tags with ' + num_errors + ' errors.')\n            new_console_message_set.messages = [...new_messages]\n        } else {\n            new_console_message_set = this.props.create_console_message_set(new_messages[0])\n        }\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_console_messages(new_console_message_set)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTagAdd.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionAdd extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction_date: '',\n            transaction: '',\n            user_cash_action: 'dividend',\n            user_cash_amount: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleCashReset = this.handleCashReset.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleCashSubmit = this.handleCashSubmit.bind(this)\n        this.getCashOperationPlaceholder = this.getCashOperationPlaceholder.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_cash_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleCashReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleCashSubmit(event) {\n        event.preventDefault()\n        let new_message = null\n        let user_cash_action = this.state.user_cash_action\n        let user_date = this.state.transaction_date\n\n        let user_cash_operation = this.state.user_cash_amount\n        let terms = user_cash_operation.split(' ')\n        let user_cash_amount\n\n        if (this.state.user_cash_action === 'dividend') {\n            if (terms.length === 3 && terms[1].toLowerCase() === 'on' && terms[2].replace(/\\W/g,'').length) {\n                user_cash_amount = terms[0]\n            } else {\n                new_message = 'ERROR: Dividend syntax must be in the form: \"$200 on MSFT\"'\n            }\n        } else {\n            user_cash_amount = user_cash_operation\n        }\n\n        if (new_message === null) {\n            let cash_amount = parseFloat(user_cash_amount.trim().replace(/\\$/g, \"\"))\n            if (isNaN(cash_amount)) {\n                new_message = 'ERROR: Cash amount \"' + cash_amount + '\" is not in currency format.'\n            } else {\n                let total = parseFloat((Math.round(cash_amount * 100) / 100).toFixed(2));\n                let valid_transaction_summary = user_date + ': ' + user_cash_action + ' $' + total.toFixed(2) + ' cash'\n                if (this.state.user_cash_action === 'dividend') {\n                    valid_transaction_summary += ' on ' + terms[2].toUpperCase()\n                }\n                new_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                this.props.on_new_cash(valid_transaction_summary)\n                this.handleCashReset()\n            }\n        }\n        let new_console_message_set = this.props.create_console_message_set(new_message)\n        this.props.on_new_console_messages(new_console_message_set)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_messages = [], summary_message\n\n        if (transaction.length < 4) {\n\n            summary_message = 'ERROR: Transaction \"' + transaction + '\" must be 4 terms.'\n            new_messages.push(summary_message)\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction_summary = this.state.transaction_date + ': ' + action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                summary_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                new_messages.push(summary_message)\n                this.props.on_new_transaction(valid_transaction_summary)\n\n            } else {\n                transaction[2] = transaction[2].toUpperCase()\n                transaction[3] = '$' + transaction[3]\n                summary_message = 'ERROR: Transaction \"' + transaction.join(' ') + '\" could not be recorded, see the \"Messages\" tab'\n            }\n        }\n\n        // send all of the messages to print\n        let new_console_message_set = this.props.create_console_message_set(summary_message)\n        new_console_message_set.messages = [...new_messages]\n        this.props.on_new_console_messages(new_console_message_set)\n    }\n\n    getCashOperationPlaceholder() {\n        if (this.state.user_cash_action === 'dividend') {\n            return \"$85.00 on MSFT\"\n        } else if (this.state.user_cash_action === 'fee') {\n            return \"$15\"\n        } else {\n            return \"$1000\"\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form>\n                    <label>Transaction Date:</label>\n                    <input name=\"transaction_date\" value={this.state.transaction_date} onChange={this.handleChange} type=\"date\" size=\"10\" />\n                </form>\n                <form onSubmit={this.handleSubmit}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"25\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction==='' || this.state.transaction_date===''} />\n                    </section>\n                </form>\n                <form onSubmit={this.handleCashSubmit}>\n                    <label>Cash&nbsp;\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"dividend\">dividend</option>\n                            <option value=\"fee\">fee</option>\n                            <option value=\"transferIN\">transfer IN</option>\n                            <option value=\"transferOUT\">transfer OUT</option>\n                        </select>:\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"20\" placeholder={this.getCashOperationPlaceholder()} required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount==='' || this.state.transaction_date===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTransactionAdd.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionsList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.exportRef = React.createRef()\n        this.importRef = React.createRef()\n        this.state = {\n            filter_str: '',\n            file: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.onExportButton = this.onExportButton.bind(this)\n        this.onHiddenImportChange = this.onHiddenImportChange.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n        \n    onExportButton() {\n\n        // prepare the data\n        let exported_json = {\n            transactions: JSON.parse(JSON.stringify(this.props.all_transactions)),\n            risk: JSON.parse(JSON.stringify(this.props.all_risk))\n        }\n        var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exported_json));\n\n        // create the download link\n        var a = document.createElement('a')\n        a.href = 'data:' + data\n        a.download = 'transactions.json'\n        a.innerHTML = 'download'\n\n        // attach the download link, trigger it, and then remove it from the DOM\n        var container = this.exportRef.current\n        container.appendChild(a)\n        a.click()\n        a.remove()\n    }\n\n    onHiddenImportChange(files) {\n        if (files[0]) {\n            let self = this\n            let reader = new FileReader();\n            reader.readAsText(files[0], \"UTF-8\");\n            reader.onload = function (evt) {\n                let file_contents = JSON.parse(evt.target.result)\n                self.props.on_import_transactions(file_contents)\n            }\n        }\n    }\n\n    render() {\n        let sorted_filtered_transactions = this.props.all_transactions\n            .filter( transaction => transaction.summary.toLowerCase().includes(this.state.filter_str.toLowerCase()) )\n            .sort( function(a,b) {\n                if (a.summary < b.summary){\n                    return -1\n                } else if (a.summary > b.summary) {\n                    return 1\n                } else {\n                    return 0\n                }\n            })\n        return (\n            <section id=\"transaction-list\">\n                <section id=\"transaction-list-controls\">\n                    <form>\n                        <label>Filter:</label>\n                        <input name=\"filter_str\" value={this.state.filter_str} onChange={this.handleChange} size=\"15\" />\n\n                        <button className=\"btn btn-sm btn-primary\" onClick={this.onExportButton} disabled={!this.props.all_transactions.length}>export</button>\n                        <div ref={this.exportRef}></div>\n\n                        <label className=\"btn btn-sm btn-primary\">\n                        <input type=\"file\" ref={this.importRef} onChange={ (e) => this.onHiddenImportChange(e.target.files) } accept=\"application/json\" style={{width: 0, visibility: \"hidden\"}} />\n                        import\n                        </label>\n                    </form>\n                </section>\n                <section id=\"transactions\">\n                    {sorted_filtered_transactions.map( transaction => (\n                        <p key={transaction.modified_at} className=\"transaction\" onClick={ (e)=>this.props.on_delete_transaction(transaction.modified_at)}>{transaction.summary}</p>\n                    ))}\n                </section>\n            </section>\n        )\n    }\n}\n\nTransactionsList.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_risk: PropTypes.object.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TagDelete extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        let user_tag = this.state.delete_tag\n        this.props.on_delete_tag(user_tag)\n\n        this.setState({ delete_tag: 'untagged' })\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nTagDelete.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class MyPerformance extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            period_size: 'month',\n            period_data: [],\n            data_sort_dir: 'asc',\n        }\n        this.generatePeriodData = this.generatePeriodData.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.formatCurrency = this.formatCurrency.bind(this)\n        this.getDisplayedPerformance = this.getDisplayedPerformance.bind(this)\n        this.getMonthEndQuote = this.getMonthEndQuote.bind(this)\n        this.getYear = this.getYear.bind(this)\n        this.getPeriod = this.getPeriod.bind(this)\n        this.getMonth = this.getMonth.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.formatPerformance = this.formatPerformance.bind(this)\n        this.formatIndexPerformance = this.formatIndexPerformance.bind(this)\n        this.formatWholePercentage = this.formatWholePercentage.bind(this)\n        this.onToggleSortOrder = this.onToggleSortOrder.bind(this)\n        this.handlePeriodChange = this.handlePeriodChange.bind(this)\n    }\n\n    componentDidMount() {\n\n        let data_sort_dir = 'asc', period_size ='month'\n\n        const stored_data_sort_dir = JSON.parse(localStorage.getItem(\"data_sort_dir\"))\n        if (stored_data_sort_dir !== null) {\n            data_sort_dir = stored_data_sort_dir\n        }\n\n        const stored_period_size = JSON.parse(localStorage.getItem(\"period_size\"))\n        if (stored_period_size !== null) {\n            period_size = stored_period_size\n        }\n\n        this.generatePeriodData(period_size)\n\n        this.setState({ data_sort_dir: data_sort_dir,\n                        period_size: period_size })\n\n    }\n\n    generatePeriodData(period_size) {\n\n        let sorted_transactions = this.props.all_transactions.sort(function(a, b) {\n            if (a.date < b.date) {\n                return -1\n            } else if (a.date > b.date) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        \n        let period_data = []\n        let new_console_messages = []\n\n        if (sorted_transactions.length) {\n\n            // the performance start period includes the earliest added transaction\n            let first_year = parseInt(sorted_transactions[0].date.split('-')[0])\n            let first_month = parseInt(sorted_transactions[0].date.split('-')[1])\n            let first_period\n            if (period_size === 'month') {\n                first_period = first_month\n            } else if (period_size === 'quarter') {\n                first_period = Math.floor((first_month - 1) / 3 + 1)\n            } else if (period_size === 'year') {\n                first_period = 1\n            }\n\n            // the performance end period includes the current date\n            let today = new Date()\n            let today_year = today.getFullYear()\n            let today_month = today.getMonth() + 1\n            let today_period\n            if (period_size === 'month') {\n                today_period = today_month\n            } else if (period_size === 'quarter') {\n                today_period = Math.round(today.getMonth() / 3)\n            } else if (period_size === 'year') {\n                today_period = 1\n            }\n\n            // calculate the number of periods to display\n            let periods_of_performance\n            if (period_size === 'month') {\n                periods_of_performance = (today_year - first_year) * 12 + (today_period - first_period) + 1\n            } else if (period_size === 'quarter') {\n                periods_of_performance = (today_year - first_year) * 4 + (today_period - first_period) + 1\n            } else if (period_size === 'year') {\n                periods_of_performance = (today_year - first_year) + 1\n            }\n\n            // based on MONTHLY quote data, initialize the lookback variables for the previous period\n            let start_baselinequote, start_baselineprice\n            let prev_quote_month, prev_quote_year\n            if (period_size === 'month') {\n                prev_quote_year = (first_month !== 1) ? first_year : first_year - 1\n                prev_quote_month = (first_month !== 1) ? first_month - 1 : 12\n            } else if (period_size === 'quarter') {\n                prev_quote_year = (first_period !== 1) ? first_year : first_year - 1 \n                prev_quote_month = (first_period !== 1) ? (first_period - 1) * 3 : 9\n            } else if (period_size === 'year') {\n                prev_quote_year = first_year - 1\n                prev_quote_month = 12\n            }\n            start_baselinequote = this.getMonthEndQuote('S&P500', prev_quote_year, prev_quote_month)\n            if (start_baselinequote === undefined || start_baselinequote.price === undefined) {\n                new_console_messages.push('ERROR: quote for symbol S&P500 for month '+prev_quote_year+'-'+prev_quote_month+' is unavailable')\n                start_baselineprice = 'err.'\n            } else {\n                start_baselineprice = start_baselinequote.price.adjusted_close\n            }\n\n            // calculate all period data\n            let year = first_year\n            let start_shares = {}, start_cash = 0, start_tickervalue = 0, start_totalvalue = 0\n            for (let p = 0; p < periods_of_performance; p++) {\n                \n                // initialization\n                let period, new_period = {}\n                if (period_size === 'month') {\n                    period = (p + first_period - 1) % 12 + 1\n                } else if (period_size === 'quarter') {\n                    period = (p + first_period - 1) % 4 + 1\n                } else if (period_size === 'year') {\n                    period =  1\n                }\n                new_period['period'] = period\n                if (period === 1 && p !== 0) {\n                    year += 1\n                }\n                new_period['year'] = year\n                let end_shares = {}, end_cash = 0, end_transfersinvalue = 0\n                if (p !== 0) {\n                    start_tickervalue = period_data[p-1].end_tickervalue\n                    start_totalvalue = period_data[p-1].end_totalvalue\n                    end_shares = Object.assign({}, period_data[p-1].end_shares)\n                    end_cash = period_data[p-1].end_cash\n                } else {\n                    end_shares = Object.assign({}, start_shares)\n                    end_cash = start_cash\n                }\n                let period_sort_suffix, period_display_suffix\n                if (period_size === 'month') {\n                    let d = new Date(1980, period - 1, 1)\n                    period_sort_suffix = 'M' + ('0' + period).slice(-2)\n                    period_display_suffix = ' ' + d.toLocaleString('default', { month: 'short' })\n                } else if (period_size === 'quarter') {\n                    period_sort_suffix = 'Q' + ('0' + period).slice(-2)\n                    period_display_suffix = 'Q' + period\n                } else if (period_size === 'year') {\n                    period_sort_suffix = ''\n                    period_display_suffix = ''\n                }\n                new_period['display_name'] = (p !== periods_of_performance - 1) ? year + period_display_suffix : 'current'\n                new_period['sort_name'] = year + period_sort_suffix\n\n                // determine period's transactions\n                let target_year = year\n                let period_transactions = sorted_transactions.filter( t => this.getYear(t.date) === target_year && this.getPeriod(period_size, t.date) === period )\n                new_period['transactions_of_stock'] = period_transactions.filter( t => t.ticker !== 'cash' )\n                new_period['transactions_of_cash'] = period_transactions.filter( t => t.ticker === 'cash' )\n\n                // determine period-end shares and cash value\n                for (let transaction of period_transactions) {\n                    let action, ticker, shares, total\n                    [action, ticker, shares, total] = [transaction.action, transaction.ticker, transaction.shares, transaction.total]\n                    if (ticker === 'cash') {\n                        let cash_delta = (action === 'transferIN' || action === 'dividend') ? total : -1 * total\n                        if (action === 'transferIN' || action === 'transferOUT') {\n                            end_transfersinvalue += cash_delta\n                        }\n                        end_cash += cash_delta\n                    } else {\n                        let share_delta = (action === 'buy') ? shares : -1 * shares\n                        let cash_delta = (action === 'buy') ? -1 * total : total\n                        if (end_shares.hasOwnProperty(ticker)) {\n                            end_shares[ticker] += share_delta\n                        } else {\n                            end_shares[ticker] = share_delta\n                        }\n                        end_cash += cash_delta\n                    }\n                }\n                new_period['end_shares'] = end_shares\n                new_period['end_cash'] = end_cash\n                new_period['end_transfersinvalue'] = end_transfersinvalue\n\n                // determine period-end ticker value\n                let self = this\n                let end_tickervalue = 0, end_tickerdate = null\n                let this_quote_month\n                if (period_size === 'month') {\n                    this_quote_month = period\n                } else if (period_size === 'quarter') {\n                    this_quote_month = period * 3\n                } else if (period_size === 'year') {\n                    this_quote_month = 12\n                }\n                let this_quote_year = target_year\n                if (target_year === today_year && period === today_period) { // for a partial last period, use a previous month's quotes\n                    let lastavailablequote_month_str, lastavailablequote_year_str\n                    [lastavailablequote_year_str, lastavailablequote_month_str] = this.props.all_month_end_dates[0].split('-')\n                    let lastavailablequote_month = parseInt(lastavailablequote_month_str)\n                    let lastavailablequote_year = parseInt(lastavailablequote_year_str)\n                    if (period_size === 'year') {\n                        if (lastavailablequote_year === today_year) {\n                            this_quote_month = lastavailablequote_month\n                            this_quote_year = lastavailablequote_year\n                        }\n                    } else {\n                        if (lastavailablequote_month !== today_month || lastavailablequote_year !== today_year) { // allow the previous month's quotes only\n                            if (today_month === 1 && (lastavailablequote_month !== 12 || lastavailablequote_year !== today_year - 1)) {\n                                this_quote_month = 12\n                                this_quote_year = today_year - 1\n                            } else if (today_month !== 1 && (lastavailablequote_month !== today_month - 1 || lastavailablequote_year !== today_year)) {\n                                this_quote_month = today_month - 1\n                                this_quote_year = today_year\n                            }\n                        }\n                    }\n                }\n                Object.entries(end_shares).forEach(function(position) {\n                    if (position[1] !== 0) {\n                        let month_end_quote = self.getMonthEndQuote(position[0], this_quote_year, this_quote_month)\n                        if (month_end_quote === undefined || month_end_quote.price === undefined) {\n                            new_console_messages.push('ERROR: quote for symbol '+position[0]+' for month '+this_quote_year+'-'+this_quote_month+' is unavailable')\n                            end_tickervalue = 'err.'\n                            end_tickerdate = null\n                        } else if (end_tickervalue !== 'err.') {\n                            end_tickervalue += position[1] * month_end_quote.price.adjusted_close\n                            if (end_tickerdate === null) {\n                                end_tickerdate = month_end_quote.date\n                            } else if (end_tickerdate !== month_end_quote.date) {\n                                new_console_messages.push('ERROR: quote dates for month '+this_quote_year+'-'+this_quote_month+' do not match for all symbols ('+end_tickerdate+' & '+month_end_quote.date+')')\n                            }\n                        }\n                    }\n                })\n                new_period['end_tickervalue'] = end_tickervalue\n                new_period['end_tickerdate'] = end_tickerdate\n                \n                // determine period-end total value\n                let end_totalvalue\n                if (typeof end_tickervalue !== 'number' || typeof end_cash !== 'number') {\n                    end_totalvalue = 'err.'\n                } else {\n                    end_totalvalue = end_tickervalue + end_cash\n                }\n                new_period['end_totalvalue'] = end_totalvalue\n                new_period['end_tickervaluefraction'] = end_tickervalue / end_totalvalue\n                new_period['end_cashfraction'] = end_cash / end_totalvalue\n\n                // determine period-end baseline value\n                let end_baselineprice, end_baselinedate\n                let end_baselinequote = self.getMonthEndQuote('S&P500', this_quote_year, this_quote_month)\n                if (end_baselinequote === undefined || end_baselinequote.price === undefined) {\n                    new_console_messages.push('ERROR: quote for symbol S&P500 for month '+this_quote_year+'-'+this_quote_month+' is unavailable')\n                    end_baselineprice = 'err.'\n                    end_baselinedate = null\n                } else {\n                    end_baselineprice = end_baselinequote.price.adjusted_close\n                    end_baselinedate = end_baselinequote.date\n                }\n                new_period['end_baselineprice'] = end_baselineprice\n                new_period['end_baselinedate'] = end_baselinedate\n\n                // determine period-over-period performance\n                // HPR (holding period return) = end / prev_end - 1\n                // HPR (HPR, adjusted for transfers) = end / (prev_end + transfersIN) - 1\n                // transfersIN, adjusted for middle-of-period transfers... aka Modified Dietz method)\n                //   transfersIN = transferINa * fraction of period duration) + (transferINb * fraction of period duration)\n                let adjusted_transfer_value = 0\n                let zb_start_month, zb_end_month, end_year\n                if (period_size === 'month') {\n                    zb_start_month = period - 1\n                    zb_end_month = (zb_start_month !== 11) ? zb_start_month + 1 : 1\n                    end_year = (zb_start_month !== 11) ? target_year : target_year + 1\n                } else if (period_size === 'quarter') {\n                    zb_start_month = period * 3 - 3\n                    zb_end_month = (period !== 4) ? zb_start_month + 3 : 1\n                    end_year = (period !== 4) ? target_year : target_year + 1\n                } else if (period_size === 'year') {\n                    zb_start_month = 0\n                    zb_end_month = 0\n                    end_year = target_year + 1\n                }\n                let period_start_date = new Date(target_year, zb_start_month, 1)\n                let period_end_date = new Date(end_year, zb_end_month, 1)\n                let period_days = Math.round((period_end_date - period_start_date) / (1000 * 60 * 60 * 24))\n                new_period.transactions_of_cash.forEach(function(transaction) {\n                    let transfer_month, transfer_day, fraction_of_period\n                    [transfer_month, transfer_day] = [parseInt(transaction.date.split('-')[1]), parseInt(transaction.date.split('-')[2])]\n                    let transfer_date = new Date(target_year, transfer_month - 1, transfer_day)\n                    if (transaction.action === 'transferIN') {\n                        fraction_of_period = (period_end_date - transfer_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value += transaction.total * fraction_of_period\n                    } else if (transaction.action === 'transferOUT') {\n                        fraction_of_period = (transfer_date - period_start_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value -= transaction.total * fraction_of_period\n                    }\n                })\n                let performance\n                if (typeof start_totalvalue !== 'number' || typeof end_totalvalue !== 'number') {\n                    performance = 'err.'\n                } else if (start_tickervalue === 0 && end_tickervalue === 0) {\n                    performance = 0\n                } else {\n                    performance = (end_totalvalue / (start_totalvalue + adjusted_transfer_value)) - 1\n                }\n                new_period['period_change_pct'] = performance\n\n                // determine period-over-period baseline performance\n                performance = 'n/a'\n                if (typeof start_baselineprice !== 'number' || typeof end_baselineprice !== 'number') {\n                    performance = 'err.'\n                } else if (p === 0) {\n                    performance = (end_baselineprice / start_baselineprice) - 1\n                } else {\n                    performance = (end_baselineprice / period_data[p-1].end_baselineprice) - 1\n                }\n                new_period['period_baseline_change_pct'] = performance\n\n                // store the data object\n                period_data.push(new_period)\n            }\n        }\n\n        if (new_console_messages.length) {\n            let message_summary = 'ERROR: quote(s) unavailable, see the \"Messages\" tab'\n            let new_console_message_set = this.props.create_console_message_set(message_summary)\n            new_console_message_set.messages = [...new_console_messages]\n            this.props.on_new_console_messages(new_console_message_set)\n        }\n\n        this.setState({ period_data: period_data })\n\n    }\n\n    getYear(date) {\n        return parseInt(date.split('-')[0])\n    }\n\n    getPeriod(period_size, date) {\n        let zb_month = parseInt(date.split('-')[1])-1\n\n        if (period_size === 'month') {\n            return zb_month + 1\n        } else if (period_size === 'quarter') {\n            return Math.floor(zb_month / 3) + 1\n        } else if (period_size === 'year') {\n            return 1\n        } else {\n            return 'n/a'\n        }\n    }\n\n    getMonth(date) {\n        return parseInt(date.split('-')[1])\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    formatCurrency(dollars) {\n        let prefix, retval = dollars\n        if (typeof dollars === 'number') {\n            let value = Math.round(dollars)\n            retval = this.numberWithCommas(Math.abs(value))\n            prefix = (value < 0 ) ? '-$' : '$'\n            retval = prefix + retval\n        } else {\n            retval = 'err.'\n        }\n        return retval\n    }\n\n    getDisplayedPerformance(period_data) {\n        let retval = {}\n        retval['key'] = period_data.sort_name\n        retval['display_value'] = 'err.'\n        retval['baseline_value'] = 'err.'\n        retval['index_value'] = period_data.period_baseline_change_pct\n        let my_perf = period_data.period_change_pct\n        if (my_perf === 'err.') {\n            retval['display_value'] = 'err.'\n        } else if (typeof my_perf === 'number') {\n            if (this.props.baseline === 'sp500_pct_gain') {\n                let baseline_perf = period_data.period_baseline_change_pct\n                if (typeof baseline_perf !== 'number') {\n                    return retval\n                } else {\n                    retval['display_value'] = my_perf - baseline_perf\n                    retval['baseline_value'] = baseline_perf\n                }\n            } else {\n                retval['display_value'] = my_perf\n                retval['baseline_value'] = 0\n            }\n        }\n        return retval\n    }\n\n    getMonthEndQuote(ticker, year, month) {\n        let monthly_quotes = this.props.all_monthly_quotes\n        let monthly_dates = this.props.all_month_end_dates\n        let period_idx = monthly_dates.findIndex( date => this.getYear(date) === year && this.getMonth(date) === month )\n        let retval = {}\n        if (period_idx !== -1) {\n            let quote_date = monthly_dates[period_idx]\n            retval['date'] = quote_date\n            retval['price'] = (monthly_quotes[ticker].hasOwnProperty(quote_date)) ? monthly_quotes[ticker][quote_date] : undefined\n        } else {\n            retval = undefined\n        }\n        return retval\n    }\n\n    styleCell(performance_obj) {\n        let displayed, baseline, index\n        [displayed, baseline, index] = [performance_obj.display_value, performance_obj.baseline_value, performance_obj.index_value]\n        let classes = 'performance-cell'\n        if ( this.props.baseline === 'sp500_pct_gain') {\n            if (displayed > 0) {\n                classes += ' text-green'\n            } else if (displayed < 0) {\n                classes += ' text-red'\n            }\n        } else {\n            if ( displayed < baseline || displayed < 0 ) {\n                classes += ' text-red'\n            } else if (displayed > index && displayed > 0) {\n                classes += ' text-green'\n            }\n        }\n        return classes\n    }\n\n    formatPerformance(performance) {\n        if (performance === 'err.' || performance === 'ref.') {\n            return performance\n        } else if (typeof performance !== 'number') {\n            return '-'\n        } else {\n            return (Math.round(performance * 100 * 10) / 10).toFixed(1) + '%'\n        }\n    }\n\n    formatIndexPerformance(performance) {\n        if ( this.props.baseline === 'sp500_pct_gain') {\n            return this.formatPerformance('ref.')\n        } else {\n            return this.formatPerformance(performance)\n        }\n    }\n\n    formatWholePercentage(percentage) {\n        if (percentage === 'err.') {\n            return 'err.'\n        } else if (typeof percentage !== 'number' || isNaN(percentage)) {\n            return '?'\n        } else {\n            return (Math.round(percentage * 100)) + '%'\n        }\n    }\n\n    onToggleSortOrder(num_periods) {\n        let el = document.getElementById('my-performance-periods')\n        let period_width = Math.floor(el.scrollWidth / num_periods)\n        let leftmost_zbperiod_shown = Math.floor(el.scrollLeft / period_width)\n        let new_scroll_left = (num_periods - leftmost_zbperiod_shown - 1) * period_width\n        el.scrollLeft = new_scroll_left\n        this.setState(prevState => {\n            let new_sort_dir = (prevState.data_sort_dir === 'asc') ? 'desc' : 'asc'\n            localStorage.setItem('data_sort_dir', JSON.stringify(new_sort_dir))\n            return { \n                data_sort_dir: new_sort_dir \n            }\n        })\n    }\n\n    handlePeriodChange(event) {\n        let newPeriod = event.target.id.replace(/select-/g, '')\n        localStorage.setItem('period_size', JSON.stringify(newPeriod))\n        this.setState({ period_size: newPeriod })\n        this.generatePeriodData(newPeriod)\n    }\n\n    render() {\n        let self = this\n        let displayed_performance = {}\n        this.state.period_data.forEach(function(qdata) {\n            displayed_performance[qdata.sort_name] = self.getDisplayedPerformance(qdata)\n        })\n        let sorted_data = this.state.period_data.sort( function(a,b) {\n            if (a.sort_name < b.sort_name) {\n                return (self.state.data_sort_dir === 'asc') ? -1 : 1\n            } else if (a.sort_name > b.sort_name) {\n                return (self.state.data_sort_dir === 'asc') ? 1 : -1\n            } else {\n                return 0\n            }\n        })\n        return (\n            <div id=\"my-performance-wrapper\">\n                <div id=\"my-performance-body\">\n                    <div id=\"my-performance-rowlabels\">\n                        <div id=\"my-performance-controls\">\n                            <ul id=\"periodsize-selector\">\n                                <li id=\"select-year\" className={\"strong selector\" + (this.state.period_size === \"year\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Y</li>\n                                <li id=\"select-quarter\" className={\"strong selector\" + (this.state.period_size === \"quarter\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Q</li>\n                                <li id=\"select-month\" className={\"strong selector\" + (this.state.period_size === \"month\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>M</li>\n                            </ul>\n                            <div id=\"sortorder-button\">\n                                <button onClick={ (e)=>this.onToggleSortOrder(sorted_data.length) } className=\"strong\">&#x21c6;</button>\n                            </div>\n                        </div>\n                        <p className=\"strong\">stocks:</p>\n                        <p className=\"strong\">cash:</p>\n                        <p className=\"strong\">transfers in:</p>\n                        <p className=\"strong\">total:</p>\n                        <p className=\"strong\">my perf{ (this.props.baseline === 'sp500_pct_gain') ? ' delta' : '' }:</p>\n                        <p className=\"strong\">S&amp;P500:</p>\n                    </div>\n                    <div id=\"my-performance-periods\">\n                        { sorted_data.map( qdata => (\n                        <div className=\"period-data\" key={qdata.sort_name}>\n                            <p className=\"strong\">{qdata.display_name}</p>\n                            <p>{this.formatCurrency(qdata.end_tickervalue)} ({this.formatWholePercentage(qdata.end_tickervaluefraction)})</p>\n                            <p>{this.formatCurrency(qdata.end_cash)} ({this.formatWholePercentage(qdata.end_cashfraction)})</p>\n                            <p>{this.formatCurrency(qdata.end_transfersinvalue)}</p>\n                            <p className=\"strong\">{this.formatCurrency(qdata.end_totalvalue)}</p>\n                            <p className={ this.styleCell(displayed_performance[qdata.sort_name]) }>{ this.formatPerformance(displayed_performance[qdata.sort_name].display_value) }</p>\n                            <p>{ this.formatIndexPerformance(displayed_performance[qdata.sort_name].index_value) }</p>\n                        </div>\n                        ))}\n                    </div>\n                </div>\n                <div id=\"my-performance-footer\">\n                </div>\n\n            </div>\n        )\n    }\n}\n\nMyPerformance.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    all_positions: PropTypes.object.isRequired,\n    all_monthly_quotes: PropTypes.object.isRequired,\n    all_month_end_dates: PropTypes.array.isRequired,\n    baseline: PropTypes.string.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class Console extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.getClasses = this.getClasses.bind(this)\n    }\n\n    getClasses(message) {\n        let classes = 'message'\n        if (message.toLowerCase().includes('error')) {\n            classes += ' warning'\n        }\n        return classes\n    }\n\n    render() {\n        let message_sets = this.props.all_console_messages\n        return (\n            <div id=\"console-messages-wrapper\">\n                { message_sets.length ? 'History:' : '' }\n                <div id=\"console-messages\">\n                { message_sets && message_sets.map( message_set => (\n                    message_set.messages.map( (message, j) => (\n                            <p key={j} className={this.getClasses(message)}>{message}</p>\n                    ))\n                ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nConsole.propTypes = {\n    all_console_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_current_holdings',\n            balance_target_column: 'current_value',\n            sell_all_of: ['sell_none'],\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    componentDidMount() {\n        let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column))\n        this.setState({ balanceable_value: new_balanceable_value })\n\n        const stored_balance_target_set = JSON.parse(localStorage.getItem(\"balance_target_set\"))\n        if (stored_balance_target_set !== null) {\n            this.setState({ balance_target_set: stored_balance_target_set })\n        }\n\n        const stored_balance_target_column = JSON.parse(localStorage.getItem(\"balance_target_column\"))\n        if (stored_balance_target_column !== null) {\n            this.setState({ balance_target_column: stored_balance_target_column })\n        }\n\n        const stored_cash_remaining = JSON.parse(localStorage.getItem(\"cash_remaining\"))\n        if (stored_cash_remaining !== null) {\n            this.setState({ cash_remaining: stored_cash_remaining })\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value, selectedOptions } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(value, this.state.sell_all_of, this.state.balance_target_column))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balance_target_column') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.sell_all_of, value))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.,]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        if (name !== 'sell_all_of') {\n            this.setState({ [name]: value })\n        } else {\n            let multiple_tickers = Array.from(selectedOptions, (item) => item.value)\n            if (multiple_tickers.includes('sell_none')) {\n                multiple_tickers = ['sell_none']\n            }\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, value, this.state.balance_target_column))\n            this.setState({ \n                sell_all_of: multiple_tickers,\n                balanceable_value: new_balanceable_value\n            })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'include') ? parseInt(user_remaining_cash) : null\n        this.props.on_whatif_submit(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, remaining_cash)\n    }\n\n    isDisabled() {\n\n        if (this.state.cash_treatment === 'include' && !this.state.cash_valid) {\n            return true\n        } else if (this.state.balance_target_set === 'my_current_holdings') {\n            return (this.props.show_current_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        let excludable_tickers = []\n        if (this.state.balance_target_set === \"my_current_holdings\") {\n            excludable_tickers = Object.keys(this.props.all_positions).filter( ticker => ticker !== 'cash' && this.props.all_positions[ticker].current_shares)\n        } else if (this.props.all_tags.hasOwnProperty(this.state.balance_target_set)) {\n            excludable_tickers = this.props.all_tags[this.state.balance_target_set].filter( ticker => this.props.all_positions[ticker] && this.props.all_positions[ticker].current_shares)\n        }\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div id=\"operation\">Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_current_holdings\">current holdings ({Object.entries(this.props.all_positions).filter(position => position[0] !== 'cash' && position[1].current_shares !== 0).length})</option>\n                            <option value=\"untagged\">untagged tickers ({this.props.all_tags.untagged.length})</option>\n                            {Object.entries(this.props.all_tags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag} ({this.props.all_tags[tag].length})</option>\n                            )}\n                        </select>\n                        &nbsp;into&nbsp; \n                        <select name=\"balance_target_column\" value={this.state.balance_target_column} onChange={this.handleChange}>\n                            <option value=\"current_value\">equal values</option>\n                            <option value=\"value_at_risk\">equal values, risk adjusted</option>\n                            <option value=\"basis\">equal bases</option>\n                            <option value=\"basis_risked\">equal bases, risk adjusted</option>\n                            <option value=\"only_profits\">only profits remaining</option>\n                        </select>\n                        , but sell all of&nbsp;\n                        <select name=\"sell_all_of\" value={this.state.sell_all_of} multiple={true} onChange={this.handleChange}>\n                            <option value=\"sell_none\">(none. keep all.)</option>\n                            {excludable_tickers.sort().map(ticker => \n                                <option key={ticker} value={ticker}> {ticker} </option>\n                            )}\n                        </select>\n                        &nbsp;...\n                    </div>\n                    <div id=\"cash-treatment\">\n                        <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                        <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                        <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining} placeholder=\"$0\"></input>cash remaining (max: ${this.numberWithCommas(this.state.balanceable_value)})</label>\n                    </div>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_current_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { TickerAdd } from './TickerAdd'\nimport { TagAdd } from './TagAdd'\nimport { TransactionAdd } from './TransactionAdd'\nimport { TransactionsList } from './TransactionsList'\nimport { TagDelete } from './TagDelete'\nimport { MyPerformance } from './MyPerformance'\nimport { Console } from './Console'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | my-performance | what-ifs | console\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    componentDidMount() {\n        const stored_which_inputs = JSON.parse(localStorage.getItem(\"which_inputs\"))\n        if (stored_which_inputs !== null) {\n            this.setState({ which_inputs: stored_which_inputs })\n        }\n    }\n\n    onWhichInputs(new_which_inputs) {\n        localStorage.setItem('which_inputs', JSON.stringify(new_which_inputs))\n        if (this.state.which_inputs !== new_which_inputs) {\n            this.props.clear_last_console_message()\n        }\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"my-performance\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('my-performance')}>Performance</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"console\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('console')}>Messages</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <TickerAdd\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <TagAdd\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        <TagDelete\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <div className=\"content-wrapper\">\n                            <div className=\"content-half\">\n                                <TransactionAdd\n                                    all_stocks={this.props.all_stocks}\n                                    all_tags={this.props.all_tags}\n                                    on_new_transaction={this.props.on_new_transaction}\n                                    on_new_cash={this.props.on_new_cash}\n                                    create_console_message_set={this.props.create_console_message_set}\n                                    on_new_console_messages={this.props.on_new_console_messages}\n                                />\n                            </div>\n                            <div className=\"content-half\">\n                                <TransactionsList\n                                    all_transactions={this.props.all_transactions}\n                                    all_risk={this.props.all_risk}\n                                    on_delete_transaction={this.props.on_delete_transaction}\n                                    on_import_transactions={this.props.on_import_transactions}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_current_holdings={this.props.show_current_holdings}\n                            show_previous_holdings={this.props.show_previous_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'my-performance' && (\n                        <React.Fragment>\n                        <MyPerformance\n                            all_transactions={this.props.all_transactions}\n                            all_positions={this.props.all_positions}\n                            all_monthly_quotes={this.props.all_monthly_quotes}\n                            all_month_end_dates={this.props.all_month_end_dates}\n                            baseline={this.props.baseline}\n                            create_console_message_set={this.props.create_console_message_set}\n                            on_new_console_messages={this.props.on_new_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'console' && (\n                        <React.Fragment>\n                        <Console\n                            all_console_messages={this.props.all_console_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object.isRequired,\n    all_monthly_quotes: PropTypes.object.isRequired,\n    all_month_end_dates: PropTypes.array.isRequired,\n    all_positions: PropTypes.object,\n    all_transactions: PropTypes.array,\n    all_risk: PropTypes.object,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    baseline: PropTypes.string,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n    create_console_message_set: PropTypes.func.isRequired,\n    all_console_messages: PropTypes.array.isRequired,\n    on_new_console_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func,\n    clear_last_console_message: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string',\n        category: 'always'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2,\n    //     category: 'performance'\n    // },\n    {\n        name: 'quote_date',\n        display_name: 'Price Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis',\n        display_name: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'profit',\n        display_name: 'Profit',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'risk_factor_modified',\n        display_name: 'Risk Factor Edited Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'risk_factor',\n        display_name: 'Risk Factor (default=0.20)',\n        type: 'number',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    {\n        name: 'value_at_risk',\n        display_name: 'Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_value_at_risk',\n        display_name: 'What-If Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis_risked',\n        display_name: 'Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis_risked',\n        display_name: 'What-If Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'start_date',\n        display_name: 'Holding Started Date',\n        type: 'string',\n        category: 'holdings'\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthEndDates: [],\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: [],\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n            allConsoleMessages: [],\n            last_console_message: '',\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_current_holdings',\n            balance_target_column: '',\n            sell_all_of: [],\n            remaining_cash: null,\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            show_current_holdings: true,\n            show_previous_holdings: false,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            error_if_not_todays_quote: true,\n            show_only_achieved_performance: false,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getTransactionById = this.getTransactionById.bind(this)\n        this.getTransactionsByTicker = this.getTransactionsByTicker.bind(this)\n        this.getPositionFromSingleTickerTransactions = this.getPositionFromSingleTickerTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.createConsoleMessageSet = this.createConsoleMessageSet.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onImportTransactions = this.onImportTransactions.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.onDeleteTransaction = this.onDeleteTransaction.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewConsoleMessages = this.onNewConsoleMessages.bind(this)\n        this.clearLastConsoleMessage = this.clearLastConsoleMessage.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n        this.currentQuoteExists = this.currentQuoteExists.bind(this)\n        this.getClosingPrice = this.getClosingPrice.bind(this)\n        this.getMostRecentClosingPrice = this.getMostRecentClosingPrice.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.getMaxBalanceableValue = this.getMaxBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getCurrentHoldings = this.getCurrentHoldings.bind(this)\n        this.getPreviousHoldings = this.getPreviousHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.getTickersFromSet = this.getTickersFromSet.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        // 1. load all locally-stored data\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        let allTags = {}\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n            allTags = JSON.parse(JSON.stringify(stored_allTags))\n        }\n\n        let allTransactions = []\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n            allTransactions = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        const stored_allRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (stored_allRisk !== null) {\n            this.setState({ allRisk: stored_allRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['show_current_holdings', 'show_previous_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates', 'show_only_achieved_performance', 'error_if_not_todays_quote']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n\n        // 2. calculate historical performance data for each added ticker\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        let indexed_risk_data = {}\n        if (stored_allRisk !== null) {\n            indexed_risk_data = JSON.parse(JSON.stringify(stored_allRisk))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'].toUpperCase())\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'].toUpperCase())\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeriesDesc = Object.entries(indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series'])\n                .sort(function(a,b) {\n                    if(a[0] < b[0]) {\n                        return 1\n                    } else if (a[0] > b[0]) {\n                        return -1\n                    } else {\n                        return 0\n                    }\n                })\n                let monthly_prices = Object.entries(quoteTimeSeriesDesc).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n\n        // 3. calculate position data (from transactions) for all holdings\n\n        let all_stocks = []\n        allTransactions.forEach(function(transaction) {\n            if (!all_stocks.includes(transaction.ticker)) {\n                all_stocks.push(transaction.ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_risk_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        all_stocks = all_stocks.filter(ticker => ticker !== 'cash')\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthEndDates = []\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n        let cash_delta_from_stock_transactions = 0\n\n        all_stocks.forEach(function(ticker) {\n\n            // create a stock position if any transactions exist\n            allTransactions.forEach(function(transaction) {\n                if (!newPositions.hasOwnProperty(transaction.ticker) && transaction.ticker !== 'cash') {\n                    let newPosition = {}\n                    let ticker = transaction.ticker\n                    newPosition = self.getPositionFromSingleTickerTransactions(allTransactions.filter(transaction => transaction.ticker === ticker))\n                    newPosition['symbol'] = ticker\n                    newPositions[ticker] = newPosition\n                    if (transaction.action === 'buy') {\n                        cash_delta_from_stock_transactions -= transaction.total\n                    } else {\n                        cash_delta_from_stock_transactions += transaction.total\n                    }\n                }\n            })\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuote['quote_date'] = quoteResult['07. latest trading day']\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n\n                let newTickerQuotes = {}\n                Object.entries(indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']).forEach(function(entry) {\n\n                    let full_date = entry[0]\n\n                    // collect all quotes for this ticker\n                    let newQuote = {}\n                    newQuote['adjusted_close'] = parseFloat(entry[1]['5. adjusted close'])\n                    newTickerQuotes[full_date] = newQuote\n\n                    // build the month-end dates (YYYY-MM-DD)\n                    let target_month = full_date.substr(0,7)\n                    if (!newMonthEndDates.includes(full_date)) {\n                        let found_idx = newMonthEndDates.findIndex(element => element.substr(0,7) === target_month)\n                        if (found_idx === -1) {\n                            newMonthEndDates.push(full_date)\n                        } else if (newMonthEndDates[found_idx] < full_date) {\n                            newMonthEndDates[found_idx] = full_date\n                        }\n                    }\n                })\n                newMonthlyQuotes[ticker] = newTickerQuotes\n\n                // calculate performance\n                let newPerformance = {}\n\n                let ticker_now = self.getClosingPrice(ticker, newMonthEndDates[0], newMonthlyQuotes)\n                if (typeof ticker_now !== 'number') {\n                    ticker_now = self.getMostRecentClosingPrice(ticker, newCurrentQuotes)\n                }\n                let ticker_short_ago = self.getClosingPrice(ticker, newMonthEndDates[5], newMonthlyQuotes)\n                let ticker_medium_ago = self.getClosingPrice(ticker, newMonthEndDates[11], newMonthlyQuotes)\n                let ticker_long_ago = self.getClosingPrice(ticker, newMonthEndDates[23], newMonthlyQuotes)\n                let ticker_perf_short, ticker_perf_medium, ticker_perf_long\n                if (typeof ticker_now === 'number') {\n                    if (typeof ticker_short_ago === 'number') {\n                        ticker_perf_short = (ticker_now - ticker_short_ago) / ticker_now * 100\n                        newPerformance['short_change_pct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_short - index_performance.short_change_pct \n                            : ticker_perf_short\n                    } else {\n                        newPerformance['short_change_pct'] = 'err.'\n                    }\n                    if (typeof ticker_medium_ago === 'number') {\n                        ticker_perf_medium = (ticker_now - ticker_medium_ago) / ticker_now * 100\n                        newPerformance['medium_change_pct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_medium - index_performance.medium_change_pct \n                            : ticker_perf_medium\n                    } else {\n                        newPerformance['medium_change_pct'] = 'err.'\n                    }\n                    if (typeof ticker_long_ago === 'number') {\n                        ticker_perf_long = (ticker_now - ticker_long_ago) / ticker_now * 100\n                        newPerformance['long_change_pct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_long - index_performance.long_change_pct \n                            : ticker_perf_long\n                    } else {\n                        newPerformance['long_change_pct'] = 'err.'\n                    }\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            if (indexed_risk_data.hasOwnProperty(ticker)) {\n                newRisk[ticker] = JSON.parse(JSON.stringify(indexed_risk_data[ticker]))\n            }\n        })\n        newMonthEndDates = newMonthEndDates.sort().reverse()\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        let cash_transactions = allTransactions.filter(transaction => transaction.ticker === 'cash')\n        if (cash_transactions.length || cash_delta_from_stock_transactions !== 0) {\n            let newPosition = {}\n            newPosition = this.getPositionFromCashTransactions(cash_transactions)\n            newPosition['symbol'] = 'cash'\n            if (cash_delta_from_stock_transactions) {\n                newPosition['basis'] += cash_delta_from_stock_transactions\n                newPosition['current_shares'] += cash_delta_from_stock_transactions\n            }\n            newPositions['cash'] = newPosition\n        }\n\n        // 5. handle aggregates\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(allTags, newPositions, newCurrentQuotes, stored_controls['show_current_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(allTags, newPerformanceNumbers)))\n\n\n        // 6. update the app's state with all of the above changes\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthEndDates: newMonthEndDates,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getTransactionById(transaction_id) {\n        return this.state.allTransactions.filter(transaction => transaction.modified_at === transaction_id)[0]\n    }\n\n    getTransactionsByTicker(ticker) {\n        return this.state.allTransactions.filter(transaction => transaction.ticker === ticker)\n    }\n\n    getPositionFromSingleTickerTransactions(transactions) { // assumes the transactions are all from a single ticker\n        let inflows = 0, outflows = 0, current_shares = 0, date, action, num_shares, ticker, value\n        let sorted_transactions = transactions.sort(function(a,b) {\n            if (a.date > b.date) {\n                return -1\n            } else if (a.date < b.date) {\n                return -1\n            } else {\n                return 0\n            }\n        })\n        let position_start_date = '1970/01/01'\n        sorted_transactions.forEach(function(transaction) {\n            [date, action, num_shares, ticker, value] = transaction.summary.split(' ')\n            date = date.substr(0, date.length-1)\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (current_shares === 0) {\n                position_start_date = date\n            }\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n            if (current_shares === 0) {\n                position_start_date = 'n/a'\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            start_date: position_start_date,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [, action, value] = cash_transaction.summary.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'transferIN' || action === 'dividend') {\n                total += cash_amount\n            } else if (action === 'transferOUT' || action === 'fee') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_current_holdings, show_cash) {\n\n        let holdings = (show_current_holdings === null) ? this.state.show_current_holdings : show_current_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            if (ticker_basis < 0) {\n                ticker_basis = 0\n            }\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let quote_exists = all_quotes.hasOwnProperty(ticker)\n            let ticker_price, ticker_total_value\n            if (ticker === 'cash') {\n                ticker_price = 1\n                ticker_total_value = ticker_price * ticker_shares\n            } else if (ticker_shares === 0) {\n                ticker_total_value = 0\n            } else if (quote_exists) {\n                ticker_price = all_quotes[ticker]['current_price']\n                ticker_total_value = ticker_price * ticker_shares\n                if (ticker_total_value < 0) {\n                    ticker_total_value = 0\n                }\n            } else {\n                ticker_total_value = 'err.'\n            }\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                if (aggr_totalvalue_by_tag['_everything_'] === 'err.') {\n                    aggr_totalvalue_by_tag['_everything_'] = 'err.'\n                } else if (ticker_total_value === 'err.') {\n                    aggr_totalvalue_by_tag['_everything_'] = 'err.'\n                } else {\n                    aggr_totalvalue_by_tag['_everything_'] += ticker_total_value\n                }\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        if (aggr_totalvalue_by_tag === 'err.') {\n                            aggr_totalvalue_by_tag[tag] = 'err.'\n                        } else if (ticker_total_value === 'err.') {\n                            aggr_totalvalue_by_tag[tag] = 'err.'\n                        } else {\n                            aggr_totalvalue_by_tag[tag] += ticker_total_value\n                        }\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short, medium, long, prev_short, prev_medium, prev_long\n            if (all_performance_numbers.hasOwnProperty(ticker)) {\n                short = all_performance_numbers[ticker]['short_change_pct']\n                medium = all_performance_numbers[ticker]['medium_change_pct']\n                long = all_performance_numbers[ticker]['long_change_pct']\n                prev_short = aggr_performance_by_tag['_everything_'].short_change_pct\n                prev_medium = aggr_performance_by_tag['_everything_'].medium_change_pct\n                prev_long = aggr_performance_by_tag['_everything_'].long_change_pct\n                aggr_performance_by_tag['_everything_'].short_change_pct = (prev_short === 'err.' || short === 'err.') ? 'err.' : prev_short + short\n                aggr_performance_by_tag['_everything_'].medium_change_pct = (prev_medium === 'err.' || medium === 'err.') ? 'err.' : prev_medium + medium\n                aggr_performance_by_tag['_everything_'].long_change_pct = (prev_long === 'err.' || long === 'err.') ? 'err.' : prev_long + long\n            } else {\n                short = 'err.'\n                medium = 'err.'\n                long = 'err.'\n                aggr_performance_by_tag['_everything_'].short_change_pct = 'err.'\n                aggr_performance_by_tag['_everything_'].medium_change_pct = 'err.'\n                aggr_performance_by_tag['_everything_'].long_change_pct = 'err.'\n            }\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    prev_short = aggr_performance_by_tag[tag].short_change_pct\n                    prev_medium = aggr_performance_by_tag[tag].medium_change_pct\n                    prev_long = aggr_performance_by_tag[tag].long_change_pct\n                    aggr_performance_by_tag[tag].short_change_pct = (prev_short === 'err.') ? 'err.' : short\n                    aggr_performance_by_tag[tag].medium_change_pct = (prev_medium === 'err.') ? 'err.' : medium\n                    aggr_performance_by_tag[tag].long_change_pct = (prev_long === 'err.') ? 'err.' : long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                if (performance[time_range] !== 'err.') {\n                    let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                    aggr_performance_by_tag[tag][time_range] = value\n                }\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_current_holdings = (name === 'show_current_holdings') ? new_value : this.state.show_current_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_current_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            column_names.forEach(function(column_name) {\n                if (!new_shown_column_names.includes(column_name)) {\n                    new_shown_column_names.push(column_name)\n                }\n            })\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    createConsoleMessageSet(new_message) {\n        let new_console_message_set = {\n            modified_at: new Date().getTime(),\n            summary: new_message,\n            messages: [new_message]\n        }\n        return new_console_message_set\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.ticker !== delete_ticker)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Ticker \"' + delete_ticker + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let date, action, num_shares, ticker, total\n        [date, action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: ticker,\n                action: action,\n                shares: num_shares,\n                total: total,\n                summary: new_transaction_summary\n            }\n            newAllTransactions.push(new_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let orig_start_date, orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_start_date = newAllPositions[ticker]['start_date']\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let new_current_shares = (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares\n            let new_start_date\n            if (orig_start_date === undefined) {\n                new_start_date = date\n            } else {\n                new_start_date = (new Date(date) < new Date(orig_start_date)) ? date : orig_start_date\n            }\n            let updatedPosition = {\n                current_shares: new_current_shares,\n                start_date: (new_current_shares) ? new_start_date : 'n/a',\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the cash position numbers\n            orig_current_shares = (newAllPositions.hasOwnProperty('cash')) ? newAllPositions['cash'].current_shares : 0\n            new_current_shares = (action === 'buy') ? orig_current_shares - total : orig_current_shares + total\n            let updatedCashPosition = {\n                current_shares: new_current_shares,\n                symbol: 'cash',\n                basis: new_current_shares,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedCashPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onImportTransactions(file_contents) {\n\n        let imported_tickers = []\n\n        let imported_transactions = JSON.parse(JSON.stringify(file_contents.transactions))\n        imported_transactions.forEach( transaction => imported_tickers.push(transaction.ticker) )\n\n        let imported_risk = JSON.parse(JSON.stringify(file_contents.risk))\n        Object.keys(imported_risk).forEach( ticker => imported_tickers.push(ticker))\n\n        let all_stocks_of_interest = Array.from(new Set(imported_tickers))\n        this.setState(prevState => {\n\n            // update the \"untagged\" tag so that all added tickers belong to a tag\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let already_added = []\n            Object.keys(newAllTags).forEach(function(tag) {\n                newAllTags[tag].forEach(function(ticker) {\n                    if (!already_added.includes(ticker)) {\n                        already_added.push(ticker)\n                    }\n                })\n            })\n            all_stocks_of_interest.forEach( function(ticker) {\n                if (!already_added.includes(ticker) && ticker !== 'cash') {\n                    newAllTags['untagged'].push(ticker)\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // replace the stored transactions\n            localStorage.setItem('allTransactions', JSON.stringify(imported_transactions))\n\n            // replace the stored risk\n            localStorage.setItem('allRisk', JSON.stringify(imported_risk))\n\n            return\n        })\n\n        window.location.reload(false)\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let date, action, total\n        [date, action, total]  = new_cash_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: 'cash',\n                action: action,\n                shares: total,\n                total: total,\n                summary: new_cash_transaction_summary\n            }\n            newAllTransactions.push(new_cash_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'dividend' || action === 'transferIN') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTransaction(delete_transaction_id) {\n\n        let transaction_to_delete = this.getTransactionById(delete_transaction_id)\n        let ticker = transaction_to_delete.ticker\n\n        this.setState(prevState => {\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.modified_at !== delete_transaction_id)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Transaction \"' + transaction_to_delete.summary + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the position numbers\n            let remainingTransactionsForTicker = newAllTransactions.filter(transaction => transaction.ticker === ticker)\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let updatedPosition\n            if (!remainingTransactionsForTicker.length) {\n                delete newAllPositions[ticker]\n            } else {\n                if (ticker === 'cash') {\n                    updatedPosition = this.getPositionFromCashTransactions(remainingTransactionsForTicker)\n                } else {\n                    updatedPosition = this.getPositionFromSingleTickerTransactions(remainingTransactionsForTicker)\n                }\n                newAllPositions[ticker] = updatedPosition\n            }\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n\n            return { \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let new_console_message_set = this.createConsoleMessageSet('Tag \"' + delete_tag + '\" has now been deleted.')\n            newAllConsoleMessages.push(new_console_message_set)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_current_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: new_console_message_set.summary,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(row_name) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== row_name\n                && row_name !== this.props.editing_row\n                && !this.nameIsAnAggregate(row_name)\n                && !this.nameIsSpecial(row_name)\n            ) {\n                return { editing_row: row_name }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n                newAllRisk[ticker]['modified_at'] = new Date().getTime()\n            } else {\n                let newRisk = { \n                    modified_at: new Date().getTime(),\n                    factor: parseFloat(new_value) \n                }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewConsoleMessages(new_console_message_set) {\n        this.setState(prevState => {\n            let newAllConsoleMessages = JSON.parse(JSON.stringify(prevState.allConsoleMessages))\n            newAllConsoleMessages.push(new_console_message_set)\n            return { \n                last_console_message: new_console_message_set.summary,\n                allConsoleMessages: newAllConsoleMessages }\n        })\n    }\n\n    clearLastConsoleMessage() {\n        this.setState({ last_console_message: ' ' })\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let days_ago = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return days_ago\n        }\n    }\n\n    currentQuoteExists(ticker) {\n        if (this.state.allCurrentQuotes.hasOwnProperty(ticker)) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    getClosingPrice(ticker, date, data) {\n        if (data.hasOwnProperty(ticker)) {\n            if (data[ticker].hasOwnProperty(date)) {\n                return data[ticker][date].adjusted_close\n            }\n        }\n        return undefined\n    }\n\n    getMostRecentClosingPrice(ticker, data) {\n        if (data.hasOwnProperty(ticker)) {\n            return data[ticker].current_price\n        }\n        return undefined\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getMaxBalanceableValue(target_set, sell_all_set, target_column) {\n        let include_cash = true\n        return this.getBalanceableValue(target_set, sell_all_set, target_column, include_cash)\n    }\n\n    getBalanceableValue(target_set, sell_all_set, target_column, include_cash) {\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_value = 0\n        if (include_cash && this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_value = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_value\n\n        let target_tickers = this.getTickersFromSet(target_set)\n        if ( (target_set === 'my_current_holdings' && this.state.show_current_holdings)\n            || (target_set === 'untagged' && this.state.show_untagged) \n            || (target_set !== 'my_current_holdings' && target_set !== 'untagged') ) {\n            target_tickers.forEach( function(ticker) {\n                let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (target_column === 'current_value' || target_column === 'value_at_risk' || target_column === 'only_profits') {\n                    balanceable_value += current_value\n                } else if (target_column === 'basis' || target_column === 'basis_risked') {\n                    if (sell_all_set.includes(ticker)) {\n                        balanceable_value += current_value\n                    } else {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                }\n            })\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(target_set, sell_all_of, target_column, remaining_cash) {\n        this.setState({ \n            remaining_cash: remaining_cash, \n            balance_target_set: target_set, \n            sell_all_of: sell_all_of,\n            balance_target_column: target_column \n            })\n        let column = target_column\n        let show_whatif_columns = ['current_shares', 'whatif_current_shares']\n        if (target_column === 'only_profits') {\n            column = 'basis'\n        }\n        show_whatif_columns.push(column)\n        show_whatif_columns.push('whatif_'+column)\n        if (target_column === 'only_profits') {\n            show_whatif_columns.push('profit')\n        }\n        if (target_column.includes('risk')) {\n            show_whatif_columns.push('risk_factor')\n        }\n        this.showColumns(show_whatif_columns)\n        this.onWhatifGo(target_set, sell_all_of, target_column, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(target_set, sell_all_set, target_column, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && (remaining_cash !== null || target_column === 'only_profits')\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_amount_to_balance = this.getBalanceableValue(target_set, sell_all_set, target_column, adjusting_cash)\n        if (adjusting_cash) {\n            total_amount_to_balance -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let target_tickers = this.getTickersFromSet(target_set)\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balance_target_column: target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        let risk_factors = {}\n        target_tickers.forEach(function(ticker) {\n            if (self.state.allRisk.hasOwnProperty(ticker)){\n                risk_factors[ticker] = self.state.allRisk[ticker].factor\n            } else {\n                risk_factors[ticker] = 0.20\n            }\n        })\n        let target = total_amount_to_balance / target_tickers.filter(ticker => !sell_all_set.includes(ticker)).length\n        target_tickers.forEach(function(ticker) {\n\n            let whatif_currentshares, whatif_balancedvalue\n            \n            new_whatif.values[ticker] = {}\n\n            let value_delta = 0\n            let original_currentvalue = self.getCurrentValue(ticker)\n            let original_basis = self.getBasis(ticker)\n\n            if (target_column === 'current_value' || target_column === 'basis' || target_column === 'only_profits') {\n                if (sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['current_shares'] = 0\n                    new_whatif.values[ticker]['basis'] = 0\n                    new_whatif.values[ticker]['basis_risked'] = 0\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 0\n                    if (adjusting_cash) {\n                        actual_remaining_cash += original_currentvalue \n                    }\n                    return\n                }\n            }\n\n            // balancing by value is a simple average of current values\n            if (target_column === 'current_value') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                let whatif_basis = original_basis + value_delta\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_basis\n                new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (target_column === 'basis') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_balancedbasis < 0) {\n                    whatif_balancedbasis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n\n                value_delta = whatif_balancedbasis - original_basis\n                new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n\n            } else if (target_column === 'only_profits') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let original_currentvalue = original_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                let target_delta_shares\n                let losing = (original_basis > original_currentvalue) ? true : false\n                if (losing) {\n                    whatif_currentshares = 0\n                } else {\n                    let target_delta = original_basis\n                    target_delta_shares = -1 * Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    whatif_currentshares = original_currentshares + target_delta_shares\n                }\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                if (losing || sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['basis'] = 'n/a'\n                    new_whatif.values[ticker]['basis_risked'] = 'n/a'\n                    new_whatif.values[ticker]['current_value'] = 0\n                    new_whatif.values[ticker]['value_at_risk'] = 'n/a'\n                    value_delta = -1 * original_currentvalue\n                } else {\n                    let whatif_basis = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    let whatif_currentvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    value_delta = whatif_currentvalue - original_currentvalue\n                    new_whatif.values[ticker]['current_value'] = whatif_currentvalue\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_currentvalue * risk_factors[ticker]\n                }\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n        // The above applies to risk-balancing VALUE. This results in each position currently\n        // having the same dollar value at risk right now. Similarly, in order to risk-balance \n        // by BASIS, the same formula may be used except with Btot (total basis) in the numerator.\n        // This results in each position having the same amount of sunk investment dollars at risk,\n        // it is unaffected by each position's current stock price.\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (target_column === 'value_at_risk' || target_column === 'basis_risked') {\n\n            let target_nonzero_tickers = target_tickers.filter(ticker => !sell_all_set.includes(ticker))\n            \n            // determine the numerator\n            let numerator_product = 1\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= risk_factors[ticker]\n                }\n            })\n            let numerator = total_amount_to_balance * numerator_product\n\n            // determine the denominator\n            let denominator_terms = Array(target_nonzero_tickers.length).fill(1)\n            target_nonzero_tickers.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * risk_factors[ticker]\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue, 0 )\n\n            // determine the target value for each ticker; each will be different if their risk factors are different\n            let nonzero_targets = Array(target_nonzero_tickers.length).fill(0)\n            nonzero_targets[0] = numerator / denominator\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    nonzero_targets[idx] = Math.round(nonzero_targets[0] * risk_factors[target_nonzero_tickers[0]] / risk_factors[ticker])\n                }\n            })\n            let targets = Array(target_tickers.length).fill(0)\n            target_nonzero_tickers.forEach(function (nonzero_ticker, nonzero_i) {\n                let i = target_tickers.indexOf(nonzero_ticker)\n                targets[i] = nonzero_targets[nonzero_i]\n            })\n\n            // for each ticker, use its target to derive the other metrics\n            target_tickers.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                let original_currentvalue = self.getCurrentValue(ticker)\n                let original_basis = self.getBasis(ticker)\n                let value_delta, target = targets[idx]\n\n                // for values, \"target\" is the target market value for this position\n                if (target_column === 'value_at_risk') {\n\n                    let whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                    value_delta = whatif_balancedvalue - original_currentvalue\n                    let whatif_basis = original_basis + value_delta\n                    if (whatif_basis < 0) {\n                        whatif_basis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * risk_factors[ticker]\n\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * risk_factors[ticker]\n\n                // for bases, \"target\" is the target basis for this position\n                } else if (target_column === 'basis_risked') {\n\n                    let original_currentshares = self.getCurrentShares(ticker)\n                    let target_delta = target - original_basis\n                    let target_delta_shares\n                    if (target === 0) {\n                        new_whatif.values[ticker]['current_shares'] = 0\n                        new_whatif.values[ticker]['basis'] = 0\n                        new_whatif.values[ticker]['basis_risked'] = 0\n                        new_whatif.values[ticker]['current_value'] = 0\n                        new_whatif.values[ticker]['value_at_risk'] = 0\n                        value_delta = -1 * original_currentvalue\n                    } else {\n                        if (target_delta >= 0) {\n                            target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        } else {\n                            target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        }\n                        let whatif_currentshares = original_currentshares + target_delta_shares\n                        new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                        let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                        if (whatif_balancedbasis < 0) {\n                            whatif_balancedbasis = 0\n                        }\n                        new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                        new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * risk_factors[ticker]\n        \n                        value_delta = whatif_balancedbasis - original_basis\n                        new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n        \n                        new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * risk_factors[ticker]\n                    }\n                }\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['value_at_risk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balance_target_column: new_whatif.balance_target_column })\n    }\n\n    getCurrentHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] !== 0).map(holding => holding[0])\n    }\n\n    getPreviousHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] === 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    getTickersFromSet(set) {\n        let tickers = []\n        if (set === 'my_current_holdings') {\n            tickers = [...this.getCurrentHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (set === 'untagged') {\n            tickers = [...this.getUntagged()]\n        } else {\n            tickers = this.state.allTags[set]\n        }\n        return tickers\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'quote_date', 'volume', 'dollar_volume']\n        let holdings_columns = ['start_date', 'current_shares', 'current_value', 'percent_value', 'value_at_risk', 'basis', 'basis_risked', 'realized_gains', 'percent_basis', 'profit', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'profit' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if ( (sort_column === 'profit' || sort_column === 'percent_profit') && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(a)) {\n                            value_a = self.state.allPositions[a]['basis'] * self.state.allRisk[a]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'profit' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if ( (sort_column === 'profit' || sort_column === 'percent_profit') && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(b)) {\n                            value_b = self.state.allPositions[b]['basis'] * self.state.allRisk[b]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sort_column === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : (a === 'cash') ? 0 : 0.20\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : (b === 'cash') ? 0 : 0.20\n\n            } else if (sort_column === 'risk_factor_modified') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].modified_at : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].modified_at : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_current_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getCurrentHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_previous_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getPreviousHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['start_date'] = self.state.allPositions[ticker].start_date\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['start_date'] = 'n/a'\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['start_date'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        let all_categories = ['always', 'stock-specific', 'holdings', 'performance']\n        let all_columns_by_category = {}\n        all_categories.forEach(function(category_name) {\n            let this_category_columns = JSON.parse(JSON.stringify(all_columns_namesorted)).filter(column => column.category === category_name)\n            all_columns_by_category[category_name] = this_category_columns\n        })\n\n        const row_popover = (\n            <Popover id=\"row-popover\">\n                <Popover.Title as=\"h3\">Included Rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show current holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_current_holdings\" name=\"show_current_holdings\" type=\"checkbox\" checked={this.state.show_current_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_current_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show previous holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_previous_holdings\" name=\"show_previous_holdings\" type=\"checkbox\" checked={this.state.show_previous_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_previous_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"column-popover\">\n                <Popover.Title as=\"h3\">Included Columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {Object.keys(all_columns_by_category).filter(key => key !== 'always').map(key => (\n                        <div key={key} id=\"column-category\">\n                            <div className=\"strong\">{key}</div>\n                            <ul>\n                                {all_columns_by_category[key].map(column => (\n                                    <li key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name)} className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</li>\n                                ))}\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n\n        const general_settings_popover = (\n            <Popover id=\"general-settings-popover\">\n                <Popover.Title as=\"h3\">General Settings:</Popover.Title>\n                <Popover.Content>\n                <div id=\"general-settings-control\">\n                    <div id=\"baseline-control\">\n                        <label htmlFor=\"baseline\">performance baseline:</label>\n                        <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                            <option value=\"zero_pct_gain\">0% gain</option>\n                            <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                        </select>\n                    </div>\n                    <div id=\"performance-control\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show performance only if achieved:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"show_only_achieved_performance\" name=\"show_only_achieved_performance\" type=\"checkbox\" checked={this.state.show_only_achieved_performance} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"show_only_achieved_performance\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"recency-control\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show error if quote is not from today:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"error_if_not_todays_quote\" name=\"error_if_not_todays_quote\" type=\"checkbox\" checked={this.state.error_if_not_todays_quote} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"error_if_not_todays_quote\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const GeneralSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={general_settings_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; General</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate, highlight_column}) => (\n            <GridHeaderRow\n                highlight_column={highlight_column}\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                quote_date={row_data.quote_date}\n                volume={row_data.volume}\n                basis={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                         || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                         ? row_data.basis \n                         : 'n/a'}\n                start_date={row_data.start_date}\n                current_shares={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                  || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                  ? row_data.current_shares \n                                  : 'n/a'}\n                current_value={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                 || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                 ? row_data.current_value \n                                 : 'n/a'}\n                realized_gains={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                                  || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                                  ? row_data.realized_gains \n                                  : 'n/a'}\n                risk_factor={row_data.risk_factor}\n                risk_factor_modified={row_data.risk_factor_modified}\n                performance_numbers={row_data.performance_numbers}\n                error_if_not_todays_quote={this.state.error_if_not_todays_quote}\n                show_only_achieved_performance={this.state.show_only_achieved_performance}\n                baseline={row_data.baseline}\n                style_realized_performance={row_data.style_realized_performance}\n                total_value={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                               || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                               ? row_data.total_value \n                               : 'n/a'}\n                total_basis={( (row_data.current_shares !== 0 && this.state.show_current_holdings) \n                               || (row_data.current_shares === 0 && this.state.show_previous_holdings) ) \n                               ? row_data.total_basis \n                               : 'n/a'}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                on_escape_key={this.onEscapeKey}\n            />\n        )\n\n        // if an old quote exists and if this is an error, the grand total becomes an error too\n        let a_quote_is_old = false, aggr_total_value, aggr_basis \n        sorted_tickers.forEach(function(ticker) {\n            if (a_quote_is_old === false \n                && ticker !== 'cash' \n                && !self.getIndicies().includes(ticker) \n                && self.daysAgo(self.state.allCurrentQuotes[ticker].quote_date) >= 1) {\n                    a_quote_is_old = true\n            }\n        })\n        if (!a_quote_is_old || !self.state.error_if_not_todays_quote) {\n            aggr_total_value = self.state.aggrTotalValue['_everything_']\n            aggr_basis = self.state.aggrBasis['_everything_']\n        } else {\n            aggr_total_value = 'err.'\n            aggr_basis = self.state.aggrBasis['_everything_']\n        }\n\n        let error_performance_numbers = {\n            short_change_pct: 'err.',\n            medium_change_pct: 'err.',\n            long_change_pct: 'err.'\n        }\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let quote_exists = self.currentQuoteExists(ticker)\n            let performance_numbers_exist = self.state.allPerformanceNumbers.hasOwnProperty(ticker)\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].current_price : 'err.'\n            new_row['change_pct'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].change_pct : 'err.'\n            new_row['quote_date'] = (!quote_exists) ? 'err.' : (ticker !== 'cash' && !self.getIndicies().includes(ticker)) ? self.state.allCurrentQuotes[ticker].quote_date : 'n/a'\n            new_row['volume'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].volume : 'err.'\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['start_date'] = row_data[ticker]['start_date']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].factor : null\n            new_row['risk_factor_modified'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].modified_at : null\n            new_row['performance_numbers'] = (performance_numbers_exist) ? self.state.allPerformanceNumbers[ticker] : error_performance_numbers\n            new_row['baseline'] = self.state.baseline\n            new_row['style_realized_performance'] = (Object.entries(self.state.allPositions).filter(position => position[0] !== 'cash' && position[1].current_shares).length) ? true : false\n            new_row['total_value'] = aggr_total_value\n            new_row['total_basis'] = aggr_basis\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n                // if an old quote exists within this aggregate and if this is an error, the aggregate total becomes an error too\n                let quote_date\n                for (let ticker of self.state.allTags[aggr_ticker]) {\n                    let quote_exists = (self.currentQuoteExists(ticker)) ? true : false\n                    quote_date = (quote_exists) ? self.state.allCurrentQuotes[ticker].quote_date : 'err.'\n                    if (self.daysAgo(quote_date) >= 1) {\n                        break\n                    }\n                }\n\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['quote_date'] = quote_date\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['start_date'] = aggr_row_data[aggr_ticker]['start_date']\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['risk_factor_modified'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['style_realized_performance'] = false\n                new_row['total_value'] = self.state.aggrTotalValue[aggr_ticker]\n                new_row['total_basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n        let all_ticker_rows = all_row_data.filter(row_data => !row_data.is_aggregate)\n        let all_aggregate_rows = all_row_data.filter(row_data => row_data.is_aggregate)\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"left-side\">\n                        <div id=\"input-controls\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                all_current_quotes={this.state.allCurrentQuotes}\n                                all_monthly_quotes={this.state.allMonthlyQuotes}\n                                all_month_end_dates={this.state.allMonthEndDates}\n                                all_positions={this.state.allPositions}\n                                all_transactions={this.state.allTransactions}\n                                all_risk={this.state.allRisk}\n                                show_current_holdings={this.state.show_current_holdings}\n                                show_previous_holdings={this.state.show_previous_holdings}\n                                show_tagged={this.state.show_tagged}\n                                show_untagged={this.state.show_untagged}\n                                show_cash={this.state.show_cash}\n                                baseline={this.state.baseline.name}\n                                get_balanceable_value={this.getMaxBalanceableValue}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_delete_transaction={this.onDeleteTransaction}\n                                on_new_transaction={this.onNewTransaction}\n                                on_import_transactions={this.onImportTransactions}\n                                on_new_cash={this.onNewCash}\n                                create_console_message_set={this.createConsoleMessageSet}\n                                clear_last_console_message={this.clearLastConsoleMessage}\n                                all_console_messages={this.state.allConsoleMessages}\n                                on_new_console_messages={this.onNewConsoleMessages}\n                                on_whatif_submit={this.onWhatifSubmit}\n                            />\n                        </div>\n                        <div id=\"last-console-message\">\n                            {this.state.last_console_message && this.state.last_console_message.length ? (\n                            <div className={ (this.state.last_console_message.includes('ERROR')) ? 'warning' : ''}>{this.state.last_console_message}</div>\n                            ) : null }\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"page-settings\">\n                            <GeneralSettings />\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={this.state.balance_target_column} />\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        {this.state.done && all_ticker_rows.length ? (\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={aggr_total_value}\n                            total_basis={aggr_basis}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                        ) : (\n                            <tr>\n                                <td className=\"no_table_data\" colSpan={this.state.shown_columns.length+1}>No stocks have been added yet. Please add them using the form on the \"Tickers\" tab.</td>\n                            </tr>\n                        ) }\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow is_aggregate={true} highlight_column={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_aggregate_rows.filter(row => row.name !== 'untagged').length ? all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            )) : (\n                                <tr>\n                                    <td className=\"no_table_data\" colSpan={this.state.shown_columns.length+1}>No tags exist yet. Please create them using the form on the \"Tags\" tab.</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}