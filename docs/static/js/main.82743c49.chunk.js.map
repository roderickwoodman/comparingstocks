{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/TickerAdd.js","components/TagAdd.js","components/TransactionAdd.js","components/TransactionsList.js","components/TagDelete.js","components/MyPerformance.js","components/Console.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","styleCell","columnIndex","columnName","classes","startsWith","isAggregate","sortColumn","sortTriangle","symbolCountStr","allColumns","firstColumn","name","push","columns","forEach","column","newColumn","whatifFormat","displayName","replace","highlightColumn","map","i","key","String","fromCharCode","className","onClick","e","onChangeWhatifFormat","onChangeSort","undefined","EditNumericCell","inputEl","useRef","useState","userValue","setUserValue","userValueIsValid","setUserValueIsValid","useEffect","handleEscapeKey","event","keyCode","onEscapeKey","isNaN","originalValue","current","focus","document","addEventListener","removeEventListener","onSubmit","preventDefault","onNewValue","ref","type","id","value","onChange","target","length","size","disabled","GridRow","hoveringSymbol","setHoveringSymbol","hoveringRiskFactor","setHoveringRiskFactor","toggleHoverSymbol","toggleHoverRiskFactor","populateDeleteButton","rowName","onDeleteTags","specialClasses","includes","currentShares","on_delete_ticker","performanceBeatTheBaseline","perf","baseline_perf","baseline","change_pct","performance","performance_numbers","flagQuoteError","shortChangePct","style_realized_performance","daysAgo","start_date","show_only_achieved_performance","mediumChangePct","longChangePct","new_value","on_modify_risk_factor","populateCellValue","editing_row","current_edit_value","num_decimals","baseline_value","prefix","suffix","adjust_decimal","performance_value","quote_date","totalValue","totalBasis","current_price","currentValue","risk_factor","visible_risk_factor","percentValue","percentBasis","profit","percent_profit","valueAtRisk","basis","basisRisked","realized_gains","whatif","flagQuoteErrorOnPositionCell","risk_factor_modified","epoch","d","Date","month","getMonth","day","getDate","year","getFullYear","join","formatDate","parseInt","volume","membershipSet","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","numberWithCommas","abs","x","date_str","now","then","days_ago","isQuoteFromToday","quote_date_str","error_if_not_todays_quote","isAggr","row_classes","special_class","member_count","sort","symbol","onRemoveFromTag","populateMemberButton","onMouseEnter","onMouseLeave","on_edit_cell","populateEditButton","defaultProps","GridRowTotals","shortPerf","totalPerformance","mediumPerf","longPerf","styleTotalsCell","populateTotalsCellValue","TickerAdd","userTickersString","setUserTickersString","addToTag","setAddToTag","handleReset","validateTickers","tag","tickers","tickersToAdd","newMessages","ticker","allStocks","allTags","taggedTickers","Object","keys","concat","summary","numErrors","filter","message","tagStatusStr","newConsoleMessageSet","createConsoleMessageSet","messages","hasErrors","onNewTickers","onNewConsoleMessages","userTag","userTickers","split","str","trim","toUpperCase","Array","from","Set","onReset","placeholder","required","tagName","TagAdd","userTagsString","setUserTagsString","validateTags","tags","tagsToAdd","onNewTags","userTags","toLowerCase","TransactionAdd","transactionDate","setTransactionDate","transaction","setTransaction","userCashAction","setUserCashAction","userCashAmount","setUserCashAmount","handleChange","validateTransaction","summary_message","action","num_shares","total","parseFloat","valid_transaction_summary","onNewTransaction","user_transaction","user_cash_amount","new_message","user_cash_action","user_date","user_cash_operation","terms","cash_amount","onNewCash","TransactionsList","exportEl","importEl","dataSortDir","setDataSortDir","filterStr","setFilterStr","orderedFilteredTransactions","allTransactions","a","b","exportedJson","transactions","JSON","parse","stringify","risk","allRisk","data","encodeURIComponent","createElement","href","download","innerHTML","appendChild","click","remove","files","reader","FileReader","readAsText","onload","evt","fileContents","result","onImportTransactions","onHiddenImportChange","accept","style","width","visibility","modifiedAt","onDeleteTransaction","TagDelete","deleteTagList","setDeleteTagList","userTagList","multiple","selectedOptions","multipleTags","item","MyPerformance","state","periodSize","periodData","generatePeriodData","bind","formatCurrency","getDisplayedPerformance","getMonthEndQuote","getYear","getPeriod","formatPerformance","formatIndexPerformance","formatWholePercentage","onToggleSortOrder","handlePeriodChange","storedDataSortDir","localStorage","getItem","storedPeriodSize","this","setState","sortedTransactions","date","newConsoleMessages","quoteErrors","firstPeriod","firstYear","firstMonth","floor","todayPeriod","periodsOfPerformance","startBaselinequote","startBaselineprice","prevQuoteMonth","prevQuoteYear","today","todayYear","todayMonth","price","adjustedClose","startShares","startTickervalue","startTotalValue","p","period","newPeriod","prevShares","prevCash","endTransfersinvalue","endTickervalue","endTotalvalue","assign","endShares","endCash","periodSortSuffix","periodDisplaySuffix","slice","toLocaleString","target_year","period_transactions","t","shares","cash_delta","share_delta","self","end_tickerdate","this_quote_month","this_quote_year","lastavailablequote_month_str","lastavailablequote_year_str","allMonthEndDates","lastavailablequote_month","lastavailablequote_year","entries","position","month_end_quote","end_baselineprice","end_baselinedate","end_baselinequote","adjusted_transfer_value","zb_start_month","zb_end_month","end_year","period_start_date","period_end_date","period_days","transactions_of_cash","fraction_of_period","transfer_date","message_summary","quote_error_count","quote_tickers_count","zb_month","dollars","retval","sort_name","period_baseline_change_pct","my_perf","period_change_pct","baselineName","monthly_quotes","allMonthlyQuotes","monthly_dates","period_idx","findIndex","performance_obj","displayed","index","display_value","index_value","percentage","num_periods","el","getElementById","period_width","scrollWidth","new_scroll_left","scrollLeft","prevState","newSortDir","setItem","displayed_performance","qdata","sorted_data","end_tickervaluefraction","end_cashfraction","React","Component","Console","orderedMessageSets","expandedMessageSets","setExpandedMessageSets","getClasses","getMessageSetClasses","messageSetCount","onToggleExpandMessageSet","identifier","newExpandedMessageSets","PopulateMessageSet","toPopulate","timestamp","tzoffset","getTimezoneOffset","iso","toISOString","match","formatTimestamp","messageSet","count","allConsoleMessages","WhatIf","balanceableValue","setBalanceableValue","balanceTargetSet","setBalanceTargetSet","balanceTargetColumn","setBalanceTargetColumn","sellAllOf","setSellAllOf","cashTreatment","cashRemaining","setCashRemaining","cashValid","setCashValid","newBalanceableValue","getBalanceableValue","storedBalanceTargetSet","storedBalanceTargetColumn","storedCashRemaining","usersWholeDollarsString","usersWholeDollars","validWholeDollarsString","multipleTickers","excludableTickers","allPositions","userRemainingCash","remainingCash","onWhatifSubmit","untagged","entry","htmlFor","selected","defaultChecked","showCash","showCurrentHoldings","showUntagged","showTagged","InputForms","whichInputs","setWhichInputs","storedWhichInputs","onWhichInputs","newWhichInputs","clearLastConsoleMessage","Fragment","allCurrentQuotes","showPreviousHoldings","category","passthrough_strings","defaultShownColumns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allPerformanceNumbers","allWhatifs","last_console_message","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shownColumns","done","tickerIsIndex","convertNameForIndicies","getTransactionById","getTransactionsByTicker","getPositionFromSingleTickerTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","showColumns","onToggleShowColumn","onDeleteTicker","onEditCell","onModifyRiskFactor","currentQuoteExists","getClosingPrice","getMostRecentClosingPrice","getCurrentValue","getCurrentShares","getBasis","getMaxBalanceableValue","onWhatifGo","getIndicies","getCurrentHoldings","getPreviousHoldings","getAdded","getTagged","getUntagged","getTickersFromSet","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","storedAllRisk","storedControls","control","storedControl","initShownColumns","storedShownColumns","storedBaseline","indexedRiskData","rawCurrentQuoteData","require","sample_current_quotes","indexedCurrentQuoteData","raw_quote","adjustedTicker","rawMonthlyQuoteData","sample_monthly_quotes","indexedMonthlyQuoteData","indexPerformance","quoteTimeSeriesDesc","monthly_prices","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthEndDates","newMonthlyQuotes","newPerformanceNumbers","newRisk","cash_delta_from_stock_transactions","newPosition","newCurrentQuote","quoteResult","newTickerQuotes","full_date","newQuote","target_month","substr","found_idx","element","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","ticker_short_ago","ticker_medium_ago","ticker_long_ago","reverse","change","cash_transactions","aggr_position_info","aggr_performance","transaction_id","inflows","outflows","position_start_date","cash_transaction","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_price","ticker_total_value","ticker_realized_gains","ticker_shares","quote_exists","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","column_names","new_shown_column_names","new_shown_columns","splice","idx","getTime","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newAllConsoleMessages","new_transaction_summary","new_transaction","orig_start_date","orig_basis","orig_current_shares","orig_realized_gains","new_start_date","new_current_shares","updatedPosition","updatedCashPosition","imported_tickers","imported_transactions","imported_risk","already_added","window","location","reload","new_cash_transaction_summary","new_cash_transaction","new_cash","delete_transaction_id","transaction_to_delete","remainingTransactionsForTicker","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","delete_tags","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","factor","target_set","sell_all_set","target_column","include_cash","current_cash_value","target_tickers","show_whatif_columns","adjusting_cash","original_cash_position","total_amount_to_balance","new_whatif","actual_remaining_cash","risk_factors","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","whatif_basis","target_delta_shares","original_currentshares","target_delta","ceil","whatif_balancedbasis","losing","whatif_currentvalue","target_nonzero_tickers","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","nonzero_targets","targets","nonzero_ticker","nonzero_i","holding","added_tickers","set","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","all_columns_by_category","category_name","this_category_columns","aggr_total_value","aggr_basis","row_popover","Popover","Title","as","Content","column_popover","general_settings_popover","PopulateHeaderRow","symbol_count","PopulateRow","a_quote_is_old","error_performance_numbers","all_row_data","performance_numbers_exist","new_row","all_ticker_rows","all_aggregate_rows","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","colSpan","row","ReactDOM","render"],"mappings":"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","file":"static/js/main.82743c49.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (isAggregate === 0) or tags (isAggregate === 1).\nexport const GridHeaderRow = (props) => {\n\n    const styleCell = (columnIndex, columnName) => {\n        let classes = ''\n        if (columnIndex !== 0) {\n            classes += 'clickable '\n        }\n        if (columnName.startsWith('whatif-')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    const onHeaderCellClick = (columnName) => {\n        if (columnName.startsWith('whatif-')) {\n            props.onChangeWhatifFormat()\n        } else {\n            props.onChangeSort(columnName)\n        }\n    }\n\n    const isAggregate = props.isAggregate\n    const sortColumn = props.sortColumn\n    const sortTriangle = props.sortTriangle\n    const symbolCountStr = props.symbolCountStr\n\n    let allColumns = []\n\n    let firstColumn = { // always the tag or ticker membership column\n        name: 'first'\n    }\n    if (props.isAggregate) {\n        firstColumn['displayName'] = 'Tickers'\n    } else {\n        firstColumn['displayName'] = 'Tags'\n    }\n    allColumns.push(firstColumn)\n\n    props.columns.forEach(function(column) {\n        let newColumn = {}\n        newColumn['name'] = column.name\n        if (column.name === 'symbol') {\n            if (isAggregate) {\n                newColumn['displayName'] = 'Tags'\n            } else {\n                newColumn['displayName'] = 'Tickers'\n            }\n        } else if (column.name.startsWith('whatif-')) {\n            if (props.whatifFormat === 'deltas') {\n                newColumn['displayName'] = column.displayName.replace('What-If', 'What-If DELTA')\n            } else {\n                newColumn['displayName'] = column.displayName.replace('What-If', 'What-If NEW')\n            }\n        } else {\n            newColumn['displayName'] = column.displayName\n        }\n        allColumns.push(newColumn)\n    })\n\n    return (\n        <tr>\n        {props.highlightColumn !== null && allColumns.map( (column,i) => (\n            <th\n            key={ column.name }\n            >\n                { (column.name === props.highlightColumn) \n                ? 'BEFORE BALANCING' \n                : (column.name === 'whatif-' + props.highlightColumn) \n                    ? 'AFTER BALANCING' \n                    : String.fromCharCode(160) }\n            </th>\n        ))}\n        {props.highlightColumn === null && allColumns.map( (column,i) => (\n            <th \n                key={ column.name } \n                className={ styleCell(i, column.name) }\n                onClick={ (i!==0) ? (e)=>onHeaderCellClick(column.name) : undefined }\n            >   { (i===1 && !isAggregate) ? column.displayName + symbolCountStr : column.displayName }\n                { column.name === sortColumn ? sortTriangle : '' }\n            </th>\n        ))}\n        </tr>\n    )\n\n}\n\nGridHeaderRow.propTypes = {\n    highlightColumn: PropTypes.string,\n    isAggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbolCountStr: PropTypes.string,\n    sortColumn: PropTypes.string,\n    sortTriangle: PropTypes.string,\n    whatifFormat: PropTypes.string,\n    onChangeSort: PropTypes.func,\n    onChangeWhatifFormat: PropTypes.func\n}","import React, { useRef, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const EditNumericCell = (props) => {\n\n    const inputEl = useRef(null)\n    const [userValue, setUserValue] = useState('')\n    const [userValueIsValid, setUserValueIsValid] = useState(false)\n\n    useEffect( () => {\n        const handleEscapeKey = (event) => {\n            if (event.keyCode === 27) {\n                props.onEscapeKey()\n            }\n        }\n        if (isNaN(props.originalValue)) {\n            setUserValue('') \n        } else {\n            setUserValue(props.originalValue) \n        }\n        inputEl.current.focus()\n        document.addEventListener('keydown', handleEscapeKey, false)\n        return function cleanup() {\n            document.removeEventListener('keydown', handleEscapeKey, false)\n        }\n    }, [props, inputEl])\n\n    const handleChange = (event) => {\n\n        const {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'userValue') {\n            if (value.length && !isNaN(value) && value > 0) {\n                setUserValue(value)\n                setUserValueIsValid(true)\n            } else {\n                setUserValue(value)\n                setUserValueIsValid(false)\n            }\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        props.onNewValue(userValue)\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input ref={inputEl} type=\"text\" id=\"edit-cell\" name=\"userValue\" value={userValue} onChange={handleChange} size=\"5\" />\n            <button type=\"submit\" disabled={!userValueIsValid}>S</button>\n        </form>\n    )\n}\n\nEditNumericCell.propTypes = {\n    originalValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    onNewValue: PropTypes.func.isRequired,\n    onEscapeKey: PropTypes.func.isRequired\n}\n\n\n\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (isAggregate === 0) or tags (isAggregate === 1).\n// For tickers, the membershipSet prop is all of the tags that it belongs to.\n// For tags, the membershipSet prop is all of the tags that belong to it.\nexport const GridRow = (props) => {\n\n    const [hoveringSymbol, setHoveringSymbol] = useState(false)\n    const [hoveringRiskFactor, setHoveringRiskFactor] = useState(false)\n\n    const formatDate = (epoch) => {\n        var d = new Date(epoch),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    const onWhatifCellClick = () => {\n        props.onChangeWhatifFormat()\n    }\n\n    const toggleHoverSymbol = () => {\n        setHoveringSymbol(!hoveringSymbol)\n    }\n\n    const toggleHoverRiskFactor = () => {\n        setHoveringRiskFactor(!hoveringRiskFactor)\n    }\n\n    // this button removes a ticker from a tag\n    const populateMemberButton = (symbol) => {\n        const isAggr = props.isAggregate\n        const rowName = props.rowName\n        if (isAggr) {\n            // rowName is a TAG\n            // symbol is a TICKER \n            if (rowName !== 'untagged') {\n                return (\n                    <button key={rowName + symbol + isAggr} className=\"tag-removal\" onClick={ (e) => { props.onRemoveFromTag(rowName, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={rowName + symbol + isAggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // rowName is a TICKER\n            // symbol is a TAG \n            if (!props.specialClasses.includes('index') && !props.specialClasses.includes('cash') && !props.membershipSet.includes('untagged')) {\n                return (\n                    <button key={rowName + symbol + isAggr} className=\"tag-removal\" onClick={ (e) => { props.onRemoveFromTag(symbol, rowName)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    const populateDeleteButton = (columnName, isAggregate) => {\n        let classes = 'delete'\n        if (hoveringSymbol) {\n            classes += ' hovering'\n        }\n        if (isAggregate) {\n            if (columnName === 'symbol' && props.rowName !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {props.onDeleteTags(props.rowName)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (columnName === 'symbol' \n                && !props.specialClasses.includes('index')\n                && !(props.rowName === 'cash' && isNaN(props.currentShares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {props.on_delete_ticker(props.rowName)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    const populateEditButton = (columnName, rowName) => {\n        let classes = 'edit'\n        if (hoveringRiskFactor) {\n            classes += ' hovering'\n        }\n        if ( columnName === 'risk_factor'\n            && rowName !== props.editing_row\n            && rowName !== 'cash'\n            && !props.isAggregate \n            && !props.specialClasses.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    const editRiskFactor = (rowName) => {\n        props.on_edit_cell(rowName)\n    }\n\n    const performanceBeatTheBaseline = (perf, baseline_perf) => {\n        if (props.baseline.name === 'zeroPctGain') {\n            if (perf > 0) {\n                return true\n            } else if (perf < 0) {\n                return false\n            }\n        } else {\n            if (perf > 0 && perf > baseline_perf) {\n                return true\n            } else if (perf < 0 && perf < baseline_perf) {\n                return false\n            }\n        }\n    }\n\n    const styleCell = (columnName) => {\n        let classes = 'position-cell'\n        const rowName = props.rowName\n        const change_pct = props.change_pct\n        const currentShares = props.currentShares\n        const specialClasses = props.specialClasses\n        const performance = props.performance_numbers\n        const baseline = props.baseline\n\n        // hovering\n        if ( hoveringSymbol\n            && columnName === 'symbol' \n            && !specialClasses.includes('index') \n            && rowName !== 'untagged'\n            && !(rowName === 'cash' && isNaN(currentShares)) ) {\n            classes += ' hovering'\n        }\n        if ( hoveringRiskFactor\n            && columnName === 'risk_factor' \n            && !specialClasses.includes('index') \n            && !props.isAggregate\n            && rowName !== 'cash' ) {\n            classes += ' hovering'\n        }\n\n        // whatif\n        if ( columnName.startsWith('whatif-') ) {\n            classes += ' clickable whatif'\n        }\n\n        // italics\n        if ( columnName === 'symbol' && rowName === 'untagged') {\n            classes += ' italics'\n        }\n\n        switch (columnName) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'shortChangePct':\n                if (!flagQuoteError()) {\n                    if (performanceBeatTheBaseline(performance.shortChangePct, baseline.shortChangePct)) {\n                        classes += ' text-green'\n                    } else  {\n                        classes += ' text-green'\n                    }\n                    if (props.style_realized_performance\n                        && rowName !== 'cash' \n                        && !specialClasses.includes('index')) {\n                            if (isNaN(currentShares) \n                                || !currentShares \n                                || daysAgo(props.start_date) < 180\n                                ){\n                                classes += (props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            case 'mediumChangePct':\n                if (!flagQuoteError()) {\n                    if (performanceBeatTheBaseline(performance.mediumChangePct, baseline.mediumChangePct)) {\n                        classes += ' text-green'\n                    } else  {\n                        classes += ' text-green'\n                    }\n                    if (props.style_realized_performance\n                        && rowName !== 'cash' \n                        && !specialClasses.includes('index')) {\n                            if (isNaN(currentShares) \n                                || !currentShares \n                                || daysAgo(props.start_date) < 365\n                                ){\n                                classes += (props.show_only_achieved_performance) ? ' hide' :  ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            case 'longChangePct':\n                if (!flagQuoteError()) {\n                    if (performanceBeatTheBaseline(performance.longChangePct, baseline.longChangePct)) {\n                        classes += ' text-green'\n                    } else  {\n                        classes += ' text-green'\n                    }\n                    if (props.style_realized_performance\n                        && rowName !== 'cash' \n                        && !specialClasses.includes('index')) {\n                            if (isNaN(currentShares) \n                                || !currentShares \n                                || daysAgo(props.start_date) < 730\n                                ){\n                                classes += (props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                            } else {\n                                classes += ' strong'\n                            }\n                    }\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    const onNewValue = (new_value) => {\n        props.on_modify_risk_factor(props.rowName, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percentValue\", \"percentBasis\", and \"percent_profit\"\n    const populateCellValue = (column) => {\n\n        if ( column.name === 'risk_factor'\n            && props.rowName === props.editing_row ) {\n            return (\n                <EditNumericCell \n                    originalValue={props.current_edit_value} \n                    onNewValue={onNewValue} \n                    onEscapeKey={props.onEscapeKey}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const quote_date = props.quote_date\n        const totalValue = props.totalValue\n        const totalBasis = props.totalBasis\n        const current_price = props.current_price\n        const currentShares = props.currentShares\n        const currentValue = props.currentValue\n        let risk_factor = (props.risk_factor !== null) ? props.risk_factor : 0.20\n        let visible_risk_factor = (props.risk_factor !== null) ? props.risk_factor : 'n/a'\n        if (props.rowName === 'cash') {\n            risk_factor = 0\n            visible_risk_factor = 0\n        }\n        const valueAtRisk = currentValue * risk_factor\n        const basis = props.basis\n        const basisRisked = basis * risk_factor\n        const realized_gains = props.realized_gains\n        const whatif = props.whatif\n\n        let percentValue, percentBasis, profit, percent_profit\n\n        // calculate percentValue\n        if (isNaN(currentValue)) {\n            percentValue = 'n/a'\n        } else {\n            if (isNaN(totalValue) || totalValue === 0) {\n                percentValue = 'n/a'\n            } else {\n                percentValue = (currentValue !== 'n/a') ? currentValue / totalValue * 100 : 'n/a'\n            }\n        }\n\n        // calculate percentBasis\n        if (isNaN(currentValue)) {\n            percentBasis = 'n/a'\n        } else {\n            if (isNaN(totalBasis) || totalBasis === 0) {\n                percentBasis = 'n/a'\n            } else {\n                percentBasis = (currentValue !== 'n/a') ? basis / totalBasis * 100 : 'n/a'\n            }\n        }\n\n        // calculate profit and percent_profit\n        if (isNaN(currentValue) || isNaN(basis)) {\n            profit = 'n/a'\n            percent_profit = 'n/a'\n        } else {\n            if (currentShares === 0) {\n                profit = 'n/a'\n                percent_profit = 'n/a'\n            } else if (basis > currentValue) {\n                profit = currentValue - basis\n                percent_profit = 'losing'\n            } else if (basis < currentValue) {\n                profit = currentValue - basis\n                percent_profit = (1 - basis / currentValue) * 100\n            } else {\n                profit = 0\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = props.rowName\n                break\n            case 'start_date':\n                value = props.start_date\n                break\n            case 'currentShares':\n                value = currentShares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (props.whatifFormat === 'deltas') {\n                    value = whatif.currentShares - ((currentShares === 'n/a') ? 0 : currentShares)\n                } else {\n                    value = whatif.currentShares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'quote_date':\n                if (!props.isAggregate) {\n                    value = quote_date\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'currentValue':\n                if (typeof currentShares === 'string' || (typeof currentShares === 'number' && currentShares >= 0)) {\n                    if (!flagQuoteErrorOnPositionCell()) {\n                        value = currentValue\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_current_value':\n                if (!flagQuoteErrorOnPositionCell()) {\n                    if (whatif === null) {\n                        value = 'n/a'\n                    } else if (props.whatifFormat === 'deltas') {\n                        value = whatif.currentValue - ((currentValue === 'n/a') ? 0 : currentValue)\n                    } else {\n                        value = whatif.currentValue\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'percentValue':\n                if (currentValue === 'err.') {\n                    value = 'err.'\n                } else if (typeof currentShares === 'string' || (typeof currentShares === 'number' && currentShares >= 0)) {\n                    if (!flagQuoteErrorOnPositionCell()) {\n                        value = percentValue\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'basis':\n                if (typeof currentShares === 'string' || (typeof currentShares === 'number' && currentShares >= 0)) {\n                    value = basis\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (props.whatifFormat === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'basisRisked':\n                if (typeof currentShares === 'string' || (typeof currentShares === 'number' && currentShares >= 0)) {\n                    if (props.currentValue === 0) {\n                        value = 'n/a'\n                    } else {\n                        value = basisRisked\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_basis_risked':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (props.whatifFormat === 'deltas') {\n                    value = whatif.basisRisked - ((basisRisked === 'n/a') ? 0 : basisRisked)\n                } else {\n                    value = whatif.basisRisked\n                }\n                break\n            case 'percentBasis':\n                if (typeof currentShares === 'string' || (typeof currentShares === 'number' && currentShares >= 0)) {\n                    value = percentBasis\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'profit':\n                if (props.currentValue === 0) {\n                    value = 'n/a'\n                } else if (!flagQuoteErrorOnPositionCell()) {\n                    value = profit\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'percent_profit':\n                if (props.currentValue === 0) {\n                    value = 'n/a'\n                } else if (!flagQuoteErrorOnPositionCell()) {\n                    value = percent_profit\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = props.change_pct\n                break\n            case 'risk_factor':\n                value = visible_risk_factor\n                break\n            case 'risk_factor_modified':\n                if (props.risk_factor_modified !== null) {\n                    value = formatDate(parseInt(props.risk_factor_modified))\n                } else {\n                    value = 'n/a'\n                }\n                break\n            case 'valueAtRisk':\n                if (typeof currentShares === 'string' || (typeof currentShares === 'number' && currentShares >= 0)) {\n                    if (props.currentValue === 0) {\n                        value = 'n/a'\n                    } else if (!flagQuoteErrorOnPositionCell()) {\n                        value = valueAtRisk\n                    } else {\n                        value = 'err.'\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'whatif_value_at_risk':\n                if (!flagQuoteErrorOnPositionCell()) {\n                    if (whatif === null) {\n                        value = 'n/a'\n                    } else if (props.whatifFormat === 'deltas') {\n                        value = whatif.valueAtRisk - ((valueAtRisk === 'n/a') ? 0 : valueAtRisk)\n                    } else {\n                        value = whatif.valueAtRisk\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'volume':\n                if (!flagQuoteError()) {\n                    value = props.volume\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'dollar_volume':\n                if (!flagQuoteError()) {\n                    if (props.volume === 'err.') {\n                        value = 'err.'\n                    } else {\n                        value = props.current_price * props.volume\n                    }\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'shortChangePct':\n                if (!flagQuoteError()) {\n                    value = props.performance_numbers.shortChangePct\n                    performance_value = true\n                    baseline_value = props.baseline.shortChangePct\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'mediumChangePct':\n                if (!flagQuoteError()) {\n                    value = props.performance_numbers.mediumChangePct\n                    performance_value = true\n                    baseline_value = props.baseline.mediumChangePct\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'longChangePct':\n                if (!flagQuoteError()) {\n                    value = props.performance_numbers.longChangePct\n                    performance_value = true\n                    baseline_value = props.baseline.longChangePct\n                } else {\n                    value = 'err.'\n                }\n                break\n            default:\n                break\n        }\n        if ( props.rowName === 'cash' || (props.isAggregate && !props.membershipSet.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'profit': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'shortChangePct': \n                case 'mediumChangePct': \n                case 'longChangePct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === 'err.') {\n            return 'err.'\n        } else if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && props.baseline.name !== 'zeroPctGain') {\n                    if (props.rowName === 'S&P500') {\n                        return 'ref.'\n                    } else {\n                        value = value - baseline_value\n                    }\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif-') && props.whatifFormat === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    const numberWithCommas = (x) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    const daysAgo = (date_str) => { // yyyy-mm-dd\n        const now = new Date()\n        const then = new Date(date_str)\n        const days_ago = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return days_ago\n        }\n    }\n\n    const isQuoteFromToday = (quote_date_str) => { // yyyy-mm-dd\n        const now = new Date()\n        const quote_date = new Date(quote_date_str)\n        const days_ago = (now - quote_date) / 1000 / 60 / 60 / 24\n        if (-1 <= days_ago && days_ago <= 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // certain columns' cells can print an error if the quote is out of date\n    const flagQuoteError = () => {\n        if (props.error_if_not_todays_quote && !isQuoteFromToday(props.quote_date)) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // certain POSITION columns' cells may print share-count-based \"n/a\" values before a quote out-of-date error applies\n    const flagQuoteErrorOnPositionCell = () => {\n        if (props.isAggregate) {\n            if (props.currentValue !== 0 && props.error_if_not_todays_quote && !isQuoteFromToday(props.quote_date)) {\n                return true\n            }\n        } else {\n            if (typeof props.currentShares === 'number' && props.currentShares !== 0 && props.error_if_not_todays_quote && !isQuoteFromToday(props.quote_date)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    const isAggr = props.isAggregate\n\n    let row_classes = 'position-row' \n    props.specialClasses.forEach(function(special_class) {\n        if (special_class === 'index') {\n            row_classes += ' position-is-index'\n        }\n        if (special_class === 'cash') {\n            row_classes += ' position-is-cash'\n        }\n        if (special_class === 'aggregate') {\n            row_classes += ' position-is-aggregate'\n        }\n    })\n\n    const member_count = props.membershipSet.length\n\n    return (\n        <tr className={ row_classes }>\n            <td>\n                { member_count ? props.membershipSet.sort().map(symbol => populateMemberButton(symbol)) : (props.specialClasses.length ? '' : '-') }\n            </td>\n            { props.columns.map(function(column) {\n                if (column.name === 'symbol') {\n                    return (\n                        <td key={column.name} className={ styleCell(column.name) } onMouseEnter={toggleHoverSymbol} onMouseLeave={toggleHoverSymbol}>{ populateCellValue(column) }{ isAggr && member_count ? '('+member_count+')' : '' }{ populateDeleteButton(column.name, isAggr) }</td>\n                    )\n                } else if (column.name === 'risk_factor') {\n                    return (\n                        <td key={column.name} className={ styleCell(column.name) } onClick={ (e)=>editRiskFactor(props.rowName) } onMouseEnter={toggleHoverRiskFactor} onMouseLeave={toggleHoverRiskFactor}>{ populateCellValue(column) }{ populateEditButton(column.name, props.rowName) }</td>\n                    )\n                } else if (column.name.startsWith('whatif-')) {\n                    return (\n                        <td key={column.name} className={ styleCell(column.name) } onClick={ (column.name.startsWith('whatif-')) ? (e)=>onWhatifCellClick() : undefined }>{ populateCellValue(column) }{ populateDeleteButton(column.name, isAggr) }</td>\n                    )\n                } else {\n                    return (\n                        <td key={column.name} className={ styleCell(column.name) }>{ populateCellValue(column) }{ populateDeleteButton(column.name, isAggr) }</td>\n                    )\n                }\n            })}\n        </tr>\n    )\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        shortChangePct: 0,\n        mediumChangePct: 0,\n        longChangePct: 0\n    }\n}\n\nGridRow.propTypes = {\n    isAggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    rowName: PropTypes.string,\n    membershipSet: PropTypes.array,\n    specialClasses: PropTypes.array,\n    start_date: PropTypes.string,\n    currentShares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    currentValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    quote_date: PropTypes.string,\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor_modified: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    error_if_not_todays_quote: PropTypes.bool,\n    show_only_achieved_performance: PropTypes.bool,\n    baseline: PropTypes.object,\n    style_realized_performance: PropTypes.bool,\n    totalValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    totalBasis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    whatif: PropTypes.object,\n    whatifFormat: PropTypes.string,\n    onChangeWhatifFormat: PropTypes.func,\n    onRemoveFromTag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    onDeleteTags: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    onEscapeKey: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const GridRowTotals = (props) => {\n\n    const totalValue = props.totalValue\n    const totalBasis = props.totalBasis\n    const shortPerf = props.totalPerformance.shortChangePct\n    const mediumPerf = props.totalPerformance.mediumChangePct\n    const longPerf = props.totalPerformance.longChangePct\n\n    const numberWithCommas = (x) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    const populateTotalsCellValue = (column) => {\n        let value\n        switch (column.name) {\n            case 'currentValue':\n                value = (totalValue !== 'err.') ? '$' + numberWithCommas(Math.round(totalValue)) : 'err.'\n                break\n            case 'percentValue':\n                value = (totalValue !== 'err.') ? '100%' : 'err.'\n                break\n            case 'basis':\n                value = '$' + numberWithCommas(Math.round(totalBasis))\n                break\n            case 'percentBasis':\n                value = (totalBasis) ? '100%' : 'err.'\n                break\n            case 'shortChangePct':\n                if (shortPerf !== 'err.') {\n                    value = (Math.round(10 * shortPerf) / 10).toFixed(1) + '%'\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'mediumChangePct':\n                if (mediumPerf !== 'err.') {\n                    value = (Math.round(10 * mediumPerf) / 10).toFixed(1) + '%'\n                } else {\n                    value = 'err.'\n                }\n                break\n            case 'longChangePct':\n                if (longPerf !== 'err.') {\n                    value = (Math.round(10 * longPerf) / 10).toFixed(1) + '%'\n                } else {\n                    value = 'err.'\n                }\n                break\n            default:\n                break\n        }\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else {\n            return value\n        }\n    }\n\n    const styleTotalsCell = (column) => {\n        let classes = ''\n        switch (column) {\n            case 'currentValue':\n            case 'percentValue':\n            case 'basis':\n            case 'percentBasis':\n            case 'shortChangePct':\n            case 'mediumChangePct':\n            case 'longChangePct':\n                classes += 'totals'\n                break\n            default:\n                classes = ''\n                break\n        }\n        return classes\n    }\n\n    return (\n        <tr>\n            <td></td>\n            { props.columns.map(column => (\n            <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n            ))}\n        </tr>\n    )\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    totalValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    totalBasis: PropTypes.number,\n    totalPerformance: PropTypes.object,\n\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const TickerAdd = (props) => {\n\n    const [userTickersString, setUserTickersString] = useState('')\n    const [addToTag, setAddToTag] = useState('untagged')\n\n    const handleTickersChange = (event) => {\n        setUserTickersString(event.target.value)\n    }\n\n    const handleTagChange = (event) => {\n        setAddToTag(event.target.value)\n    }\n\n    const handleReset = (event) => {\n        setUserTickersString('')\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const userTag = addToTag\n        const userTickers = String(userTickersString)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        validateTickers(userTag, Array.from(new Set(userTickers)))\n    }\n\n    const validateTickers = (tag, tickers) => {\n        let tickersToAdd = []\n        let newMessages = []\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!props.allStocks.includes(ticker)) {\n                newMessages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (props.allTags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    newMessages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    newMessages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let taggedTickers = []\n                Object.keys(props.allTags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        taggedTickers = taggedTickers.concat(props.allTags[tag])\n                    }\n                })\n                if (tag === 'untagged' && taggedTickers.includes(ticker)) {\n                    newMessages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        newMessages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        newMessages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickersToAdd.push(ticker)\n                }\n            }\n        })\n        const numErrors = newMessages.filter(message => message.includes('ERROR')).length\n        let summary\n        const tagStatusStr = (tag !== 'untagged') ? ' to tag \"' + tag + '\"' : ''\n        if (newMessages.length === 1) {\n            summary = newMessages[0]\n        } else if (numErrors === 0) {\n            summary = 'Added ' + tickers.length + ' tickers' + tagStatusStr + '.'\n        } else {\n            summary = 'ERROR: ' + numErrors + ' of ' + tickers.length + ' tickers could not be added' + tagStatusStr + '.'\n        }\n        let newConsoleMessageSet = props.createConsoleMessageSet(summary)\n        if (newMessages.length > 1) {\n            newConsoleMessageSet.messages = [...newMessages]\n        }\n        if (numErrors > 0) {\n            newConsoleMessageSet.hasErrors = true\n        }\n        props.onNewTickers(tag, tickersToAdd)\n        props.onNewConsoleMessages(newConsoleMessageSet)\n        handleReset()\n    }\n\n    return (\n        <section id=\"add-ticker\">\n            <form onSubmit={handleSubmit} onReset={handleReset}>\n                <label>New Ticker(s):</label>\n                <input value={userTickersString} onChange={handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                <label>\n                    Add to Tag:\n                    <select value={addToTag} onChange={handleTagChange}>\n                        <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                        {Object.keys(props.allTags).sort().filter(tagName => tagName !== 'untagged').map(tagName => (\n                        <option key={tagName} value={tagName}>{tagName}</option>\n                        ))}\n                    </select>\n                </label>\n                <section className=\"buttonrow\">\n                    <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={userTickersString===''}/>\n                </section>\n            </form>\n        </section>\n    )\n}\n\nTickerAdd.propTypes = {\n    allStocks: PropTypes.array.isRequired,\n    allTags: PropTypes.object.isRequired,\n    onNewTickers: PropTypes.func.isRequired,\n    createConsoleMessageSet: PropTypes.func.isRequired,\n    onNewConsoleMessages: PropTypes.func.isRequired\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const TagAdd = (props) => {\n\n    const [userTagsString, setUserTagsString] = useState('')\n\n    const handleChange = (event) => {\n        setUserTagsString(event.target.value)\n    }\n\n    const handleReset = (event) => {\n        setUserTagsString('')\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const userTags = String(userTagsString)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        validateTags(Array.from(new Set(userTags)))\n    }\n\n    const validateTags = (tags) => {\n        let tagsToAdd = [], newMessages = []\n        tags.forEach(function(tag) {\n            if (props.allTags.hasOwnProperty(tag)) {\n                newMessages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                newMessages.push('Tag \"' + tag + '\" has now been created.')\n                tagsToAdd.push(tag)\n            }\n        })\n        const numErrors = newMessages.filter(message => message.includes('ERROR')).length\n        let summary\n        if (newMessages.length === 1) {\n            summary = newMessages[0]\n        } else if (numErrors === 0) {\n            summary = 'Created ' + tags.length + ' tags.'\n        } else {\n            summary = 'ERROR: ' + numErrors + ' of ' + tags.length + ' tags could not be created.'\n        }\n        let newConsoleMessageSet = props.createConsoleMessageSet(summary)\n        if (newMessages.length > 1) {\n            newConsoleMessageSet.messages = [...newMessages]\n        }\n        if (numErrors > 0) {\n            newConsoleMessageSet.hasErrors = true\n        }\n        props.onNewTags(tagsToAdd)\n        props.onNewConsoleMessages(newConsoleMessageSet)\n        handleReset()\n    }\n\n    return (\n        <section id=\"add-tag\">\n            <form onSubmit={handleSubmit} onReset={handleReset}>\n                <label>New Tag Name(s):</label>\n                <input value={userTagsString} onChange={handleChange} required />\n                <section className=\"buttonrow\">\n                    <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={userTagsString===''} />\n                </section>\n            </form>\n        </section>\n    )\n}\n\nTagAdd.propTypes = {\n    allTags: PropTypes.object.isRequired,\n    onNewTags: PropTypes.func.isRequired,\n    createConsoleMessageSet: PropTypes.func.isRequired,\n    onNewConsoleMessages: PropTypes.func.isRequired\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const TransactionAdd = (props) => {\n\n    const [transactionDate, setTransactionDate] = useState('')\n    const [transaction, setTransaction] = useState('')\n    const [userCashAction, setUserCashAction] = useState('dividend')\n    const [userCashAmount, setUserCashAmount] = useState('')\n\n    const handleChange = (event) => {\n        if (event.target.name === 'transaction') {\n            setTransaction(event.target.value)\n        } else if (event.target.name === 'transactionDate') {\n            setTransactionDate(event.target.value)\n        }\n    }\n\n    const handleActionChange = (event) => {\n        setUserCashAction(event.target.value)\n    }\n\n    const handleCashChange = (event) => {\n        setUserCashAmount(event.target.value)\n    }\n\n    const handleCashReset = (event) => {\n        setUserCashAmount(\"\")\n    }\n\n    const handleCashSubmit = (event) => {\n        event.preventDefault()\n        let new_message = null\n        const user_cash_action = userCashAction\n        const user_date = transactionDate\n\n        const user_cash_operation = userCashAmount\n        const terms = user_cash_operation.split(' ')\n        let user_cash_amount\n\n        if (userCashAction === 'dividend') {\n            if (terms.length === 3 && terms[1].toLowerCase() === 'on' && terms[2].replace(/\\W/g,'').length) {\n                user_cash_amount = terms[0]\n            } else {\n                new_message = 'ERROR: Dividend syntax must be in the form: \"$200 on MSFT\"'\n            }\n        } else {\n            user_cash_amount = user_cash_operation\n        }\n\n        if (new_message === null) {\n            const cash_amount = parseFloat(user_cash_amount.trim().replace(/\\$/g, \"\"))\n            if (isNaN(cash_amount)) {\n                new_message = 'ERROR: Cash amount \"' + cash_amount + '\" is not in currency format.'\n            } else {\n                const total = parseFloat((Math.round(cash_amount * 100) / 100).toFixed(2));\n                let valid_transaction_summary = user_date + ': ' + user_cash_action + ' $' + total.toFixed(2) + ' cash'\n                if (userCashAction === 'dividend') {\n                    valid_transaction_summary += ' on ' + terms[2].toUpperCase()\n                }\n                new_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                props.onNewCash(valid_transaction_summary)\n                handleCashReset()\n            }\n        }\n        let newConsoleMessageSet = props.createConsoleMessageSet(new_message)\n        if (new_message.toUpperCase().startsWith('ERROR:')) {\n            newConsoleMessageSet.hasErrors = true\n        }\n        props.onNewConsoleMessages(newConsoleMessageSet)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const user_transaction = String(transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        validateTransaction(user_transaction)\n    }\n\n    const validateTransaction = (transaction) => {\n        let newMessages = [], summary_message\n\n        if (transaction.length < 4) {\n\n            summary_message = 'ERROR: Transaction \"' + transaction + '\" must be 4 terms.'\n            newMessages.push(summary_message)\n\n        } else {\n\n            const action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                newMessages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            const num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                newMessages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            const ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !props.allStocks.includes(ticker.toUpperCase())) {\n                newMessages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                newMessages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!newMessages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let taggedTickers = []\n                Object.keys(props.allTags).forEach(function(tag) {\n                    props.allTags[tag].forEach(function(ticker) {\n                        if (!taggedTickers.includes(ticker)) {\n                            taggedTickers.push(ticker)\n                        }\n                    })\n                })\n                if (taggedTickers.includes(transaction[2].toUpperCase())) {\n                    newMessages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                const valid_transaction_summary = transactionDate + ': ' + action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                summary_message = 'Transaction \"' + valid_transaction_summary + '\" has now been recorded.'\n                newMessages.push(summary_message)\n                props.onNewTransaction(valid_transaction_summary)\n\n            } else {\n                transaction[2] = transaction[2].toUpperCase()\n                transaction[3] = '$' + transaction[3]\n                summary_message = 'ERROR: Transaction \"' + transaction.join(' ') + '\" could not be recorded'\n            }\n        }\n\n        // send all of the messages to print\n        let newConsoleMessageSet = props.createConsoleMessageSet(summary_message)\n        if (summary_message.toUpperCase().startsWith('ERRROR:')) {\n            newConsoleMessageSet.hasErrors = true\n        }\n        newConsoleMessageSet.messages = [...newMessages]\n        props.onNewConsoleMessages(newConsoleMessageSet)\n    }\n\n    const getCashOperationPlaceholder = () => {\n        if (userCashAction === 'dividend') {\n            return \"$85.00 on MSFT\"\n        } else if (userCashAction === 'fee') {\n            return \"$15\"\n        } else {\n            return \"$1000\"\n        }\n    }\n\n    return (\n        <section id=\"add-transaction\">\n            <form>\n                <label>Transaction Date:</label>\n                <input name=\"transactionDate\" value={transactionDate} onChange={handleChange} type=\"date\" size=\"10\" />\n            </form>\n            <form onSubmit={handleSubmit}>\n                <label>New Transaction:</label>\n\n                <input name=\"transaction\" value={transaction} onChange={handleChange} size=\"25\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                <section className=\"buttonrow\">\n                    <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={transaction==='' || transactionDate===''} />\n                </section>\n            </form>\n            <form onSubmit={handleCashSubmit}>\n                <label>Cash&nbsp;\n                    <select onChange={handleActionChange}>\n                        <option value=\"dividend\">dividend</option>\n                        <option value=\"fee\">fee</option>\n                        <option value=\"transferIN\">transfer IN</option>\n                        <option value=\"transferOUT\">transfer OUT</option>\n                    </select>:\n                    <input value={userCashAmount} onChange={handleCashChange} size=\"20\" placeholder={getCashOperationPlaceholder()} required />\n                </label>\n                <section className=\"buttonrow\">\n                    <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={userCashAmount==='' || transactionDate===''}/>\n                </section>\n            </form>\n        </section>\n    )\n}\n\nTransactionAdd.propTypes = {\nallStocks: PropTypes.array.isRequired,\nallTags: PropTypes.object.isRequired,\nonNewTransaction: PropTypes.func.isRequired,\nonNewCash: PropTypes.func.isRequired,\nonNewConsoleMessages: PropTypes.func.isRequired\n}","import React, { useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const TransactionsList = (props) => {\n\n    const exportEl = useRef(null)\n    const importEl = useRef(null)\n    const [dataSortDir, setDataSortDir] = useState('desc')\n    const [filterStr, setFilterStr] = useState('')\n\n    const handleChange = (event) => {\n        setFilterStr(event.target.value)\n    }\n\n    const onToggleSortOrder = () => {\n        const newSortDir = (dataSortDir === 'asc') ? 'desc' : 'asc'\n        setDataSortDir(newSortDir)\n    }\n        \n    const onExportButton = () => {\n\n        // prepare the data\n        let exportedJson = {\n            transactions: JSON.parse(JSON.stringify(props.allTransactions)),\n            risk: JSON.parse(JSON.stringify(props.allRisk))\n        }\n        var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportedJson));\n\n        // create the download link\n        var a = document.createElement('a')\n        a.href = 'data:' + data\n        a.download = 'transactions.json'\n        a.innerHTML = 'download'\n\n        // attach the download link, trigger it, and then remove it from the DOM\n        var container = exportEl.current\n        container.appendChild(a)\n        a.click()\n        a.remove()\n    }\n\n    const onHiddenImportChange = (files) => {\n        if (files[0]) {\n            let reader = new FileReader();\n            reader.readAsText(files[0], \"UTF-8\");\n            reader.onload = function (evt) {\n                const fileContents = JSON.parse(evt.target.result)\n                props.onImportTransactions(fileContents)\n            }\n        }\n    }\n\n    const allTransactions = props.allTransactions\n    const orderedFilteredTransactions = allTransactions\n        .filter( transaction => transaction.summary.toLowerCase().includes(filterStr.toLowerCase()) )\n        .sort( function(a,b) {\n            if (a.summary < b.summary) {\n                return (dataSortDir === 'asc') ? -1 : 1\n            } else if (a.summary > b.summary) {\n                return (dataSortDir === 'asc') ? 1 : -1\n            } else {\n                return 0\n            }\n        })\n    return (\n        <section id=\"transaction-list\">\n            <section id=\"transaction-list-controls\">\n                <form>\n                    <button onClick={ (e)=>onToggleSortOrder() } className=\"strong\">&#x21c5;</button>\n\n                    <label>Filter:</label>\n                    <input name=\"filterStr\" value={filterStr} onChange={handleChange} size=\"15\" />\n\n                    <button className=\"btn btn-sm btn-primary\" onClick={onExportButton} disabled={!props.allTransactions.length}>export</button>\n                    <div ref={exportEl}></div>\n\n                    <label className=\"btn btn-sm btn-primary\">\n                    <input type=\"file\" ref={importEl} onChange={ (e) => onHiddenImportChange(e.target.files) } accept=\"application/json\" style={{width: 0, visibility: \"hidden\"}} />\n                    import\n                    </label>\n                </form>\n            </section>\n            <section id=\"transactions\">\n                {orderedFilteredTransactions.map( transaction => (\n                    <p key={transaction.modifiedAt} className=\"transaction\" onClick={ (e)=>props.onDeleteTransaction(transaction.modifiedAt)}>{transaction.summary}</p>\n                ))}\n            </section>\n        </section>\n    )\n}\n\nTransactionsList.propTypes = {\n    allTransactions: PropTypes.array.isRequired,\n    allRisk: PropTypes.object.isRequired,\n    onDeleteTransaction: PropTypes.func.isRequired,\n    onImportTransactions: PropTypes.func.isRequired,\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const TagDelete = (props) => {\n\n    const [deleteTagList, setDeleteTagList] = useState(['untagged'])\n\n    const handleTagChange = (event) => {\n        const {selectedOptions } = event.target\n\n        let multipleTags = Array.from(selectedOptions, (item) => item.value)\n        if (multipleTags.includes('untagged')) {\n            multipleTags = ['untagged']\n        }\n\n        setDeleteTagList(multipleTags)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        const userTagList = deleteTagList\n        props.onDeleteTags(userTagList)\n\n        setDeleteTagList(['untagged'])\n    }\n\n    const isDisabled = () => {\n        if (deleteTagList.length === 1 && deleteTagList.includes('untagged')) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    return (\n        <section id=\"delete-tag\">\n            <form onSubmit={handleSubmit}>\n                <div id=\"operation\">\n                    Delete Tag:\n                    <select value={deleteTagList} multiple={true} onChange={handleTagChange}>\n                        <option key=\"untagged\" value=\"untagged\">(none)</option>\n                        {Object.keys(props.allTags).sort().filter(tagName => tagName !== 'untagged').map(tagName => (\n                        <option key={tagName} value={tagName}>{tagName}</option>\n                        ))}\n                    </select>\n                </div>\n                <section className=\"buttonrow\">\n                    <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag(s)\" disabled={isDisabled()} />\n                </section>\n            </form>\n        </section>\n    )\n}\n\nTagDelete.propTypes = {\n    allTags: PropTypes.object.isRequired,\n    onDeleteTags: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class MyPerformance extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            periodSize: 'month',\n            periodData: [],\n            dataSortDir: 'asc',\n        }\n        this.generatePeriodData = this.generatePeriodData.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.formatCurrency = this.formatCurrency.bind(this)\n        this.getDisplayedPerformance = this.getDisplayedPerformance.bind(this)\n        this.getMonthEndQuote = this.getMonthEndQuote.bind(this)\n        this.getYear = this.getYear.bind(this)\n        this.getPeriod = this.getPeriod.bind(this)\n        this.getMonth = this.getMonth.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.formatPerformance = this.formatPerformance.bind(this)\n        this.formatIndexPerformance = this.formatIndexPerformance.bind(this)\n        this.formatWholePercentage = this.formatWholePercentage.bind(this)\n        this.onToggleSortOrder = this.onToggleSortOrder.bind(this)\n        this.handlePeriodChange = this.handlePeriodChange.bind(this)\n    }\n\n    componentDidMount() {\n\n        let dataSortDir = 'asc', periodSize ='month'\n\n        const storedDataSortDir = JSON.parse(localStorage.getItem(\"dataSortDir\"))\n        if (storedDataSortDir !== null) {\n            dataSortDir = storedDataSortDir\n        }\n\n        const storedPeriodSize = JSON.parse(localStorage.getItem(\"periodSize\"))\n        if (storedPeriodSize !== null) {\n            periodSize = storedPeriodSize\n        }\n\n        this.generatePeriodData(periodSize)\n\n        this.setState({ dataSortDir: dataSortDir,\n                        periodSize: periodSize })\n\n    }\n\n    generatePeriodData(periodSize) {\n\n        let sortedTransactions = this.props.allTransactions.sort(function(a, b) {\n            if (a.date < b.date) {\n                return -1\n            } else if (a.date > b.date) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        \n        let periodData = [], newConsoleMessages = [], quoteErrors = []\n\n        if (sortedTransactions.length) {\n\n            // the performance start period includes the earliest added transaction\n            const firstYear = parseInt(sortedTransactions[0].date.split('-')[0])\n            const firstMonth = parseInt(sortedTransactions[0].date.split('-')[1])\n            let firstPeriod\n            if (periodSize === 'month') {\n                firstPeriod = firstMonth\n            } else if (periodSize === 'quarter') {\n                firstPeriod = Math.floor((firstMonth - 1) / 3 + 1)\n            } else if (periodSize === 'year') {\n                firstPeriod = 1\n            }\n\n            // the performance end period includes the current date\n            const today = new Date()\n            const todayYear = today.getFullYear()\n            const todayMonth = today.getMonth() + 1\n            let todayPeriod\n            if (periodSize === 'month') {\n                todayPeriod = todayMonth\n            } else if (periodSize === 'quarter') {\n                todayPeriod = Math.round(today.getMonth() / 3)\n            } else if (periodSize === 'year') {\n                todayPeriod = 1\n            }\n\n            // calculate the number of periods to display\n            let periodsOfPerformance\n            if (periodSize === 'month') {\n                periodsOfPerformance = (todayYear - firstYear) * 12 + (todayPeriod - firstPeriod) + 1\n            } else if (periodSize === 'quarter') {\n                periodsOfPerformance = (todayYear - firstYear) * 4 + (todayPeriod - firstPeriod) + 1\n            } else if (periodSize === 'year') {\n                periodsOfPerformance = (todayYear - firstYear) + 1\n            }\n\n            // based on MONTHLY quote data, initialize the lookback variables for the previous period\n            let startBaselinequote, startBaselineprice\n            let prevQuoteMonth, prevQuoteYear\n            if (periodSize === 'month') {\n                prevQuoteYear = (firstMonth !== 1) ? firstYear : firstYear - 1\n                prevQuoteMonth = (firstMonth !== 1) ? firstMonth - 1 : 12\n            } else if (periodSize === 'quarter') {\n                prevQuoteYear = (firstPeriod !== 1) ? firstYear : firstYear - 1 \n                prevQuoteMonth = (firstPeriod !== 1) ? (firstPeriod - 1) * 3 : 9\n            } else if (periodSize === 'year') {\n                prevQuoteYear = firstYear - 1\n                prevQuoteMonth = 12\n            }\n            startBaselinequote = this.getMonthEndQuote('S&P500', prevQuoteYear, prevQuoteMonth)\n            if (startBaselinequote === undefined || startBaselinequote.price === undefined) {\n                newConsoleMessages.push('ERROR: Quote for symbol S&P500 for month '+prevQuoteYear+'-'+prevQuoteMonth+' is unavailable.')\n                startBaselineprice = 'err.'\n                quoteErrors.push('S&P500')\n            } else {\n                startBaselineprice = startBaselinequote.price.adjustedClose\n            }\n\n            // calculate all period data\n            let year = firstYear\n            let startShares = {}, startCash = 0, startTickervalue = 0, startTotalValue = 0\n            for (let p = 0; p < periodsOfPerformance; p++) {\n                \n                // initialization\n                let period, newPeriod = {}\n                if (periodSize === 'month') {\n                    period = (p + firstPeriod - 1) % 12 + 1\n                } else if (periodSize === 'quarter') {\n                    period = (p + firstPeriod - 1) % 4 + 1\n                } else if (periodSize === 'year') {\n                    period =  1\n                }\n                newPeriod['period'] = period\n                if (period === 1 && p !== 0) {\n                    year += 1\n                }\n                newPeriod['year'] = year\n\n                // initialize this period's end values with the previous period's end values\n                let prevShares = {}, prevCash = 0, endTransfersinvalue = 0\n                if (p !== 0) {\n                    startTickervalue = periodData[p-1].endTickervalue\n                    startTotalValue = periodData[p-1].endTotalvalue\n                    prevShares = Object.assign({}, periodData[p-1].endShares)\n                    prevCash = periodData[p-1].endCash\n                } else {\n                    prevShares = Object.assign({}, startShares)\n                    prevCash = startCash\n                }\n                let endShares = Object.assign({}, prevShares)\n                let endCash = prevCash\n\n                // generate the title for this period\n                let periodSortSuffix, periodDisplaySuffix\n                if (periodSize === 'month') {\n                    const d = new Date(1980, period - 1, 1)\n                    periodSortSuffix = 'M' + ('0' + period).slice(-2)\n                    periodDisplaySuffix = ' ' + d.toLocaleString('default', { month: 'short' })\n                } else if (periodSize === 'quarter') {\n                    periodSortSuffix = 'Q' + ('0' + period).slice(-2)\n                    periodDisplaySuffix = 'Q' + period\n                } else if (periodSize === 'year') {\n                    periodSortSuffix = ''\n                    periodDisplaySuffix = ''\n                }\n                newPeriod['displayName'] = (p !== periodsOfPerformance - 1) ? year + periodDisplaySuffix : 'current'\n                newPeriod['sort_name'] = year + periodSortSuffix\n\n                // determine period's transactions\n                const target_year = year\n                const period_transactions = sortedTransactions.filter( t => this.getYear(t.date) === target_year && this.getPeriod(periodSize, t.date) === period )\n                newPeriod['transactions_of_stock'] = period_transactions.filter( t => t.ticker !== 'cash' )\n                newPeriod['transactions_of_cash'] = period_transactions.filter( t => t.ticker === 'cash' )\n\n                // determine period-end shares and cash value\n                for (let transaction of period_transactions) {\n                    let action, ticker, shares, total\n                    [action, ticker, shares, total] = [transaction.action, transaction.ticker, transaction.shares, transaction.total]\n                    if (ticker === 'cash') {\n                        const cash_delta = (action === 'transferIN' || action === 'dividend') ? total : -1 * total\n                        if (action === 'transferIN' || action === 'transferOUT') {\n                            endTransfersinvalue += cash_delta\n                        }\n                        endCash += cash_delta\n                    } else {\n                        const share_delta = (action === 'buy') ? shares : -1 * shares\n                        const cash_delta = (action === 'buy') ? -1 * total : total\n                        if (endShares.hasOwnProperty(ticker)) {\n                            endShares[ticker] += share_delta\n                        } else {\n                            endShares[ticker] = share_delta\n                        }\n                        endCash += cash_delta\n                    }\n                }\n                newPeriod['endShares'] = endShares\n                newPeriod['endCash'] = endCash\n                newPeriod['endTransfersinvalue'] = endTransfersinvalue\n\n                // determine period-end ticker value\n                const self = this\n                let endTickervalue = 0, end_tickerdate = null\n                let this_quote_month\n                if (periodSize === 'month') {\n                    this_quote_month = period\n                } else if (periodSize === 'quarter') {\n                    this_quote_month = period * 3\n                } else if (periodSize === 'year') {\n                    this_quote_month = 12\n                }\n                let this_quote_year = target_year\n                if (target_year === todayYear && period === todayPeriod) { // for a partial last period, use a previous month's quotes\n                    let lastavailablequote_month_str, lastavailablequote_year_str\n                    [lastavailablequote_year_str, lastavailablequote_month_str] = this.props.allMonthEndDates[0].split('-')\n                    const lastavailablequote_month = parseInt(lastavailablequote_month_str)\n                    const lastavailablequote_year = parseInt(lastavailablequote_year_str)\n                    if (periodSize === 'year') {\n                        if (lastavailablequote_year === todayYear) {\n                            this_quote_month = lastavailablequote_month\n                            this_quote_year = lastavailablequote_year\n                        }\n                    } else {\n                        if (lastavailablequote_month !== todayMonth || lastavailablequote_year !== todayYear) { // allow the previous month's quotes only\n                            if (todayMonth === 1 && (lastavailablequote_month !== 12 || lastavailablequote_year !== todayYear - 1)) {\n                                this_quote_month = 12\n                                this_quote_year = todayYear - 1\n                            } else if (todayMonth !== 1 && (lastavailablequote_month !== todayMonth - 1 || lastavailablequote_year !== todayYear)) {\n                                this_quote_month = todayMonth - 1\n                                this_quote_year = todayYear\n                            }\n                        }\n                    }\n                }\n                Object.entries(endShares).forEach(function(position) {\n                    if (position[1] !== 0) {\n                        let month_end_quote = self.getMonthEndQuote(position[0], this_quote_year, this_quote_month)\n                        if (month_end_quote === undefined || month_end_quote.price === undefined) {\n                            newConsoleMessages.push('ERROR: Quote for symbol '+position[0]+' for month '+this_quote_year+'-'+this_quote_month+' is unavailable.')\n                            endTickervalue = 'err.'\n                            end_tickerdate = null\n                            quoteErrors.push(position[0])\n                        } else if (endTickervalue !== 'err.') {\n                            endTickervalue += position[1] * month_end_quote.price.adjustedClose\n                            if (end_tickerdate === null) {\n                                end_tickerdate = month_end_quote.date\n                            } else if (end_tickerdate !== month_end_quote.date) {\n                                newConsoleMessages.push('ERROR: Quote dates for month '+this_quote_year+'-'+this_quote_month+' do not match for all symbols ('+end_tickerdate+' & '+month_end_quote.date+').')\n                            }\n                        }\n                    }\n                })\n                newPeriod['endTickervalue'] = endTickervalue\n                newPeriod['end_tickerdate'] = end_tickerdate\n                \n                // determine period-end total value\n                let endTotalvalue\n                if (typeof endTickervalue !== 'number' || typeof endCash !== 'number') {\n                    endTotalvalue = 'err.'\n                } else {\n                    endTotalvalue = endTickervalue + endCash\n                }\n                newPeriod['endTotalvalue'] = endTotalvalue\n                newPeriod['end_tickervaluefraction'] = endTickervalue / endTotalvalue\n                newPeriod['end_cashfraction'] = endCash / endTotalvalue\n\n                // determine period-end baseline value\n                let end_baselineprice, end_baselinedate\n                const end_baselinequote = self.getMonthEndQuote('S&P500', this_quote_year, this_quote_month)\n                if (end_baselinequote === undefined || end_baselinequote.price === undefined) {\n                    newConsoleMessages.push('ERROR: Quote for symbol S&P500 for month '+this_quote_year+'-'+this_quote_month+' is unavailable.')\n                    end_baselineprice = 'err.'\n                    end_baselinedate = null\n                    quoteErrors.push('S&P500')\n                } else {\n                    end_baselineprice = end_baselinequote.price.adjustedClose\n                    end_baselinedate = end_baselinequote.date\n                }\n                newPeriod['end_baselineprice'] = end_baselineprice\n                newPeriod['end_baselinedate'] = end_baselinedate\n\n                // determine period-over-period performance\n                // HPR (holding period return) = end / prev_end - 1\n                // HPR (HPR, adjusted for transfers) = end / (prev_end + transfersIN) - 1\n                // transfersIN, adjusted for middle-of-period transfers... aka Modified Dietz method)\n                //   transfersIN = transferINa * fraction of period duration) + (transferINb * fraction of period duration)\n                let adjusted_transfer_value = 0\n                let zb_start_month, zb_end_month, end_year\n                if (periodSize === 'month') {\n                    zb_start_month = period - 1\n                    zb_end_month = (zb_start_month !== 11) ? zb_start_month + 1 : 1\n                    end_year = (zb_start_month !== 11) ? target_year : target_year + 1\n                } else if (periodSize === 'quarter') {\n                    zb_start_month = period * 3 - 3\n                    zb_end_month = (period !== 4) ? zb_start_month + 3 : 1\n                    end_year = (period !== 4) ? target_year : target_year + 1\n                } else if (periodSize === 'year') {\n                    zb_start_month = 0\n                    zb_end_month = 0\n                    end_year = target_year + 1\n                }\n                const period_start_date = new Date(target_year, zb_start_month, 1)\n                const period_end_date = new Date(end_year, zb_end_month, 1)\n                const period_days = Math.round((period_end_date - period_start_date) / (1000 * 60 * 60 * 24))\n                newPeriod.transactions_of_cash.forEach(function(transaction) {\n                    let transfer_month, transfer_day, fraction_of_period\n                    [transfer_month, transfer_day] = [parseInt(transaction.date.split('-')[1]), parseInt(transaction.date.split('-')[2])]\n                    const transfer_date = new Date(target_year, transfer_month - 1, transfer_day)\n                    if (transaction.action === 'transferIN') {\n                        fraction_of_period = (period_end_date - transfer_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value += transaction.total * fraction_of_period\n                    } else if (transaction.action === 'transferOUT') {\n                        fraction_of_period = (transfer_date - period_start_date) / (1000 * 60 * 60 * 24) / period_days\n                        adjusted_transfer_value -= transaction.total * fraction_of_period\n                    }\n                })\n                let performance\n                if (typeof startTotalValue !== 'number' || typeof endTotalvalue !== 'number') {\n                    performance = 'err.'\n                } else if (startTickervalue === 0 && endTickervalue === 0) {\n                    performance = 0\n                } else {\n                    performance = (endTotalvalue / (startTotalValue + adjusted_transfer_value)) - 1\n                }\n                newPeriod['period_change_pct'] = performance\n\n                // determine period-over-period baseline performance\n                performance = 'n/a'\n                if (typeof startBaselineprice !== 'number' || typeof end_baselineprice !== 'number') {\n                    performance = 'err.'\n                } else if (p === 0) {\n                    performance = (end_baselineprice / startBaselineprice) - 1\n                } else {\n                    performance = (end_baselineprice / periodData[p-1].end_baselineprice) - 1\n                }\n                newPeriod['period_baseline_change_pct'] = performance\n\n                // store the data object\n                periodData.push(newPeriod)\n            }\n        }\n\n        if (newConsoleMessages.length) {\n            let message_summary\n            const quote_error_count = quoteErrors.length\n            if (newConsoleMessages.length === 1) {\n                message_summary = newConsoleMessages[0]\n            } else {\n                const quote_tickers_count = Array.from(new Set(quoteErrors)).length\n                const plural_quoteerrors = (quote_error_count === 1) ? '' : 's'\n                const plural_verb = (quote_error_count === 1) ? ' was' : ' were'\n                const plural_differentstocks = (quote_tickers_count === 1) ? ' stock' : ' different stocks'\n                if (quote_error_count === 1) {\n                    message_summary = 'ERROR: 1 quote was unavailable.'\n                } else if (quote_error_count > 1) {\n                    message_summary = 'ERROR: ' + quote_error_count + ' quote' + plural_quoteerrors \n                        + ' from ' + quote_tickers_count + plural_differentstocks + plural_verb + ' unavailable.'\n                } else {\n                    message_summary = 'ERROR: period performance calculations encountered error(s)'\n                }\n            }\n            let newConsoleMessageSet = this.props.createConsoleMessageSet(message_summary)\n            newConsoleMessageSet.messages = [...newConsoleMessages]\n            if (quote_error_count > 0) {\n                newConsoleMessageSet.hasErrors = true\n            }\n            this.props.onNewConsoleMessages(newConsoleMessageSet)\n        }\n\n        this.setState({ periodData: periodData })\n\n    }\n\n    getYear(date) {\n        return parseInt(date.split('-')[0])\n    }\n\n    getPeriod(periodSize, date) {\n        const zb_month = parseInt(date.split('-')[1])-1\n\n        if (periodSize === 'month') {\n            return zb_month + 1\n        } else if (periodSize === 'quarter') {\n            return Math.floor(zb_month / 3) + 1\n        } else if (periodSize === 'year') {\n            return 1\n        } else {\n            return 'n/a'\n        }\n    }\n\n    getMonth(date) {\n        return parseInt(date.split('-')[1])\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    formatCurrency(dollars) {\n        let prefix, retval = dollars\n        if (typeof dollars === 'number') {\n            const value = Math.round(dollars)\n            retval = this.numberWithCommas(Math.abs(value))\n            prefix = (value < 0 ) ? '-$' : '$'\n            retval = prefix + retval\n        } else {\n            retval = 'err.'\n        }\n        return retval\n    }\n\n    getDisplayedPerformance(periodData) {\n        let retval = {}\n        retval['key'] = periodData.sort_name\n        retval['display_value'] = 'err.'\n        retval['baseline_value'] = 'err.'\n        retval['index_value'] = periodData.period_baseline_change_pct\n        const my_perf = periodData.period_change_pct\n        if (my_perf === 'err.') {\n            retval['display_value'] = 'err.'\n        } else if (typeof my_perf === 'number') {\n            if (this.props.baselineName === 'sp500_pct_gain') {\n                const baseline_perf = periodData.period_baseline_change_pct\n                if (typeof baseline_perf !== 'number') {\n                    return retval\n                } else {\n                    retval['display_value'] = my_perf - baseline_perf\n                    retval['baseline_value'] = baseline_perf\n                }\n            } else {\n                retval['display_value'] = my_perf\n                retval['baseline_value'] = 0\n            }\n        }\n        return retval\n    }\n\n    getMonthEndQuote(ticker, year, month) {\n        const monthly_quotes = this.props.allMonthlyQuotes\n        const monthly_dates = this.props.allMonthEndDates\n        const period_idx = monthly_dates.findIndex( date => this.getYear(date) === year && this.getMonth(date) === month )\n        let retval = {}\n        if (period_idx !== -1) {\n            const quote_date = monthly_dates[period_idx]\n            retval['date'] = quote_date\n            retval['price'] = (monthly_quotes[ticker].hasOwnProperty(quote_date)) ? monthly_quotes[ticker][quote_date] : undefined\n        } else {\n            retval = undefined\n        }\n        return retval\n    }\n\n    styleCell(performance_obj) {\n        let displayed, baseline, index\n        [displayed, baseline, index] = [performance_obj.display_value, performance_obj.baseline_value, performance_obj.index_value]\n        let classes = 'performance-cell'\n        if ( this.props.baselineName === 'sp500_pct_gain') {\n            if (displayed > 0) {\n                classes += ' text-green'\n            } else if (displayed < 0) {\n                classes += ' text-red'\n            }\n        } else {\n            if ( displayed < baseline || displayed < 0 ) {\n                classes += ' text-red'\n            } else if (displayed > index && displayed > 0) {\n                classes += ' text-green'\n            }\n        }\n        return classes\n    }\n\n    formatPerformance(performance) {\n        if (performance === 'err.' || performance === 'ref.') {\n            return performance\n        } else if (typeof performance !== 'number') {\n            return '-'\n        } else {\n            return (Math.round(performance * 100 * 10) / 10).toFixed(1) + '%'\n        }\n    }\n\n    formatIndexPerformance(performance) {\n        if ( this.props.baselineName === 'sp500_pct_gain') {\n            return this.formatPerformance('ref.')\n        } else {\n            return this.formatPerformance(performance)\n        }\n    }\n\n    formatWholePercentage(percentage) {\n        if (percentage === 'err.') {\n            return 'err.'\n        } else if (typeof percentage !== 'number' || isNaN(percentage)) {\n            return '?'\n        } else {\n            return (Math.round(percentage * 100)) + '%'\n        }\n    }\n\n    onToggleSortOrder(num_periods) {\n        let el = document.getElementById('my-performance-periods')\n        const period_width = Math.floor(el.scrollWidth / num_periods)\n        const leftmost_zbperiod_shown = Math.floor(el.scrollLeft / period_width)\n        const new_scroll_left = (num_periods - leftmost_zbperiod_shown - 1) * period_width\n        el.scrollLeft = new_scroll_left\n        this.setState(prevState => {\n            const newSortDir = (prevState.dataSortDir === 'asc') ? 'desc' : 'asc'\n            localStorage.setItem('dataSortDir', JSON.stringify(newSortDir))\n            return { \n                dataSortDir: newSortDir \n            }\n        })\n    }\n\n    handlePeriodChange(event) {\n        const newPeriod = event.target.id.replace(/select-/g, '')\n        localStorage.setItem('periodSize', JSON.stringify(newPeriod))\n        this.setState({ periodSize: newPeriod })\n        this.generatePeriodData(newPeriod)\n    }\n\n    render() {\n        const self = this\n        let displayed_performance = {}\n        this.state.periodData.forEach(function(qdata) {\n            displayed_performance[qdata.sort_name] = self.getDisplayedPerformance(qdata)\n        })\n        const sorted_data = this.state.periodData.sort( function(a,b) {\n            if (a.sort_name < b.sort_name) {\n                return (self.state.dataSortDir === 'asc') ? -1 : 1\n            } else if (a.sort_name > b.sort_name) {\n                return (self.state.dataSortDir === 'asc') ? 1 : -1\n            } else {\n                return 0\n            }\n        })\n        return (\n            <div id=\"my-performance-wrapper\">\n                <div id=\"my-performance-body\">\n                    <div id=\"my-performance-rowlabels\">\n                        <div id=\"my-performance-controls\">\n                            <ul id=\"periodsize-selector\">\n                                <li id=\"select-year\" className={\"strong selector\" + (this.state.periodSize === \"year\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Y</li>\n                                <li id=\"select-quarter\" className={\"strong selector\" + (this.state.periodSize === \"quarter\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>Q</li>\n                                <li id=\"select-month\" className={\"strong selector\" + (this.state.periodSize === \"month\" ? \" selected\" : \"\")} onClick={this.handlePeriodChange}>M</li>\n                            </ul>\n                            <div id=\"sortorder-button\">\n                                <button onClick={ (e)=>this.onToggleSortOrder(sorted_data.length) } className=\"strong\">&#x21c6;</button>\n                            </div>\n                        </div>\n                        <p className=\"strong\">stocks:</p>\n                        <p className=\"strong\">cash:</p>\n                        <p className=\"strong\">transfers in:</p>\n                        <p className=\"strong\">total:</p>\n                        <p className=\"strong\">my perf{ (this.props.baselineName === 'sp500_pct_gain') ? ' delta' : '' }:</p>\n                        <p className=\"strong\">S&amp;P500:</p>\n                    </div>\n                    <div id=\"my-performance-periods\">\n                        { sorted_data.map( qdata => (\n                        <div className=\"period-data\" key={qdata.sort_name}>\n                            <p className=\"strong\">{qdata.displayName}</p>\n                            <p>{this.formatCurrency(qdata.endTickervalue)} ({this.formatWholePercentage(qdata.end_tickervaluefraction)})</p>\n                            <p>{this.formatCurrency(qdata.endCash)} ({this.formatWholePercentage(qdata.end_cashfraction)})</p>\n                            <p>{this.formatCurrency(qdata.endTransfersinvalue)}</p>\n                            <p className=\"strong\">{this.formatCurrency(qdata.endTotalvalue)}</p>\n                            <p className={ this.styleCell(displayed_performance[qdata.sort_name]) }>{ this.formatPerformance(displayed_performance[qdata.sort_name].display_value) }</p>\n                            <p>{ this.formatIndexPerformance(displayed_performance[qdata.sort_name].index_value) }</p>\n                        </div>\n                        ))}\n                    </div>\n                </div>\n                <div id=\"my-performance-footer\">\n                </div>\n\n            </div>\n        )\n    }\n}\n\nMyPerformance.propTypes = {\n    allTransactions: PropTypes.array.isRequired,\n    allPositions: PropTypes.object.isRequired,\n    allMonthlyQuotes: PropTypes.object.isRequired,\n    allMonthEndDates: PropTypes.array.isRequired,\n    baselineName: PropTypes.string.isRequired,\n    createConsoleMessageSet: PropTypes.func.isRequired,\n    onNewConsoleMessages: PropTypes.func.isRequired\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const Console = (props) => {\n\n    const [dataSortDir, setDataSortDir] = useState('desc')\n    const [expandedMessageSets, setExpandedMessageSets] = useState([])\n\n    const getClasses = (message) => {\n        let classes = 'message'\n        if (message.toUpperCase().startsWith('ERROR')) {\n            classes += ' warning'\n        }\n        return classes\n    }\n\n    const getMessageSetClasses = (messageSetCount) => {\n        let classes = 'messageSet'\n        if (parseInt(messageSetCount) > 1) {\n            classes += ' multiline'\n        }\n        return classes\n    }\n\n    const formatTimestamp = (epoch) => {\n        const tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds\n        const localISOTime = (new Date(new Date(parseInt(epoch)) - tzoffset)).toISOString()\n        const iso = localISOTime.match(/(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2})/)\n        return iso[1] + ' ' + iso[2]\n    }\n\n    const onToggleSortOrder = () => {\n        const newSortDir = (dataSortDir === 'asc') ? 'desc' : 'asc'\n        setDataSortDir(newSortDir)\n    }\n\n    const onToggleExpandMessageSet = (identifier) => {\n        let newExpandedMessageSets = JSON.parse(JSON.stringify(expandedMessageSets))\n        if (!newExpandedMessageSets.includes(identifier)) {\n            newExpandedMessageSets = [identifier]\n        } else {\n            newExpandedMessageSets = []\n        }\n        setExpandedMessageSets(newExpandedMessageSets)\n    }\n\n    const PopulateMessageSet = (toPopulate) => {\n        const timestamp = formatTimestamp(toPopulate.messageSet.modifiedAt)\n        const count = toPopulate.messageSet.messages.length\n        return (\n            <div className={getMessageSetClasses(count)}>\n                <p className=\"summary\" onClick={ (e) => onToggleExpandMessageSet(timestamp)}>[{timestamp}] <span className={getClasses(toPopulate.messageSet.summary)}>{toPopulate.messageSet.summary}</span></p>\n                { toPopulate.messageSet.messages.length > 1 && expandedMessageSets.includes(timestamp) && toPopulate.messageSet.messages.map ( (message, i) => (\n                    <p key={i} onClick={ (e) => onToggleExpandMessageSet(timestamp)}><span className={getClasses(message)}>{message}</span></p>\n                ))}\n            </div>\n        )\n    }\n\n    const messageSets = props.allConsoleMessages\n    let orderedMessageSets\n    orderedMessageSets = messageSets.sort(function(a,b) {\n        if (a.modifiedAt < b.modifiedAt) {\n            return (dataSortDir === 'asc') ? -1 : 1\n        } else if (a.modifiedAt > b.modifiedAt) {\n            return (dataSortDir === 'asc') ? 1 : -1\n        } else {\n            return 0\n        }\n    })\n\n    return (\n        <div id=\"console-messages-wrapper\">\n            <button onClick={ (e)=>onToggleSortOrder() } className=\"strong\">&#x21c5;</button> History:\n            <div id=\"console-messages\">\n            { orderedMessageSets && orderedMessageSets.map( (messageSet, i) => (\n                <PopulateMessageSet key={i} messageSet={messageSet} />\n            ))}\n            </div>\n        </div>\n    )\n}\n\nConsole.propTypes = {\n    allConsoleMessages: PropTypes.array.isRequired,\n}","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const WhatIf = (props) => {\n\n    const [balanceableValue, setBalanceableValue] = useState(0)\n    const [balanceTargetSet, setBalanceTargetSet] = useState('myCurrentHoldings')\n    const [balanceTargetColumn, setBalanceTargetColumn] = useState('currentValue')\n    const [sellAllOf, setSellAllOf] = useState(['sellNone'])\n    const [cashTreatment] = useState('ignore')\n    const [cashRemaining, setCashRemaining] = useState('$0')\n    const [cashValid, setCashValid] = useState(true)\n\n    useEffect( () => {\n\n        const newBalanceableValue = Math.round(props.getBalanceableValue(balanceTargetSet, sellAllOf, balanceTargetColumn))\n        setBalanceableValue(newBalanceableValue)\n\n        const storedBalanceTargetSet = JSON.parse(localStorage.getItem(\"balanceTargetSet\"))\n        if (storedBalanceTargetSet !== null) {\n            setBalanceTargetSet(storedBalanceTargetSet)\n        }\n\n        const storedBalanceTargetColumn = JSON.parse(localStorage.getItem(\"balanceTargetColumn\"))\n        if (storedBalanceTargetColumn !== null) {\n            setBalanceTargetColumn(storedBalanceTargetColumn)\n        }\n\n        const storedCashRemaining = JSON.parse(localStorage.getItem(\"cashRemaining\"))\n        if (storedCashRemaining !== null) {\n            setCashRemaining(storedCashRemaining)\n        }\n\n    }, [props, balanceTargetSet, sellAllOf, balanceTargetColumn])\n\n    const handleChange = (event) => {\n\n        const {name, value, selectedOptions } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balanceTargetSet') {\n            const newBalanceableValue = Math.round(props.getBalanceableValue(value, sellAllOf, balanceTargetColumn))\n            setBalanceableValue(newBalanceableValue)\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balanceTargetColumn') {\n            const newBalanceableValue = Math.round(this.props.getBalanceableValue(balanceTargetSet, sellAllOf, value))\n            setBalanceableValue(newBalanceableValue)\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cashRemaining') {\n            const usersWholeDollarsString = value.replace('$','').split('.')[0]\n            const usersWholeDollars = parseInt(usersWholeDollarsString)\n            const validWholeDollarsString = value.replace(/[^0-9.,]/g,'').split('.')[0]\n            if (validWholeDollarsString.length \n                && usersWholeDollarsString === validWholeDollarsString \n                && usersWholeDollars >= 0\n                && usersWholeDollars <= this.state.balanceableValue) { \n                setCashValid(true)\n            } else {\n                setCashValid(false)\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        if (name === 'balanceTargetSet') {\n            setBalanceTargetSet(value)\n        } else if (name === 'balanceTargetColumn') {\n            setBalanceTargetColumn(value)\n        } else if (name === 'sellAllOf') {\n            let multipleTickers = Array.from(selectedOptions, (item) => item.value)\n            if (multipleTickers.includes('sellNone')) {\n                multipleTickers = ['sellNone']\n            }\n            const newBalanceableValue = Math.round(props.getBalanceableValue(balanceTargetSet, value, balanceTargetColumn))\n            setSellAllOf(multipleTickers)\n            setBalanceableValue(newBalanceableValue)\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const userRemainingCash = cashRemaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        const remainingCash = (cashTreatment === 'include') ? parseInt(userRemainingCash) : null\n        props.onWhatifSubmit(balanceTargetSet, sellAllOf, balanceTargetColumn, remainingCash)\n    }\n\n    const isDisabled = () => {\n\n        if (cashTreatment === 'include' && !cashValid) {\n            return true\n        } else if (balanceTargetSet === 'myCurrentHoldings') {\n            return (props.showCurrentHoldings) ? false : true\n        } else if (balanceTargetSet === 'untagged') {\n            return (props.showUntagged) ? false : true\n        } else {\n            return (props.showTagged) ? false : true\n        }\n    }\n\n    const numberWithCommas = (x) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    let excludableTickers = []\n    if (balanceTargetSet === \"myCurrentHoldings\") {\n        excludableTickers = Object.keys(props.allPositions).filter( ticker => ticker !== 'cash' && props.allPositions[ticker].currentShares)\n    } else if (props.allTags.hasOwnProperty(balanceTargetSet)) {\n        excludableTickers = props.allTags[balanceTargetSet].filter( ticker => props.allPositions[ticker] && props.allPositions[ticker].currentShares)\n    }\n    return (\n        <section id=\"what-if\">\n            <form onSubmit={handleSubmit}>\n                <div id=\"operation\">Balance&nbsp;\n                    <select name=\"balanceTargetSet\" value={balanceTargetSet} onChange={handleChange}>\n                        <option value=\"myCurrentHoldings\">current holdings ({Object.entries(props.allPositions).filter(position => position[0] !== 'cash' && position[1].currentShares !== 0).length})</option>\n                        <option value=\"untagged\">untagged tickers ({props.allTags.untagged.length})</option>\n                        {Object.entries(props.allTags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                            <option key={tag} value={tag}>tag: {tag} ({props.allTags[tag].length})</option>\n                        )}\n                    </select>\n                    &nbsp;into&nbsp; \n                    <select name=\"balanceTargetColumn\" value={balanceTargetColumn} onChange={handleChange}>\n                        <option value=\"currentValue\">equal values</option>\n                        <option value=\"valueAtRisk\">equal values, risk adjusted</option>\n                        <option value=\"basis\">equal bases</option>\n                        <option value=\"basisRisked\">equal bases, risk adjusted</option>\n                        <option value=\"onlyProfits\">only profits remaining</option>\n                    </select>\n                    , but sell all of&nbsp;\n                    <select name=\"sellAllOf\" value={sellAllOf} multiple={true} onChange={handleChange}>\n                        <option value=\"sellNone\">(none. keep all.)</option>\n                        {excludableTickers.sort().map(ticker => \n                            <option key={ticker} value={ticker}> {ticker} </option>\n                        )}\n                    </select>\n                    &nbsp;...\n                </div>\n                <div id=\"cash-treatment\">\n                    <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cashTreatment\" value=\"ignore\" selected onChange={handleChange} defaultChecked />ignoring my cash balance</label>\n                    <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cashTreatment\" value=\"include\" onChange={handleChange} disabled={!props.showCash} />using my cash balance, and leaving at least\n                    <input type=\"text\" id=\"cashRemaining\" name=\"cashRemaining\" size=\"12\" onChange={handleChange} value={cashRemaining} placeholder=\"$0\"></input>cash remaining (max: ${numberWithCommas(balanceableValue)})</label>\n                </div>\n                <section className=\"buttonrow\">\n                    <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={isDisabled()}/>\n                </section>\n            </form>\n        </section>\n    )\n}\n\nWhatIf.propTypes = {\n    allCurrentQuotes: PropTypes.object,\n    allTags: PropTypes.object,\n    allPositions: PropTypes.object,\n    getBalanceableValue: PropTypes.func,\n    showCurrentHoldings: PropTypes.bool,\n    showTagged: PropTypes.bool,\n    showUntagged: PropTypes.bool,\n    showCash: PropTypes.bool,\n    onWhatifSubmit: PropTypes.func\n}","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { TickerAdd } from './TickerAdd'\nimport { TagAdd } from './TagAdd'\nimport { TransactionAdd } from './TransactionAdd'\nimport { TransactionsList } from './TransactionsList'\nimport { TagDelete } from './TagDelete'\nimport { MyPerformance } from './MyPerformance'\nimport { Console } from './Console'\nimport { WhatIf } from './WhatIf'\n\n\nexport const InputForms = (props) => {\n\n    // tickers | tags | transactions | my-performance | what-ifs | console\n    const [whichInputs, setWhichInputs] = useState('tickers') \n\n    useEffect ( () => {\n        const storedWhichInputs = JSON.parse(localStorage.getItem(\"whichInputs\"))\n        if (storedWhichInputs !== null) {\n            setWhichInputs(storedWhichInputs)\n        }\n    }, [])\n\n    const onWhichInputs = (newWhichInputs) => {\n        localStorage.setItem('whichInputs', JSON.stringify(newWhichInputs))\n        if (whichInputs !== newWhichInputs) {\n            props.clearLastConsoleMessage()\n        }\n        setWhichInputs(newWhichInputs)\n    }\n\n    return (\n        <div id=\"input-forms\">\n            <section id=\"input-form-selectors\">\n                <span className={\"input-form-selector\" + (whichInputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>onWhichInputs('tickers')}>Tickers</span>\n                <span className={\"input-form-selector\" + (whichInputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>onWhichInputs('tags')}>Tags</span>\n                <span className={\"input-form-selector\" + (whichInputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>onWhichInputs('transactions')}>Transactions</span>\n                <span className={\"input-form-selector\" + (whichInputs===\"my-performance\" ? \" selected\" : \"\") } onClick={ (e)=>onWhichInputs('my-performance')}>Performance</span>\n                <span className={\"input-form-selector\" + (whichInputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>onWhichInputs('what-ifs')}>What If?</span>\n                <span className={\"input-form-selector\" + (whichInputs===\"console\" ? \" selected\" : \"\") } onClick={ (e)=>onWhichInputs('console')}>Messages</span>\n            </section>\n            <section id=\"input-form-forms\">\n                {whichInputs === 'tickers' && (\n                    <React.Fragment>\n                    <TickerAdd\n                        allStocks={props.allStocks}\n                        allTags={props.allTags}\n                        onNewTickers={props.onNewTickers}\n                        createConsoleMessageSet={props.createConsoleMessageSet}\n                        onNewConsoleMessages={props.onNewConsoleMessages}\n                    />\n                    </React.Fragment>\n                )}\n                {whichInputs === 'tags' && (\n                    <React.Fragment>\n                    <TagAdd\n                        allTags={props.allTags}\n                        onNewTags={props.onNewTags}\n                        createConsoleMessageSet={props.createConsoleMessageSet}\n                        onNewConsoleMessages={props.onNewConsoleMessages}\n                    />\n                    <TagDelete\n                        allTags={props.allTags}\n                        onDeleteTags={props.onDeleteTags}\n                    />\n                    </React.Fragment>\n                )}\n                {whichInputs === 'transactions' && (\n                <React.Fragment>\n                    <div className=\"content-wrapper\">\n                        <div className=\"content-half\">\n                            <TransactionAdd\n                                allStocks={props.allStocks}\n                                allTags={props.allTags}\n                                onNewTransaction={props.onNewTransaction}\n                                onNewCash={props.onNewCash}\n                                createConsoleMessageSet={props.createConsoleMessageSet}\n                                onNewConsoleMessages={props.onNewConsoleMessages}\n                            />\n                        </div>\n                        <div className=\"content-half\">\n                            <TransactionsList\n                                allTransactions={props.allTransactions}\n                                allRisk={props.allRisk}\n                                onDeleteTransaction={props.onDeleteTransaction}\n                                onImportTransactions={props.onImportTransactions}\n                            />\n                        </div>\n                    </div>\n                </React.Fragment>\n                )}\n                {whichInputs === 'what-ifs' && (\n                    <React.Fragment>\n                    <WhatIf\n                        allCurrentQuotes={props.allCurrentQuotes}\n                        allPositions={props.allPositions}\n                        allTags={props.allTags}\n                        getBalanceableValue={props.getBalanceableValue}\n                        showCurrentHoldings={props.showCurrentHoldings}\n                        showPreviousHoldings={props.showPreviousHoldings}\n                        showTagged={props.showTagged}\n                        showUntagged={props.showUntagged}\n                        showCash={props.showCash}\n                        onWhatifSubmit={props.onWhatifSubmit}\n                    />\n                    </React.Fragment>\n                )}\n                {whichInputs === 'my-performance' && (\n                    <React.Fragment>\n                    <MyPerformance\n                        allTransactions={props.allTransactions}\n                        allPositions={props.allPositions}\n                        allMonthlyQuotes={props.allMonthlyQuotes}\n                        allMonthEndDates={props.allMonthEndDates}\n                        baselineName={props.baselineName}\n                        createConsoleMessageSet={props.createConsoleMessageSet}\n                        onNewConsoleMessages={props.onNewConsoleMessages}\n                    />\n                    </React.Fragment>\n                )}\n                {whichInputs === 'console' && (\n                    <React.Fragment>\n                    <Console\n                        allConsoleMessages={props.allConsoleMessages}\n                    />\n                    </React.Fragment>\n                )}\n            </section>\n        </div>\n    )\n}\n\nInputForms.propTypes = {\n    allStocks: PropTypes.array.isRequired,\n    allTags: PropTypes.object.isRequired,\n    allCurrentQuotes: PropTypes.object.isRequired,\n    allMonthlyQuotes: PropTypes.object.isRequired,\n    allMonthEndDates: PropTypes.array.isRequired,\n    allPositions: PropTypes.object,\n    allTransactions: PropTypes.array,\n    allRisk: PropTypes.object,\n    showTagged: PropTypes.bool,\n    showUntagged: PropTypes.bool,\n    showCash: PropTypes.bool,\n    baselineName: PropTypes.string,\n    getBalanceableValue: PropTypes.func,\n    onNewTickers: PropTypes.func.isRequired,\n    onNewCash: PropTypes.func.isRequired,\n    onNewTags: PropTypes.func.isRequired,\n    onDeleteTags: PropTypes.func.isRequired,\n    onNewTransaction: PropTypes.func.isRequired,\n    onDeleteTransaction: PropTypes.func.isRequired,\n    onImportTransactions: PropTypes.func.isRequired,\n    createConsoleMessageSet: PropTypes.func.isRequired,\n    allConsoleMessages: PropTypes.array.isRequired,\n    onNewConsoleMessages: PropTypes.func.isRequired,\n    onWhatifSubmit: PropTypes.func,\n    clearLastConsoleMessage: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst allColumns = [\n    {\n        name: 'symbol',\n        displayName: 'Symbol',\n        type: 'string',\n        category: 'always'\n    },\n    {\n        name: 'currentShares',\n        displayName: 'Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_shares',\n        displayName: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'current_price',\n        displayName: 'Price',\n        type: 'currency',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     displayName: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2,\n    //     category: 'performance'\n    // },\n    {\n        name: 'quote_date',\n        displayName: 'Price Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'currentValue',\n        displayName: 'Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percentValue',\n        displayName: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_current_value',\n        displayName: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basis',\n        displayName: 'Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percentBasis',\n        displayName: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis',\n        displayName: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'profit',\n        displayName: 'Profit',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'percent_profit',\n        displayName: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1,\n        category: 'holdings'\n    },\n    {\n        name: 'realized_gains',\n        displayName: 'Realized',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'risk_factor_modified',\n        displayName: 'Risk Factor Edited Date',\n        type: 'string',\n        category: 'stock-specific'\n    },\n    {\n        name: 'risk_factor',\n        displayName: 'Risk Factor (default=0.20)',\n        type: 'number',\n        num_decimals: 2,\n        category: 'stock-specific'\n    },\n    {\n        name: 'valueAtRisk',\n        displayName: 'Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_value_at_risk',\n        displayName: 'What-If Value At Risk',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'basisRisked',\n        displayName: 'Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'whatif_basis_risked',\n        displayName: 'What-If Basis Risked',\n        type: 'currency',\n        num_decimals: 0,\n        category: 'holdings'\n    },\n    {\n        name: 'volume',\n        displayName: 'Volume',\n        type: 'number',\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'dollar_volume',\n        displayName: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0,\n        category: 'stock-specific'\n    },\n    {\n        name: 'start_date',\n        displayName: 'Holding Started Date',\n        type: 'string',\n        category: 'holdings'\n    },\n    {\n        name: 'shortChangePct',\n        displayName: '6-month',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'mediumChangePct',\n        displayName: '1-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    },\n    {\n        name: 'longChangePct',\n        displayName: '2-year',\n        type: 'percentage',\n        num_decimals: 1,\n        category: 'performance'\n    }\n]\n\nconst defaultShownColumns = ['symbol', 'currentShares', 'currentValue', 'percentValue', 'percentBasis', 'percent_profit', 'shortChangePct', 'mediumChangePct', 'longChangePct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthEndDates: [],\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: [],\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n            allConsoleMessages: [],\n            last_console_message: '',\n            whatifFormat: 'deltas', // deltas | new_values\n            balanceTargetSet: 'myCurrentHoldings',\n            balanceTargetColumn: '',\n            sellAllOf: [],\n            remainingCash: null,\n            baseline: {\n                name: 'zeroPctGain',\n                shortChangePct: 0,\n                mediumChangePct: 0,\n                longChangePct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            showCurrentHoldings: true,\n            showPreviousHoldings: false,\n            showTagged: true,\n            showUntagged: true,\n            show_index: false,\n            showCash: false,\n            show_aggregates: true,\n            error_if_not_todays_quote: true,\n            show_only_achieved_performance: false,\n            sortColumn: 'symbol',\n            sort_dir_asc: true,\n            shownColumns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getTransactionById = this.getTransactionById.bind(this)\n        this.getTransactionsByTicker = this.getTransactionsByTicker.bind(this)\n        this.getPositionFromSingleTickerTransactions = this.getPositionFromSingleTickerTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.createConsoleMessageSet = this.createConsoleMessageSet.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onImportTransactions = this.onImportTransactions.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTags = this.onDeleteTags.bind(this)\n        this.onDeleteTransaction = this.onDeleteTransaction.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewConsoleMessages = this.onNewConsoleMessages.bind(this)\n        this.clearLastConsoleMessage = this.clearLastConsoleMessage.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n        this.currentQuoteExists = this.currentQuoteExists.bind(this)\n        this.getClosingPrice = this.getClosingPrice.bind(this)\n        this.getMostRecentClosingPrice = this.getMostRecentClosingPrice.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.getMaxBalanceableValue = this.getMaxBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getCurrentHoldings = this.getCurrentHoldings.bind(this)\n        this.getPreviousHoldings = this.getPreviousHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.getTickersFromSet = this.getTickersFromSet.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        // 1. load all locally-stored data\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sortColumn\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sortColumn: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatifFormat\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatifFormat: stored_whatif_format })\n        }\n\n        let allTags = {}\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n            allTags = JSON.parse(JSON.stringify(stored_allTags))\n        }\n\n        let allTransactions = []\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n            allTransactions = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        const storedAllRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (storedAllRisk !== null) {\n            this.setState({ allRisk: storedAllRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['showCurrentHoldings', 'showPreviousHoldings', 'showTagged', 'showUntagged', 'show_index', 'showCash', 'show_aggregates', 'show_only_achieved_performance', 'error_if_not_todays_quote']\n        let storedControls = {}\n        view_controls.forEach(function(control) {\n            storedControls[control] = null\n            const storedControl = JSON.parse(localStorage.getItem(control))\n            if (storedControl !== null) {\n                storedControls[control] = storedControl\n                self.setState({ [control]: storedControl })\n            }\n        })\n\n        let initShownColumns = []\n        const storedShownColumns = JSON.parse(localStorage.getItem(\"shownColumns\"))\n        if (storedShownColumns !== null) {\n            initShownColumns = [...storedShownColumns]\n        } else {\n            initShownColumns = allColumns.filter(column => defaultShownColumns.includes(column.name))\n        }\n\n\n        // 2. calculate historical performance data for each added ticker\n\n        let baseline = {}\n        const storedBaseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (storedBaseline !== null) {\n            baseline = Object.assign({}, storedBaseline)\n        } else {\n            baseline = {\n                name: 'zeroPctGain',\n                shortChangePct: 0,\n                mediumChangePct: 0,\n                longChangePct: 0,\n            }\n        }\n\n        let indexedRiskData = {}\n        if (storedAllRisk !== null) {\n            indexedRiskData = JSON.parse(JSON.stringify(storedAllRisk))\n        }\n\n        const rawCurrentQuoteData = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexedCurrentQuoteData = {}\n        rawCurrentQuoteData.forEach(function(raw_quote) {\n            const adjustedTicker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'].toUpperCase())\n            indexedCurrentQuoteData[adjustedTicker] = raw_quote\n        })\n\n        const rawMonthlyQuoteData = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexedMonthlyQuoteData = {}\n        let indexPerformance = {}\n        rawMonthlyQuoteData.forEach(function(raw_quote) {\n            const adjustedTicker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'].toUpperCase())\n            indexedMonthlyQuoteData[adjustedTicker] = raw_quote\n            if (adjustedTicker === 'S&P500') {\n                let quoteTimeSeriesDesc = Object.entries(indexedMonthlyQuoteData[adjustedTicker]['Monthly Adjusted Time Series'])\n                .sort(function(a,b) {\n                    if(a[0] < b[0]) {\n                        return 1\n                    } else if (a[0] > b[0]) {\n                        return -1\n                    } else {\n                        return 0\n                    }\n                })\n                const monthly_prices = Object.entries(quoteTimeSeriesDesc).map(price => parseFloat(price[1]['5. adjusted close']))\n                const now = monthly_prices[0]\n                const prev_short = monthly_prices[5]\n                const prev_medium = monthly_prices[11]\n                const prev_long = monthly_prices[23]\n                indexPerformance['shortChangePct'] = (now - prev_short) / now * 100\n                indexPerformance['mediumChangePct'] = (now - prev_medium) / now * 100\n                indexPerformance['longChangePct'] = (now - prev_long) / now * 100\n                baseline['shortChangePct'] = indexPerformance['shortChangePct']\n                baseline['mediumChangePct'] = indexPerformance['mediumChangePct']\n                baseline['longChangePct'] = indexPerformance['longChangePct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ indexPerformance: indexPerformance })\n\n\n        // 3. calculate position data (from transactions) for all holdings\n\n        let allStocks = []\n        allTransactions.forEach(function(transaction) {\n            if (!allStocks.includes(transaction.ticker)) {\n                allStocks.push(transaction.ticker)\n            }\n        })\n        Object.keys(indexedCurrentQuoteData).forEach(function(ticker) {\n            if (!allStocks.includes(ticker)) {\n                allStocks.push(ticker)\n            }\n        })\n        Object.keys(indexedMonthlyQuoteData).forEach(function(ticker) {\n            if (!allStocks.includes(ticker)) {\n                allStocks.push(ticker)\n            }\n        })\n        Object.keys(indexedRiskData).forEach(function(ticker) {\n            if (!allStocks.includes(ticker)) {\n                allStocks.push(ticker)\n            }\n        })\n        allStocks = allStocks.filter(ticker => ticker !== 'cash')\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthEndDates = []\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n        let cash_delta_from_stock_transactions = 0\n\n        allStocks.forEach(function(ticker) {\n\n            // create a stock position if any transactions exist\n            allTransactions.forEach(function(transaction) {\n                if (!newPositions.hasOwnProperty(transaction.ticker) && transaction.ticker !== 'cash') {\n                    let newPosition = {}\n                    const ticker = transaction.ticker\n                    newPosition = self.getPositionFromSingleTickerTransactions(allTransactions.filter(transaction => transaction.ticker === ticker))\n                    newPosition['symbol'] = ticker\n                    newPositions[ticker] = newPosition\n                    if (transaction.action === 'buy') {\n                        cash_delta_from_stock_transactions -= transaction.total\n                    } else {\n                        cash_delta_from_stock_transactions += transaction.total\n                    }\n                }\n            })\n\n            // get current quote\n            if (indexedCurrentQuoteData.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexedCurrentQuoteData[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuote['quote_date'] = quoteResult['07. latest trading day']\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexedMonthlyQuoteData.hasOwnProperty(ticker)) {\n\n                let newTickerQuotes = {}\n                Object.entries(indexedMonthlyQuoteData[ticker]['Monthly Adjusted Time Series']).forEach(function(entry) {\n\n                    const full_date = entry[0]\n\n                    // collect all quotes for this ticker\n                    let newQuote = {}\n                    newQuote['adjustedClose'] = parseFloat(entry[1]['5. adjusted close'])\n                    newTickerQuotes[full_date] = newQuote\n\n                    // build the month-end dates (YYYY-MM-DD)\n                    const target_month = full_date.substr(0,7)\n                    if (!newMonthEndDates.includes(full_date)) {\n                        const found_idx = newMonthEndDates.findIndex(element => element.substr(0,7) === target_month)\n                        if (found_idx === -1) {\n                            newMonthEndDates.push(full_date)\n                        } else if (newMonthEndDates[found_idx] < full_date) {\n                            newMonthEndDates[found_idx] = full_date\n                        }\n                    }\n                })\n                newMonthlyQuotes[ticker] = newTickerQuotes\n\n                // calculate performance\n                let newPerformance = {}\n\n                let ticker_now = self.getClosingPrice(ticker, newMonthEndDates[0], newMonthlyQuotes)\n                if (typeof ticker_now !== 'number') {\n                    ticker_now = self.getMostRecentClosingPrice(ticker, newCurrentQuotes)\n                }\n                let ticker_short_ago = self.getClosingPrice(ticker, newMonthEndDates[5], newMonthlyQuotes)\n                let ticker_medium_ago = self.getClosingPrice(ticker, newMonthEndDates[11], newMonthlyQuotes)\n                let ticker_long_ago = self.getClosingPrice(ticker, newMonthEndDates[23], newMonthlyQuotes)\n                let ticker_perf_short, ticker_perf_medium, ticker_perf_long\n                if (typeof ticker_now === 'number') {\n                    if (typeof ticker_short_ago === 'number') {\n                        ticker_perf_short = (ticker_now - ticker_short_ago) / ticker_now * 100\n                        newPerformance['shortChangePct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_short - indexPerformance.shortChangePct \n                            : ticker_perf_short\n                    } else {\n                        newPerformance['shortChangePct'] = 'err.'\n                    }\n                    if (typeof ticker_medium_ago === 'number') {\n                        ticker_perf_medium = (ticker_now - ticker_medium_ago) / ticker_now * 100\n                        newPerformance['mediumChangePct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_medium - indexPerformance.mediumChangePct \n                            : ticker_perf_medium\n                    } else {\n                        newPerformance['mediumChangePct'] = 'err.'\n                    }\n                    if (typeof ticker_long_ago === 'number') {\n                        ticker_perf_long = (ticker_now - ticker_long_ago) / ticker_now * 100\n                        newPerformance['longChangePct'] = (baseline.name === 'sp500_pct_gain') \n                            ? ticker_perf_long - indexPerformance.longChangePct \n                            : ticker_perf_long\n                    } else {\n                        newPerformance['longChangePct'] = 'err.'\n                    }\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            if (indexedRiskData.hasOwnProperty(ticker)) {\n                newRisk[ticker] = JSON.parse(JSON.stringify(indexedRiskData[ticker]))\n            }\n        })\n        newMonthEndDates = newMonthEndDates.sort().reverse()\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            shortChangePct: 0,\n            mediumChangePct: 0,\n            longChangePct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        let cash_transactions = allTransactions.filter(transaction => transaction.ticker === 'cash')\n        if (cash_transactions.length || cash_delta_from_stock_transactions !== 0) {\n            let newPosition = {}\n            newPosition = this.getPositionFromCashTransactions(cash_transactions)\n            newPosition['symbol'] = 'cash'\n            if (cash_delta_from_stock_transactions) {\n                newPosition['basis'] += cash_delta_from_stock_transactions\n                newPosition['currentShares'] += cash_delta_from_stock_transactions\n            }\n            newPositions['cash'] = newPosition\n        }\n\n        // 5. handle aggregates\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(allTags, newPositions, newCurrentQuotes, storedControls['showCurrentHoldings'], storedControls['showCash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(allTags, newPerformanceNumbers)))\n\n\n        // 6. update the app's state with all of the above changes\n\n        this.setState({ allStocks: allStocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthEndDates: newMonthEndDates,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shownColumns: initShownColumns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getTransactionById(transaction_id) {\n        return this.state.allTransactions.filter(transaction => transaction.modifiedAt === transaction_id)[0]\n    }\n\n    getTransactionsByTicker(ticker) {\n        return this.state.allTransactions.filter(transaction => transaction.ticker === ticker)\n    }\n\n    getPositionFromSingleTickerTransactions(transactions) { // assumes the transactions are all from a single ticker\n        let inflows = 0, outflows = 0, currentShares = 0, date, action, num_shares, ticker, value\n        let sortedTransactions = transactions.sort(function(a,b) {\n            if (a.date > b.date) {\n                return -1\n            } else if (a.date < b.date) {\n                return -1\n            } else {\n                return 0\n            }\n        })\n        let position_start_date = '1970/01/01'\n        sortedTransactions.forEach(function(transaction) {\n            [date, action, num_shares, ticker, value] = transaction.summary.split(' ')\n            date = date.substr(0, date.length-1)\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (currentShares === 0) {\n                position_start_date = date\n            }\n            if (action === 'buy') {\n                outflows += value\n                currentShares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                currentShares -= num_shares\n            }\n            if (currentShares === 0) {\n                position_start_date = 'n/a'\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            currentShares: currentShares,\n            start_date: position_start_date,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || currentShares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [, action, value] = cash_transaction.summary.split(' ')\n            const cash_amount = parseFloat(value.substr(1))\n            if (action === 'transferIN' || action === 'dividend') {\n                total += cash_amount\n            } else if (action === 'transferOUT' || action === 'fee') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            currentShares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(allTags, allPositions, all_quotes, showCurrentHoldings, showCash) {\n\n        const holdings = (showCurrentHoldings === null) ? this.state.showCurrentHoldings : showCurrentHoldings\n        const cash = (showCash === null) ? this.state.showCash : showCash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(allTags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(allPositions).forEach(function(ticker) {\n                if (allTags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(allPositions).forEach(function(position_info) {\n            const ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            if (ticker_basis < 0) {\n                ticker_basis = 0\n            }\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['currentShares']\n            let quote_exists = all_quotes.hasOwnProperty(ticker)\n            let ticker_price, ticker_total_value\n            if (ticker === 'cash') {\n                ticker_price = 1\n                ticker_total_value = ticker_price * ticker_shares\n            } else if (ticker_shares === 0) {\n                ticker_total_value = 0\n            } else if (quote_exists) {\n                ticker_price = all_quotes[ticker]['current_price']\n                ticker_total_value = ticker_price * ticker_shares\n                if (ticker_total_value < 0) {\n                    ticker_total_value = 0\n                }\n            } else {\n                ticker_total_value = 'err.'\n            }\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                if (aggr_totalvalue_by_tag['_everything_'] === 'err.') {\n                    aggr_totalvalue_by_tag['_everything_'] = 'err.'\n                } else if (ticker_total_value === 'err.') {\n                    aggr_totalvalue_by_tag['_everything_'] = 'err.'\n                } else {\n                    aggr_totalvalue_by_tag['_everything_'] += ticker_total_value\n                }\n                Object.keys(allTags).forEach(function(tag) {\n                    if (allTags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        if (aggr_totalvalue_by_tag === 'err.') {\n                            aggr_totalvalue_by_tag[tag] = 'err.'\n                        } else if (ticker_total_value === 'err.') {\n                            aggr_totalvalue_by_tag[tag] = 'err.'\n                        } else {\n                            aggr_totalvalue_by_tag[tag] += ticker_total_value\n                        }\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(allTags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            shortChangePct: 0,\n            mediumChangePct: 0,\n            longChangePct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(allTags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short, medium, long, prev_short, prev_medium, prev_long\n            if (all_performance_numbers.hasOwnProperty(ticker)) {\n                short = all_performance_numbers[ticker]['shortChangePct']\n                medium = all_performance_numbers[ticker]['mediumChangePct']\n                long = all_performance_numbers[ticker]['longChangePct']\n                prev_short = aggr_performance_by_tag['_everything_'].shortChangePct\n                prev_medium = aggr_performance_by_tag['_everything_'].mediumChangePct\n                prev_long = aggr_performance_by_tag['_everything_'].longChangePct\n                aggr_performance_by_tag['_everything_'].shortChangePct = (prev_short === 'err.' || short === 'err.') ? 'err.' : prev_short + short\n                aggr_performance_by_tag['_everything_'].mediumChangePct = (prev_medium === 'err.' || medium === 'err.') ? 'err.' : prev_medium + medium\n                aggr_performance_by_tag['_everything_'].longChangePct = (prev_long === 'err.' || long === 'err.') ? 'err.' : prev_long + long\n            } else {\n                short = 'err.'\n                medium = 'err.'\n                long = 'err.'\n                aggr_performance_by_tag['_everything_'].shortChangePct = 'err.'\n                aggr_performance_by_tag['_everything_'].mediumChangePct = 'err.'\n                aggr_performance_by_tag['_everything_'].longChangePct = 'err.'\n            }\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(allTags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && allTags[tag].includes(ticker)) {\n                    prev_short = aggr_performance_by_tag[tag].shortChangePct\n                    prev_medium = aggr_performance_by_tag[tag].mediumChangePct\n                    prev_long = aggr_performance_by_tag[tag].longChangePct\n                    aggr_performance_by_tag[tag].shortChangePct = (prev_short === 'err.') ? 'err.' : short\n                    aggr_performance_by_tag[tag].mediumChangePct = (prev_medium === 'err.') ? 'err.' : medium\n                    aggr_performance_by_tag[tag].longChangePct = (prev_long === 'err.') ? 'err.' : long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (allTags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['shortChangePct'] = short\n                    new_aggr_performance['mediumChangePct'] = medium\n                    new_aggr_performance['longChangePct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            const tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                if (performance[time_range] !== 'err.') {\n                    let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                    aggr_performance_by_tag[tag][time_range] = value\n                }\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        const name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['shortChangePct'] = this.state.allPerformanceNumbers['S&P500']['shortChangePct']\n                new_baseline['mediumChangePct'] = this.state.allPerformanceNumbers['S&P500']['mediumChangePct']\n                new_baseline['longChangePct'] = this.state.allPerformanceNumbers['S&P500']['longChangePct']\n            } else {\n                new_baseline['shortChangePct'] = 0\n                new_baseline['mediumChangePct'] = 0\n                new_baseline['longChangePct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        const showCash = (name === 'showCash') ? new_value : this.state.showCash\n        const showCurrentHoldings = (name === 'showCurrentHoldings') ? new_value : this.state.showCurrentHoldings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                showCurrentHoldings,\n                showCash)))\n\n        if (name === 'showCash') {\n            this.onWhatifGo(this.state.balanceTargetSet, this.state.sellAllOf, this.state.balanceTargetColumn, new_value, this.state.remainingCash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        const new_whatif_format = (this.state.whatifFormat === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatifFormat', JSON.stringify(new_whatif_format))\n        this.setState({ whatifFormat: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sortColumn) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sortColumn', JSON.stringify(new_sort_column))\n        this.setState({ sortColumn: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shownColumns)).map(column => column.name)\n            column_names.forEach(function(columnName) {\n                if (!new_shown_column_names.includes(columnName)) {\n                    new_shown_column_names.push(columnName)\n                }\n            })\n            let new_shown_columns = allColumns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shownColumns', JSON.stringify(new_shown_columns))\n            return { shownColumns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(columnName) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shownColumns)).map(column => column.name)\n            if (new_shown_column_names.includes(columnName)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === columnName), 1)\n            } else {\n                new_shown_column_names.push(columnName)\n            }\n            let new_shown_columns = allColumns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shownColumns', JSON.stringify(new_shown_columns))\n            return { shownColumns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        const idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    createConsoleMessageSet(new_message) {\n        let newConsoleMessageSet = {\n            modifiedAt: new Date().getTime(),\n            summary: new_message,\n            messages: [new_message],\n            hasErrors: (new_message.toUpperCase().startsWith('ERROR:')) ? true : false\n        }\n        return newConsoleMessageSet\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tagName) {\n                all_tags_for_this_ticker.push(tagName)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.ticker !== delete_ticker)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let newConsoleMessageSet = this.createConsoleMessageSet('Ticker \"' + delete_ticker + '\" has now been deleted.')\n            newAllConsoleMessages.push(newConsoleMessageSet)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: newConsoleMessageSet.summary + ((newConsoleMessageSet.messages.hasErrors) ? ' See the \"Messages\" tab.' : ''),\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let date, action, num_shares, ticker, total\n        [date, action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { \n                modifiedAt: new Date().getTime(),\n                date: date,\n                ticker: ticker,\n                action: action,\n                shares: num_shares,\n                total: total,\n                summary: new_transaction_summary\n            }\n            newAllTransactions.push(new_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let orig_start_date, orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_start_date = newAllPositions[ticker]['start_date']\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['currentShares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let new_current_shares = (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares\n            let new_start_date\n            if (orig_start_date === undefined) {\n                new_start_date = date\n            } else {\n                new_start_date = (new Date(date) < new Date(orig_start_date)) ? date : orig_start_date\n            }\n            let updatedPosition = {\n                currentShares: new_current_shares,\n                start_date: (new_current_shares) ? new_start_date : 'n/a',\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the cash position numbers\n            orig_current_shares = (newAllPositions.hasOwnProperty('cash')) ? newAllPositions['cash'].currentShares : 0\n            new_current_shares = (action === 'buy') ? orig_current_shares - total : orig_current_shares + total\n            let updatedCashPosition = {\n                currentShares: new_current_shares,\n                symbol: 'cash',\n                basis: new_current_shares,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedCashPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onImportTransactions(fileContents) {\n\n        let imported_tickers = []\n\n        let imported_transactions = JSON.parse(JSON.stringify(fileContents.transactions))\n        imported_transactions.forEach( transaction => imported_tickers.push(transaction.ticker) )\n\n        let imported_risk = JSON.parse(JSON.stringify(fileContents.risk))\n        Object.keys(imported_risk).forEach( ticker => imported_tickers.push(ticker))\n\n        let all_stocks_of_interest = Array.from(new Set(imported_tickers))\n        this.setState(prevState => {\n\n            // update the \"untagged\" tag so that all added tickers belong to a tag\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let already_added = []\n            Object.keys(newAllTags).forEach(function(tag) {\n                newAllTags[tag].forEach(function(ticker) {\n                    if (!already_added.includes(ticker)) {\n                        already_added.push(ticker)\n                    }\n                })\n            })\n            all_stocks_of_interest.forEach( function(ticker) {\n                if (!already_added.includes(ticker) && ticker !== 'cash') {\n                    newAllTags['untagged'].push(ticker)\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // replace the stored transactions\n            localStorage.setItem('allTransactions', JSON.stringify(imported_transactions))\n\n            // replace the stored risk\n            localStorage.setItem('allRisk', JSON.stringify(imported_risk))\n\n            return\n        })\n\n        window.location.reload(false)\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let date, action, total\n        [date, action, total]  = new_cash_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { \n                modifiedAt: new Date().getTime(),\n                date: date,\n                ticker: 'cash',\n                action: action,\n                shares: total,\n                total: total,\n                summary: new_cash_transaction_summary\n            }\n            newAllTransactions.push(new_cash_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['currentShares']\n            }\n            let new_cash = (action === 'dividend' || action === 'transferIN') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                currentShares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTransaction(delete_transaction_id) {\n\n        const transaction_to_delete = this.getTransactionById(delete_transaction_id)\n        const ticker = transaction_to_delete.ticker\n\n        this.setState(prevState => {\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.modifiedAt !== delete_transaction_id)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let newConsoleMessageSet = this.createConsoleMessageSet('Transaction \"' + transaction_to_delete.summary + '\" has now been deleted.')\n            newAllConsoleMessages.push(newConsoleMessageSet)\n\n            // recalculate the position numbers\n            let remainingTransactionsForTicker = newAllTransactions.filter(transaction => transaction.ticker === ticker)\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let updatedPosition\n            if (!remainingTransactionsForTicker.length) {\n                delete newAllPositions[ticker]\n            } else {\n                if (ticker === 'cash') {\n                    updatedPosition = this.getPositionFromCashTransactions(remainingTransactionsForTicker)\n                } else {\n                    updatedPosition = this.getPositionFromSingleTickerTransactions(remainingTransactionsForTicker)\n                }\n                newAllPositions[ticker] = updatedPosition\n            }\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n\n            return { \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: newConsoleMessageSet.summary + ((newConsoleMessageSet.messages.hasErrors) ? ' See the \"Messages\" tab.' : ''),\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tagName) {\n                if (tagName !== remove_from_tag && tagName !== 'untagged' && newAllTags[tagName].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tagName)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTags(delete_tags) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = []\n            delete_tags.forEach(function(tag) {\n                tickers_losing_a_tag = tickers_losing_a_tag.concat(newAllTags[tag])\n                delete newAllTags[tag]\n            })\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tagName) {\n                if (tagName !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tagName])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker) && !newUntagged.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add console messages\n            let newAllConsoleMessages = [...prevState.allConsoleMessages]\n            let summary, newMessages = []\n            delete_tags.forEach(function(tag) {\n                newMessages.push('Tag \"' + tag + '\" has now been deleted.')\n            })\n            if (newMessages.length === 1) {\n                summary = 'Tag \"' + delete_tags[0] + '\" has now been deleted.'\n            } else {\n                summary = 'Deleted ' + delete_tags.length + ' tags.'\n            }\n            let newConsoleMessageSet = this.createConsoleMessageSet(summary)\n            if (newMessages.length > 1) {\n                newConsoleMessageSet.messages = [...newMessages]\n            }\n            newAllConsoleMessages.push(newConsoleMessageSet)\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.showCurrentHoldings,\n                    this.state.showCash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allConsoleMessages: newAllConsoleMessages,\n                last_console_message: newConsoleMessageSet.summary + ((newConsoleMessageSet.messages.hasErrors) ? ' See the \"Messages\" tab.' : ''),\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(rowName) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== rowName\n                && rowName !== this.props.editing_row\n                && !this.nameIsAnAggregate(rowName)\n                && !this.nameIsSpecial(rowName)\n            ) {\n                return { editing_row: rowName }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n                newAllRisk[ticker]['modifiedAt'] = new Date().getTime()\n            } else {\n                let newRisk = { \n                    modifiedAt: new Date().getTime(),\n                    factor: parseFloat(new_value) \n                }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewConsoleMessages(newConsoleMessageSet) {\n        this.setState(prevState => {\n            let newAllConsoleMessages = JSON.parse(JSON.stringify(prevState.allConsoleMessages))\n            newAllConsoleMessages.push(newConsoleMessageSet)\n            return { \n                last_console_message: newConsoleMessageSet.summary + ((newConsoleMessageSet.messages.hasErrors) ? ' See the \"Messages\" tab.' : ''),\n                allConsoleMessages: newAllConsoleMessages }\n        })\n    }\n\n    clearLastConsoleMessage() {\n        this.setState({ last_console_message: ' ' })\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        const now = new Date()\n        const then = new Date(date_str)\n        const days_ago = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return days_ago\n        }\n    }\n\n    currentQuoteExists(ticker) {\n        if (this.state.allCurrentQuotes.hasOwnProperty(ticker)) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    getClosingPrice(ticker, date, data) {\n        if (data.hasOwnProperty(ticker)) {\n            if (data[ticker].hasOwnProperty(date)) {\n                return data[ticker][date].adjustedClose\n            }\n        }\n        return undefined\n    }\n\n    getMostRecentClosingPrice(ticker, data) {\n        if (data.hasOwnProperty(ticker)) {\n            return data[ticker].current_price\n        }\n        return undefined\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].currentShares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].currentShares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getMaxBalanceableValue(target_set, sell_all_set, target_column) {\n        const include_cash = true\n        return this.getBalanceableValue(target_set, sell_all_set, target_column, include_cash)\n    }\n\n    getBalanceableValue(target_set, sell_all_set, target_column, include_cash) {\n\n        let self = this\n        let balanceableValue = 0\n\n        let current_cash_value = 0\n        if (include_cash && this.state.showCash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_value = self.state.allPositions['cash'].currentShares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceableValue += current_cash_value\n\n        const target_tickers = this.getTickersFromSet(target_set)\n        if ( (target_set === 'myCurrentHoldings' && this.state.showCurrentHoldings)\n            || (target_set === 'untagged' && this.state.showUntagged) \n            || (target_set !== 'myCurrentHoldings' && target_set !== 'untagged') ) {\n            target_tickers.forEach( function(ticker) {\n                let currentValue = self.state.allPositions[ticker].currentShares * self.state.allCurrentQuotes[ticker].current_price\n                if (target_column === 'currentValue' || target_column === 'valueAtRisk' || target_column === 'onlyProfits') {\n                    balanceableValue += currentValue\n                } else if (target_column === 'basis' || target_column === 'basisRisked') {\n                    if (sell_all_set.includes(ticker)) {\n                        balanceableValue += currentValue\n                    } else {\n                        balanceableValue += self.state.allPositions[ticker].basis\n                    }\n                }\n            })\n        }\n\n        return balanceableValue\n    }\n\n    onWhatifSubmit(target_set, sellAllOf, target_column, remainingCash) {\n        this.setState({ \n            remainingCash: remainingCash, \n            balanceTargetSet: target_set, \n            sellAllOf: sellAllOf,\n            balanceTargetColumn: target_column \n            })\n        let column = target_column\n        let show_whatif_columns = ['currentShares', 'whatif_current_shares']\n        if (target_column === 'onlyProfits') {\n            column = 'basis'\n        }\n        show_whatif_columns.push(column)\n        show_whatif_columns.push('whatif-'+column)\n        if (target_column === 'onlyProfits') {\n            show_whatif_columns.push('profit')\n        }\n        if (target_column.includes('risk')) {\n            show_whatif_columns.push('risk_factor')\n        }\n        this.showColumns(show_whatif_columns)\n        this.onWhatifGo(target_set, sellAllOf, target_column, this.state.showCash, remainingCash)\n    }\n\n    onWhatifGo(target_set, sell_all_set, target_column, showCash, remainingCash) {\n\n        let self = this\n        const adjusting_cash = showCash && (remainingCash !== null || target_column === 'onlyProfits')\n        const original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].currentShares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_amount_to_balance = this.getBalanceableValue(target_set, sell_all_set, target_column, adjusting_cash)\n        if (adjusting_cash) {\n            total_amount_to_balance -= remainingCash\n        }\n\n        // determine the tickers to balance across\n        const target_tickers = this.getTickersFromSet(target_set)\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balanceTargetColumn: target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        let risk_factors = {}\n        target_tickers.forEach(function(ticker) {\n            if (self.state.allRisk.hasOwnProperty(ticker)){\n                risk_factors[ticker] = self.state.allRisk[ticker].factor\n            } else {\n                risk_factors[ticker] = 0.20\n            }\n        })\n        const target = total_amount_to_balance / target_tickers.filter(ticker => !sell_all_set.includes(ticker)).length\n        target_tickers.forEach(function(ticker) {\n\n            let whatif_currentshares, whatif_balancedvalue\n            \n            new_whatif.values[ticker] = {}\n\n            let value_delta = 0\n            const original_currentvalue = self.getCurrentValue(ticker)\n            const original_basis = self.getBasis(ticker)\n\n            if (target_column === 'currentValue' || target_column === 'basis' || target_column === 'onlyProfits') {\n                if (sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['currentShares'] = 0\n                    new_whatif.values[ticker]['basis'] = 0\n                    new_whatif.values[ticker]['basisRisked'] = 0\n                    new_whatif.values[ticker]['currentValue'] = 0\n                    new_whatif.values[ticker]['valueAtRisk'] = 0\n                    if (adjusting_cash) {\n                        actual_remaining_cash += original_currentvalue \n                    }\n                    return\n                }\n            }\n\n            // balancing by value is a simple average of current values\n            if (target_column === 'currentValue') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['currentShares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['currentValue'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                let whatif_basis = original_basis + value_delta\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_basis\n                new_whatif.values[ticker]['basisRisked'] = whatif_basis * risk_factors[ticker]\n\n                new_whatif.values[ticker]['valueAtRisk'] = whatif_balancedvalue * risk_factors[ticker]\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (target_column === 'basis') {\n\n                const original_currentshares = self.getCurrentShares(ticker)\n                const target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['currentShares'] = whatif_currentshares\n\n                let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_balancedbasis < 0) {\n                    whatif_balancedbasis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                new_whatif.values[ticker]['basisRisked'] = whatif_balancedbasis * risk_factors[ticker]\n\n                value_delta = whatif_balancedbasis - original_basis\n                new_whatif.values[ticker]['currentValue'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['valueAtRisk'] = new_whatif.values[ticker]['currentValue'] * risk_factors[ticker]\n\n            } else if (target_column === 'onlyProfits') {\n\n                const original_currentshares = self.getCurrentShares(ticker)\n                const original_currentvalue = original_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                let target_delta_shares\n                const losing = (original_basis > original_currentvalue) ? true : false\n                if (losing) {\n                    whatif_currentshares = 0\n                } else {\n                    const target_delta = original_basis\n                    target_delta_shares = -1 * Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    whatif_currentshares = original_currentshares + target_delta_shares\n                }\n                new_whatif.values[ticker]['currentShares'] = whatif_currentshares\n\n                if (losing || sell_all_set.includes(ticker)) {\n                    new_whatif.values[ticker]['basis'] = 'n/a'\n                    new_whatif.values[ticker]['basisRisked'] = 'n/a'\n                    new_whatif.values[ticker]['currentValue'] = 0\n                    new_whatif.values[ticker]['valueAtRisk'] = 'n/a'\n                    value_delta = -1 * original_currentvalue\n                } else {\n                    const whatif_basis = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basisRisked'] = whatif_basis * risk_factors[ticker]\n\n                    const whatif_currentvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    value_delta = whatif_currentvalue - original_currentvalue\n                    new_whatif.values[ticker]['currentValue'] = whatif_currentvalue\n                    new_whatif.values[ticker]['valueAtRisk'] = whatif_currentvalue * risk_factors[ticker]\n                }\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n        // The above applies to risk-balancing VALUE. This results in each position currently\n        // having the same dollar value at risk right now. Similarly, in order to risk-balance \n        // by BASIS, the same formula may be used except with Btot (total basis) in the numerator.\n        // This results in each position having the same amount of sunk investment dollars at risk,\n        // it is unaffected by each position's current stock price.\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (target_column === 'valueAtRisk' || target_column === 'basisRisked') {\n\n            const target_nonzero_tickers = target_tickers.filter(ticker => !sell_all_set.includes(ticker))\n            \n            // determine the numerator\n            let numerator_product = 1\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= risk_factors[ticker]\n                }\n            })\n            let numerator = total_amount_to_balance * numerator_product\n\n            // determine the denominator\n            let denominator_terms = Array(target_nonzero_tickers.length).fill(1)\n            target_nonzero_tickers.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * risk_factors[ticker]\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue, 0 )\n\n            // determine the target value for each ticker; each will be different if their risk factors are different\n            let nonzero_targets = Array(target_nonzero_tickers.length).fill(0)\n            nonzero_targets[0] = numerator / denominator\n            target_nonzero_tickers.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    nonzero_targets[idx] = Math.round(nonzero_targets[0] * risk_factors[target_nonzero_tickers[0]] / risk_factors[ticker])\n                }\n            })\n            let targets = Array(target_tickers.length).fill(0)\n            target_nonzero_tickers.forEach(function (nonzero_ticker, nonzero_i) {\n                let i = target_tickers.indexOf(nonzero_ticker)\n                targets[i] = nonzero_targets[nonzero_i]\n            })\n\n            // for each ticker, use its target to derive the other metrics\n            target_tickers.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                const original_currentvalue = self.getCurrentValue(ticker)\n                const original_basis = self.getBasis(ticker)\n                let value_delta, target = targets[idx]\n\n                // for values, \"target\" is the target market value for this position\n                if (target_column === 'valueAtRisk') {\n\n                    const whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                    new_whatif.values[ticker]['currentShares'] = whatif_currentshares\n\n                    const whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['currentValue'] = whatif_balancedvalue\n\n                    value_delta = whatif_balancedvalue - original_currentvalue\n                    let whatif_basis = original_basis + value_delta\n                    if (whatif_basis < 0) {\n                        whatif_basis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basisRisked'] = whatif_basis * risk_factors[ticker]\n\n                    new_whatif.values[ticker]['valueAtRisk'] = whatif_balancedvalue * risk_factors[ticker]\n\n                // for bases, \"target\" is the target basis for this position\n                } else if (target_column === 'basisRisked') {\n\n                    const original_currentshares = self.getCurrentShares(ticker)\n                    const target_delta = target - original_basis\n                    let target_delta_shares\n                    if (target === 0) {\n                        new_whatif.values[ticker]['currentShares'] = 0\n                        new_whatif.values[ticker]['basis'] = 0\n                        new_whatif.values[ticker]['basisRisked'] = 0\n                        new_whatif.values[ticker]['currentValue'] = 0\n                        new_whatif.values[ticker]['valueAtRisk'] = 0\n                        value_delta = -1 * original_currentvalue\n                    } else {\n                        if (target_delta >= 0) {\n                            target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        } else {\n                            target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                        }\n                        const whatif_currentshares = original_currentshares + target_delta_shares\n                        new_whatif.values[ticker]['currentShares'] = whatif_currentshares\n\n                        let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                        if (whatif_balancedbasis < 0) {\n                            whatif_balancedbasis = 0\n                        }\n                        new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                        new_whatif.values[ticker]['basisRisked'] = whatif_balancedbasis * risk_factors[ticker]\n        \n                        value_delta = whatif_balancedbasis - original_basis\n                        new_whatif.values[ticker]['currentValue'] = original_currentvalue + value_delta\n        \n                        new_whatif.values[ticker]['valueAtRisk'] = new_whatif.values[ticker]['currentValue'] * risk_factors[ticker]\n                    }\n                }\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['currentShares'] = actual_remaining_cash\n            new_whatif.values['cash']['currentValue'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['valueAtRisk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balanceTargetColumn: new_whatif.balanceTargetColumn })\n    }\n\n    getCurrentHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['currentShares'] !== 0).map(holding => holding[0])\n    }\n\n    getPreviousHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['currentShares'] === 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let taggedTickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                taggedTickers = taggedTickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(taggedTickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    getTickersFromSet(set) {\n        let tickers = []\n        if (set === 'myCurrentHoldings') {\n            tickers = [...this.getCurrentHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (set === 'untagged') {\n            tickers = [...this.getUntagged()]\n        } else {\n            tickers = this.state.allTags[set]\n        }\n        return tickers\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.showCash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        const sortColumn = this.state.sortColumn\n        const quote_columns = ['current_price', 'change_pct', 'quote_date', 'volume', 'dollar_volume']\n        const holdings_columns = ['start_date', 'currentShares', 'currentValue', 'percentValue', 'valueAtRisk', 'basis', 'basisRisked', 'realized_gains', 'percentBasis', 'profit', 'percent_profit']\n        const performance_columns = ['shortChangePct', 'mediumChangePct', 'longChangePct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sortColumn === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sortColumn)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sortColumn === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sortColumn]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sortColumn === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sortColumn]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sortColumn)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sortColumn]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sortColumn]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sortColumn]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sortColumn]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sortColumn)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sortColumn) {\n                        case 'currentShares':\n                            value_a = 'n/a'\n                            break;\n                        case 'currentValue':\n                        case 'percentValue':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percentBasis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sortColumn === 'currentValue' || sortColumn === 'percentValue' || sortColumn === 'profit' || sortColumn === 'percent_profit' || sortColumn === 'valueAtRisk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['currentShares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if ( (sortColumn === 'profit' || sortColumn === 'percent_profit') && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sortColumn === 'valueAtRisk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['currentShares']) {\n                        if (sortColumn === 'basisRisked' && self.state.allRisk.hasOwnProperty(a)) {\n                            value_a = self.state.allPositions[a]['basis'] * self.state.allRisk[a]['factor']\n                        } else if (sortColumn === 'percentBasis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sortColumn]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sortColumn) {\n                        case 'currentShares':\n                            value_b = 'n/a'\n                            break;\n                        case 'currentValue':\n                        case 'percentValue':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percentBasis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'profit':\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sortColumn === 'currentValue' || sortColumn === 'percentValue' || sortColumn === 'profit' || sortColumn === 'percent_profit' || sortColumn === 'valueAtRisk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['currentShares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if ( (sortColumn === 'profit' || sortColumn === 'percent_profit') && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sortColumn === 'valueAtRisk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['currentShares']) {\n                        if (sortColumn === 'basisRisked' && self.state.allRisk.hasOwnProperty(b)) {\n                            value_b = self.state.allPositions[b]['basis'] * self.state.allRisk[b]['factor']\n                        } else if (sortColumn === 'percentBasis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sortColumn]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sortColumn === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : (a === 'cash') ? 0 : 0.20\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : (b === 'cash') ? 0 : 0.20\n\n            } else if (sortColumn === 'risk_factor_modified') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].modifiedAt : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].modifiedAt : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.showCurrentHoldings) {\n                tickers_to_show = [...tickers_to_show, ...this.getCurrentHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.showPreviousHoldings) {\n                tickers_to_show = [...tickers_to_show, ...this.getPreviousHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.showCash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.showTagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.showUntagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        const unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        const sortTriangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        const sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let specialClasses = []\n            if (self.tickerIsIndex(ticker)) {\n                specialClasses.push('index')\n            }\n            if (ticker === 'cash') {\n                specialClasses.push('cash')\n            }\n            row_data[ticker]['specialClasses'] = specialClasses\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['start_date'] = self.state.allPositions[ticker].start_date\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['currentShares'] = self.state.allPositions[ticker].currentShares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['start_date'] = 'n/a'\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['currentShares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        const sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['specialClasses'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['start_date'] = 'n/a'\n            new_aggr_data['currentShares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['currentValue'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        const shown_column_names = this.state.shownColumns.map(column => column.name)\n        const all_columns_namesorted = JSON.parse(JSON.stringify(allColumns)).sort(function (a,b) {\n            let value_a = a.displayName\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.displayName\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n        const all_categories = ['always', 'stock-specific', 'holdings', 'performance']\n        let all_columns_by_category = {}\n        all_categories.forEach(function(category_name) {\n            const this_category_columns = JSON.parse(JSON.stringify(all_columns_namesorted)).filter(column => column.category === category_name)\n            all_columns_by_category[category_name] = this_category_columns\n        })\n\n        const row_popover = (\n            <Popover id=\"row-popover\">\n                <Popover.Title as=\"h3\">Included Rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show current holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"showCurrentHoldings\" name=\"showCurrentHoldings\" type=\"checkbox\" checked={this.state.showCurrentHoldings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"showCurrentHoldings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show previous holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"showPreviousHoldings\" name=\"showPreviousHoldings\" type=\"checkbox\" checked={this.state.showPreviousHoldings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"showPreviousHoldings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"showTagged\" name=\"showTagged\" type=\"checkbox\" checked={this.state.showTagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"showTagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"showUntagged\" name=\"showUntagged\" type=\"checkbox\" checked={this.state.showUntagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"showUntagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"showCash\" name=\"showCash\" type=\"checkbox\" checked={this.state.showCash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"showCash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"column-popover\">\n                <Popover.Title as=\"h3\">Included Columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {Object.keys(all_columns_by_category).filter(key => key !== 'always').map(key => (\n                        <div key={key} id=\"column-category\">\n                            <div className=\"strong\">{key}</div>\n                            <ul>\n                                {all_columns_by_category[key].map(column => (\n                                    <li key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name)} className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.displayName }</li>\n                                ))}\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n\n        const general_settings_popover = (\n            <Popover id=\"general-settings-popover\">\n                <Popover.Title as=\"h3\">General Settings:</Popover.Title>\n                <Popover.Content>\n                <div id=\"general-settings-control\">\n                    <div id=\"baseline-control\">\n                        <label htmlFor=\"baseline\">performance baseline:</label>\n                        <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                            <option value=\"zeroPctGain\">0% gain</option>\n                            <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                        </select>\n                    </div>\n                    <div id=\"performance-control\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show performance only if achieved:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"show_only_achieved_performance\" name=\"show_only_achieved_performance\" type=\"checkbox\" checked={this.state.show_only_achieved_performance} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"show_only_achieved_performance\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"recency-control\">\n                        <div className=\"switch_control\">\n                            <div className=\"switch_label\">show error if quote is not from today:</div>\n                            <div className=\"switch_wrapper\">\n                                <input id=\"error_if_not_todays_quote\" name=\"error_if_not_todays_quote\" type=\"checkbox\" checked={this.state.error_if_not_todays_quote} onChange={this.onShowInputChange} />\n                                <label htmlFor=\"error_if_not_todays_quote\" className=\"switch\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const GeneralSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={general_settings_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; General</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({isAggregate, highlightColumn}) => (\n            <GridHeaderRow\n                highlightColumn={highlightColumn}\n                isAggregate={isAggregate}\n                columns={this.state.shownColumns}\n                symbolCountStr={symbol_count}\n                sortColumn={this.state.sortColumn}\n                sortTriangle={sortTriangle}\n                whatifFormat={this.state.whatifFormat}\n                onChangeSort={this.onChangeSort}\n                onChangeWhatifFormat={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.rowName}\n                isAggregate={row_data.isAggregate}\n                rowName={row_data.rowName}\n                membershipSet={row_data.membershipSet}\n                columns={row_data.columns}\n                specialClasses={row_data.specialClasses}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                quote_date={row_data.quote_date}\n                volume={row_data.volume}\n                basis={( (row_data.currentShares !== 0 && this.state.showCurrentHoldings) \n                         || (row_data.currentShares === 0 && this.state.showPreviousHoldings) ) \n                         ? row_data.basis \n                         : 'n/a'}\n                start_date={row_data.start_date}\n                currentShares={( (row_data.currentShares !== 0 && this.state.showCurrentHoldings) \n                                  || (row_data.currentShares === 0 && this.state.showPreviousHoldings) ) \n                                  ? row_data.currentShares \n                                  : 'n/a'}\n                currentValue={( (row_data.currentShares !== 0 && this.state.showCurrentHoldings) \n                                 || (row_data.currentShares === 0 && this.state.showPreviousHoldings) ) \n                                 ? row_data.currentValue \n                                 : 'n/a'}\n                realized_gains={( (row_data.currentShares !== 0 && this.state.showCurrentHoldings) \n                                  || (row_data.currentShares === 0 && this.state.showPreviousHoldings) ) \n                                  ? row_data.realized_gains \n                                  : 'n/a'}\n                risk_factor={row_data.risk_factor}\n                risk_factor_modified={row_data.risk_factor_modified}\n                performance_numbers={row_data.performance_numbers}\n                error_if_not_todays_quote={this.state.error_if_not_todays_quote}\n                show_only_achieved_performance={this.state.show_only_achieved_performance}\n                baseline={row_data.baseline}\n                style_realized_performance={row_data.style_realized_performance}\n                totalValue={( (row_data.currentShares !== 0 && this.state.showCurrentHoldings) \n                               || (row_data.currentShares === 0 && this.state.showPreviousHoldings) ) \n                               ? row_data.totalValue \n                               : 'n/a'}\n                totalBasis={( (row_data.currentShares !== 0 && this.state.showCurrentHoldings) \n                               || (row_data.currentShares === 0 && this.state.showPreviousHoldings) ) \n                               ? row_data.totalBasis \n                               : 'n/a'}\n                whatif={row_data.whatif}\n                whatifFormat={this.state.whatifFormat}\n                onChangeWhatifFormat={this.onChangeWhatifFormat}\n                onRemoveFromTag={row_data.onRemoveFromTag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                onDeleteTags={row_data.onDeleteTags}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                onEscapeKey={this.onEscapeKey}\n            />\n        )\n\n        // if an old quote exists and if this is an error, the grand total becomes an error too\n        let a_quote_is_old = false, aggr_total_value, aggr_basis \n        sorted_tickers.forEach(function(ticker) {\n            if (a_quote_is_old === false \n                && ticker !== 'cash' \n                && !self.getIndicies().includes(ticker) \n                && self.daysAgo(self.state.allCurrentQuotes[ticker].quote_date) >= 1) {\n                    a_quote_is_old = true\n            }\n        })\n        if (!a_quote_is_old || !self.state.error_if_not_todays_quote) {\n            aggr_total_value = self.state.aggrTotalValue['_everything_']\n            aggr_basis = self.state.aggrBasis['_everything_']\n        } else {\n            aggr_total_value = 'err.'\n            aggr_basis = self.state.aggrBasis['_everything_']\n        }\n\n        let error_performance_numbers = {\n            shortChangePct: 'err.',\n            mediumChangePct: 'err.',\n            longChangePct: 'err.'\n        }\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            const quote_exists = self.currentQuoteExists(ticker)\n            const performance_numbers_exist = self.state.allPerformanceNumbers.hasOwnProperty(ticker)\n            let new_row = {}\n            new_row['isAggregate'] = false\n            new_row['rowName'] = ticker\n            new_row['membershipSet'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shownColumns\n            new_row['specialClasses'] = row_data[ticker]['specialClasses']\n            new_row['current_price'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].current_price : 'err.'\n            new_row['change_pct'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].change_pct : 'err.'\n            new_row['quote_date'] = (!quote_exists) ? 'err.' : (ticker !== 'cash' && !self.getIndicies().includes(ticker)) ? self.state.allCurrentQuotes[ticker].quote_date : 'n/a'\n            new_row['volume'] = (quote_exists) ? self.state.allCurrentQuotes[ticker].volume : 'err.'\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['start_date'] = row_data[ticker]['start_date']\n            new_row['currentShares'] = row_data[ticker]['currentShares']\n            new_row['currentValue'] = (new_row.current_price === 'n/a' || new_row.currentShares === 'n/a') ? 'n/a' : new_row.current_price * new_row.currentShares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].factor : null\n            new_row['risk_factor_modified'] = (self.state.allRisk.hasOwnProperty(ticker)) ? self.state.allRisk[ticker].modifiedAt : null\n            new_row['performance_numbers'] = (performance_numbers_exist) ? self.state.allPerformanceNumbers[ticker] : error_performance_numbers\n            new_row['baseline'] = self.state.baseline\n            new_row['style_realized_performance'] = (Object.entries(self.state.allPositions).filter(position => position[0] !== 'cash' && position[1].currentShares).length) ? true : false\n            new_row['totalValue'] = aggr_total_value\n            new_row['totalBasis'] = aggr_basis\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['onRemoveFromTag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['onDeleteTags'] = self.onDeleteTags\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n                // if an old quote exists within this aggregate and if this is an error, the aggregate total becomes an error too\n                let quote_date\n                for (let ticker of self.state.allTags[aggr_ticker]) {\n                    const quote_exists = (self.currentQuoteExists(ticker)) ? true : false\n                    quote_date = (quote_exists) ? self.state.allCurrentQuotes[ticker].quote_date : 'err.'\n                    if (self.daysAgo(quote_date) >= 1) {\n                        break\n                    }\n                }\n\n                let new_row = {}\n                new_row['isAggregate'] = true\n                new_row['rowName'] = aggr_ticker\n                new_row['membershipSet'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shownColumns\n                new_row['specialClasses'] = aggr_row_data[aggr_ticker]['specialClasses']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['quote_date'] = quote_date\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['start_date'] = aggr_row_data[aggr_ticker]['start_date']\n                new_row['currentShares'] = aggr_row_data[aggr_ticker]['currentShares']\n                new_row['currentValue'] = aggr_row_data[aggr_ticker]['currentValue']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['risk_factor_modified'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['style_realized_performance'] = false\n                new_row['totalValue'] = self.state.aggrTotalValue[aggr_ticker]\n                new_row['totalBasis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['onRemoveFromTag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['onDeleteTags'] = self.onDeleteTags\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        const symbol_count = this.populateSymbolCount(sorted_tickers.length) \n        const all_ticker_rows = all_row_data.filter(row_data => !row_data.isAggregate)\n        const all_aggregate_rows = all_row_data.filter(row_data => row_data.isAggregate)\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"left-side\">\n                        <div id=\"input-controls\">\n                            <InputForms\n                                allStocks={this.state.allStocks}\n                                allTags={this.state.allTags}\n                                allCurrentQuotes={this.state.allCurrentQuotes}\n                                allMonthlyQuotes={this.state.allMonthlyQuotes}\n                                allMonthEndDates={this.state.allMonthEndDates}\n                                allPositions={this.state.allPositions}\n                                allTransactions={this.state.allTransactions}\n                                allRisk={this.state.allRisk}\n                                showCurrentHoldings={this.state.showCurrentHoldings}\n                                showPreviousHoldings={this.state.showPreviousHoldings}\n                                showTagged={this.state.showTagged}\n                                showUntagged={this.state.showUntagged}\n                                showCash={this.state.showCash}\n                                baselineName={this.state.baseline.name}\n                                getBalanceableValue={this.getMaxBalanceableValue}\n                                onNewTickers={this.onNewTickers}\n                                onNewTags={this.onNewTags}\n                                onDeleteTags={this.onDeleteTags}\n                                onDeleteTransaction={this.onDeleteTransaction}\n                                onNewTransaction={this.onNewTransaction}\n                                onImportTransactions={this.onImportTransactions}\n                                onNewCash={this.onNewCash}\n                                createConsoleMessageSet={this.createConsoleMessageSet}\n                                clearLastConsoleMessage={this.clearLastConsoleMessage}\n                                allConsoleMessages={this.state.allConsoleMessages}\n                                onNewConsoleMessages={this.onNewConsoleMessages}\n                                onWhatifSubmit={this.onWhatifSubmit}\n                            />\n                        </div>\n                        <div id=\"last-console-message\">\n                            {this.state.last_console_message && this.state.last_console_message.length ? (\n                            <div className={ (this.state.last_console_message.startsWith('ERROR')) ? 'warning' : ''}>{this.state.last_console_message}</div>\n                            ) : null }\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"page-settings\">\n                            <GeneralSettings />\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow isAggregate={false} highlightColumn={this.state.balanceTargetColumn} />\n                        <PopulateHeaderRow isAggregate={false} highlightColumn={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.isAggregate).map(row_data => (\n                            <PopulateRow key={row_data.rowName} row_data={row_data} />\n                        ))}\n                        {this.state.done && all_ticker_rows.length ? (\n                        <GridRowTotals\n                            columns={this.state.shownColumns}\n                            totalValue={aggr_total_value}\n                            totalBasis={aggr_basis}\n                            totalPerformance={this.state.aggrPerformance['_everything_']}\n                        />\n                        ) : (\n                            <tr>\n                                <td className=\"no_table_data\" colSpan={this.state.shownColumns.length+1}>No stocks have been added yet. Please add them using the form on the \"Tickers\" tab.</td>\n                            </tr>\n                        ) }\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow isAggregate={true} highlightColumn={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_aggregate_rows.filter(row => row.name !== 'untagged').length ? all_row_data.filter(row_data => row_data.isAggregate).map(row_data => (\n                                <PopulateRow key={row_data.rowName} row_data={row_data} />\n                            )) : (\n                                <tr>\n                                    <td className=\"no_table_data\" colSpan={this.state.shownColumns.length+1}>No tags exist yet. Please create them using the form on the \"Tags\" tab.</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}