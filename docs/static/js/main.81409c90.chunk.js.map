{"version":3,"sources":["components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/AddCash.js","components/DeleteTag.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridRow","props","state","hover","toggleHover","bind","populateMemberButton","populateDeleteButton","populateCellValue","styleCell","numberWithCommas","this","setState","symbol","is_aggr","is_aggregate","row_name","key","className","onClick","e","on_remove_from_tag","disabled","special_classes","includes","membership_set","column_name","classes","on_delete_tag","isNaN","current_shares","on_delete_ticker","change_pct","performance","performance_numbers","baseline","short_change_pct","medium_change_pct","long_change_pct","column","num_decimals","value","baseline_value","current_value","percent_value","percent_profit","prefix","suffix","adjust_decimal","performance_value","total_value","current_price","basis","realized_gains","type","name","volume","length","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","x","replace","row_classes","forEach","special_class","member_count","self","map","columns","onMouseEnter","onMouseLeave","React","Component","defaultProps","GridRowTotals","styleTotalsCell","populateTotalsCellValue","AddTicker","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","handleSubmit","validateTickers","event","target","preventDefault","user_tag","user_tickers","String","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","ticker","all_stocks","all_tags","push","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","id","onSubmit","onReset","onChange","placeholder","required","sort","filter","tag_name","AddTag","user_tags_string","handleChange","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction","validateTransaction","new_value","user_transaction","action","num_shares","parseInt","total","parseFloat","valid_transaction","on_new_transaction","size","AddCash","user_action","user_cash_amount","handleCashChange","handleActionChange","on_new_cash","DeleteTag","delete_tag","InputForms","all_columns","display_name","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","status_messages","allPerformanceNumbers","show_index","show_holdings","show_cash","show_tagged","show_untagged","sort_column","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getPositionFromTransactions","getPositionFromCashTransactions","populateSymbolCount","onInputChange","onShowInputChange","onChangeSort","onToggleShowColumn","onNewTransaction","onNewCash","onNewMessages","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","getIndicies","getHoldings","getTagged","getUntagged","stored_baseline","JSON","parse","localStorage","getItem","assign","short_pct_gain","medium_pct_gain","long_pct_gain","stored_sort_column","stored_sort_dir_asc","stored_allTags","stored_allTransactions","control","stored_control","indexed_transaction_data","stringify","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","monthly_prices","entries","price","now","prev_short","prev_medium","prev_long","setItem","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","init_shown_columns","stored_shown_columns","transactions","inflows","outflows","substr","cash_transactions","cash_transaction","cash_amount","new_baseline_name","new_baseline","checked","new_sort_column","prevState","new_shown_column_names","splice","findIndex","new_shown_columns","idx","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newStatusMessages","new_transaction","orig_basis","orig_current_shares","orig_realized_gains","updatedPosition","new_cash_transaction","new_cash","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","new_messages","reverse","holding","grid_rows","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_stocks_of_interest","values","array_of_tickers","aggr_performance_by_tag","num_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","tickers_to_show","unique_tickers_to_show","quote_columns","holdings_columns","performance_columns","sort_triangle","fromCharCode","sorted_tickers","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","row_data","tag_membership","tag_info","aggr_tickers","untagged","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","message","i","startsWith","htmlFor","cellSpacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81409c90.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n        this.toggleHover = this.toggleHover.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    toggleHover() {\n        this.setState({ hover: !this.state.hover })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hover) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n        if ( this.state.hover \n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating values \"current_value\", \"percent_value\", and \"percent_profit\"\n    populateCellValue(column) {\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        let current_shares = this.props.current_shares\n        const current_price = this.props.current_price\n        let basis = this.props.basis\n        let realized_gains = this.props.realized_gains\n\n        let current_value, percent_value, percent_profit\n        if (isNaN(current_shares) || current_shares === 0) {\n            current_shares = 'n/a'\n            basis = 'n/a'\n            realized_gains = 'n/a'\n            current_value = 'n/a'\n            percent_value = 'n/a'\n            percent_profit = 'n/a'\n        } else {\n            // calculate current_value\n            current_value = (current_shares) ? current_price * current_shares : 'n/a'\n\n            // calculate percent_value\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n\n            // calculate percent_profit\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    value = value - baseline_value\n                }\n                if (value.toString().indexOf('.'))\n                value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n            }\n            return value = prefix + this.numberWithCommas(value) + suffix\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHover} onMouseLeave={self.toggleHover}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    baseline: PropTypes.object,\n    total_value: PropTypes.number,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100.0%' : 'n/a'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.user_tickers_string===''} />\n                        <input type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_status_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.user_tags_string===''} />\n                        <input type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleReset(event) {\n        this.setState({ \n            transaction: ''\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push('ERROR: Transaction \"' + transaction + '\" must be 4 terms.')\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction = action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n                this.props.on_new_transaction(valid_transaction)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"30\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.transaction===''} />\n                        <input type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddCash extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_action = this.state.user_action\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.')\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction = user_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n            this.props.on_new_cash(valid_transaction)\n            this.handleReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" placeholder=\"$500.99\" disabled={this.state.user_cash_amount===''} />\n                        <input type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddCash.propTypes = {\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push('Tag \"' + user_tag + '\" has now been deleted.')\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { AddCash } from './AddCash'\nimport { DeleteTag } from './DeleteTag'\n\n\nexport class InputForms extends React.Component {\n\n    render() {\n        return (\n            <section>\n                <AddTicker\n                    all_stocks={this.props.all_stocks}\n                    all_tags={this.props.all_tags}\n                    on_new_tickers={this.props.on_new_tickers}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddTag\n                    all_tags={this.props.all_tags}\n                    on_new_tags={this.props.on_new_tags}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <DeleteTag\n                    all_tags={this.props.all_tags}\n                    on_delete_tag={this.props.on_delete_tag}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddTransaction\n                    all_stocks={this.props.all_stocks}\n                    all_tags={this.props.all_tags}\n                    on_new_transaction={this.props.on_new_transaction}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddCash\n                    on_new_cash={this.props.on_new_cash}\n                    on_new_messages={this.props.on_new_messages}\n                />\n            </section>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n}","import React from 'react'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2\n    },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2\n    // },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_value', 'percent_value', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: {},\n            allTags: {\n                'untagged': []\n            },\n            status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            allPerformanceNumbers: {},\n            show_index: false,\n            show_holdings: true,\n            show_cash: false,\n            show_tagged: true,\n            show_untagged: true,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getPositionFromTransactions = this.getPositionFromTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n    }\n\n    componentDidMount() {\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n        }\n\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n        }\n\n        let self = this\n\n        const view_controls = ['show_index', 'show_holdings', 'show_cash', 'show_tagged', 'show_untagged']\n        view_controls.forEach(function(control) {\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_transaction_data = {}\n        if (stored_allTransactions !== null) {\n            indexed_transaction_data = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition = self.getPositionFromTransactions(indexed_transaction_data[ticker])\n                newPosition['symbol'] = ticker\n                newPositions[ticker] = newPosition\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        if (indexed_transaction_data.hasOwnProperty('cash')) {\n            let newPosition = {}\n            newPosition = self.getPositionFromCashTransactions(indexed_transaction_data['cash'])\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getPositionFromTransactions(transactions) {\n        let inflows = 0, outflows = 0, current_shares = 0, action, num_shares, ticker, value\n\n        transactions.forEach(function(transaction) {\n            [action, num_shares, ticker, value] = transaction.split(' ')\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [action, value] = cash_transaction.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n        localStorage.setItem(name, JSON.stringify(new_value))\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tags\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            delete newAllTransactions[delete_ticker]\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            return { allTags: newAllTags, allPositions: newAllPositions, allTransactions: newAllTransactions, status_messages: newStatusMessages }\n        })\n    }\n\n    onNewTransaction(new_transaction) {\n        let action, num_shares, ticker, total\n        [action, num_shares, ticker, total]  = new_transaction.split(' ')\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty(ticker) && newAllTransactions[ticker] !== null) {\n                newAllTransactions[ticker] = newAllTransactions[ticker].concat([new_transaction])\n            } else {\n                newAllTransactions[ticker] = [new_transaction]\n            }\n\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n\n            newAllPositions[ticker] = updatedPosition\n\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n            return { allTransactions: newAllTransactions, allPositions: newAllPositions }\n        })\n        this.onNewTickers('untagged', [ticker])\n    }\n\n    onNewCash(new_cash_transaction) {\n        let action, total\n        [action, total]  = new_cash_transaction.split(' ')\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty('cash') && newAllTransactions['cash'] !== null) {\n                newAllTransactions['cash'] = newAllTransactions['cash'].concat([new_cash_transaction])\n            } else {\n                newAllTransactions['cash'] = [new_cash_transaction]\n            }\n\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n\n            newAllPositions['cash'] = updatedPosition\n\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n            return { allTransactions: newAllTransactions, allPositions: newAllPositions }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Tag \"' + delete_tag + '\" has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags, status_messages: newStatusMessages }\n        })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newStatusMessages = [...prevState.status_messages]\n            newStatusMessages = [...new_messages.reverse(), ...newStatusMessages]\n            return { status_messages: newStatusMessages }\n        })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return\n        }\n    }\n\n    render() {\n\n        let self = this\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 0 \n            aggr_totalbasis_by_tag[tag] = 0 \n            aggr_totalvalue_by_tag[tag] = 0 \n        })\n        Object.entries(this.state.allPositions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = self.state.allCurrentQuotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && self.state.show_holdings) || (ticker === 'cash' && self.state.show_cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(self.state.allTags).forEach(function(tag) {\n                    if (self.state.allTags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(this.state.allTags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n        if (this.state.done) {\n            all_stocks_of_interest.forEach(function(ticker) {\n\n                let short = self.state.allPerformanceNumbers[ticker]['short_change_pct']\n                let medium = self.state.allPerformanceNumbers[ticker]['medium_change_pct']\n                let long = self.state.allPerformanceNumbers[ticker]['long_change_pct']\n\n                aggr_performance_by_tag['_everything_'].short_change_pct += short\n                aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n                aggr_performance_by_tag['_everything_'].long_change_pct += long\n                aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n                Object.keys(self.state.allTags).forEach(function(tag) {\n                    if (aggr_performance_by_tag.hasOwnProperty(tag) && self.state.allTags[tag].includes(ticker)) {\n                        aggr_performance_by_tag[tag].short_change_pct += short\n                        aggr_performance_by_tag[tag].medium_change_pct += medium\n                        aggr_performance_by_tag[tag].long_change_pct += long\n                        aggr_performance_by_tag[tag].num_tickers += 1\n                    } else if (self.state.allTags[tag].includes(ticker)) {\n                        let new_aggr_performance = {}\n                        new_aggr_performance['short_change_pct'] = short\n                        new_aggr_performance['medium_change_pct'] = medium\n                        new_aggr_performance['long_change_pct'] = long\n                        new_aggr_performance['num_tickers'] = 1\n                        aggr_performance_by_tag[tag] = new_aggr_performance\n                    }\n                })\n            })\n        }\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_column = self.state.sort_column\n        let quote_columns = ['symbol', 'current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = unique_tickers_to_show.sort(function(a, b) {\n            let value_a, value_b\n            if (quote_columns.includes(sort_column)) {\n                if (self.state.allCurrentQuotes.hasOwnProperty(a) && self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else if (sort_column === 'symbol') {\n                        value_a = self.state.allCurrentQuotes[a][sort_column].toUpperCase()\n                        value_b = self.state.allCurrentQuotes[b][sort_column].toUpperCase()\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                } \n            } else if (performance_columns.includes(sort_column)) {\n                if (self.state.allMonthlyQuotes.hasOwnProperty(a) || a === 'cash') {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                }\n                if (self.state.allMonthlyQuotes.hasOwnProperty(b) || b === 'cash') {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                }\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b\n                if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit') {\n                                let basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares'] || sort_column === 'realized_gains') {\n                        value_a = self.state.allPositions[a][sort_column]\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                let basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares'] || sort_column === 'realized_gains') {\n                        value_b = self.state.allPositions[b][sort_column]\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return -1\n                }\n                if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return 1\n                }\n                if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n        })\n\n        let aggr_tickers = Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length))\n        let aggr_row_data = {}\n        aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = []\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['current_shares'] = aggr_totalvalue_by_tag[aggr_ticker]\n            new_aggr_data['current_price'] = 1\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = aggr_totalbasis_by_tag[aggr_ticker]\n            new_aggr_data['realized_gains'] = aggr_totalrealized_by_tag[aggr_ticker]\n            new_aggr_data['performance'] = aggr_performance_by_tag[aggr_ticker]\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"input-controls\">\n                        <div id=\"input-forms\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_new_transaction={this.onNewTransaction}\n                                on_new_cash={this.onNewCash}\n                                on_new_messages={this.onNewMessages}\n                            />\n                        </div>\n                        <div id=\"status-messages-wrapper\">\n                            { this.state.status_messages.length ? 'History:' : '' }\n                            <div id=\"status-messages\">\n                            { this.state.status_messages\n                                .map(\n                                    (message, i) => {\n                                        return (message.toLowerCase().startsWith(\"error\"))\n                                        ? <p key={i} className=\"message error\">{message}</p>\n                                        : <p key={i} className=\"message\">{message}</p>\n                                    }\n                                )\n                            }\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <form>\n                            <div className=\"switch_controls\">\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show holdings:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show tagged:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show untagged:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show index:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show cash:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </form>\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n                        <div id=\"column-control\">\n                            {all_columns_namesorted.map(column => (\n                                <span key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name) } className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</span>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Tags</th>\n                            {this.state.shown_columns.map(column => (\n                            <th key={ column.name } onClick={ (e)=>this.onChangeSort(column.name) }>{ column.name === 'symbol' ? 'Ticker' : column.display_name }{ column.name === 'symbol' ? this.populateSymbolCount(sorted_tickers.length) : ''}{ sort_column === column.name ? sort_triangle : '' }</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && sorted_tickers.map(ticker => (\n                            <GridRow \n                                key={ticker}\n                                is_aggregate={false}\n                                row_name={ticker}\n                                membership_set={row_data[ticker]['tags']}\n                                columns={this.state.shown_columns}\n                                special_classes={row_data[ticker]['special_classes']}\n                                current_price={this.state.allCurrentQuotes[ticker].current_price}\n                                change_pct={this.state.allCurrentQuotes[ticker].change_pct}\n                                volume={this.state.allCurrentQuotes[ticker].volume}\n                                basis={row_data[ticker]['basis']}\n                                current_shares={row_data[ticker]['current_shares']}\n                                realized_gains={row_data[ticker]['realized_gains']}\n                                performance_numbers={this.state.allPerformanceNumbers[ticker]}\n                                baseline={this.state.baseline}\n                                total_value = {aggr_totalvalue_by_tag['_everything_']}\n                                on_remove_from_tag={this.onRemoveFromTag}\n                                on_delete_ticker={this.onDeleteTicker}\n                            />\n                        ))}\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={aggr_totalvalue_by_tag['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Tickers</th>\n                            {this.state.shown_columns.map(column => (\n                            <th key={ column.name }>{ column.name === 'symbol' ? 'Tag' : column.display_name }</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && aggr_tickers.map(aggr_ticker => (\n                            <GridRow \n                                key={aggr_ticker}\n                                is_aggregate={true}\n                                row_name={aggr_ticker}\n                                membership_set={this.state.allTags[aggr_ticker]}\n                                columns={this.state.shown_columns}\n                                special_classes={aggr_row_data[aggr_ticker]['special_classes']}\n                                current_price={aggr_row_data[aggr_ticker]['current_price']}\n                                change_pct={aggr_row_data[aggr_ticker]['change_pct']}\n                                volume={aggr_row_data[aggr_ticker]['volume']}\n                                basis={aggr_totalbasis_by_tag[aggr_ticker]}\n                                current_shares={aggr_row_data[aggr_ticker]['current_shares']}\n                                realized_gains={aggr_row_data[aggr_ticker]['realized_gains']}\n                                performance_numbers={aggr_row_data[aggr_ticker]['performance']}\n                                baseline={this.state.baseline}\n                                total_value = {aggr_totalvalue_by_tag['_everything_']}\n                                on_remove_from_tag={this.onRemoveFromTag}\n                                on_delete_tag={this.onDeleteTag}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}