{"version":3,"sources":["components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/AddCash.js","components/DeleteTag.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridRow","props","populateButton","bind","column","variable_name","this","special_classes","includes","onClick","e","on_delete_ticker","symbol","on_remove_from_tag","current_shares","current_price","change_pct","basis","realized_gains","volume","performance","performance_numbers","baseline","styleCell","classes","short_change_pct","medium_change_pct","long_change_pct","isNaN","current_value","percent_value","percent_profit","row_classes","forEach","special_class","total_value","className","tags","map","tag_name","key","length","columns","num_decimals","value","baseline_value","prefix","suffix","adjust_decimal","performance_value","variable_type","hasOwnProperty","Math","pow","scaling_power","name","toString","indexOf","round","toFixed","replace","populateCellValue","React","Component","defaultProps","GridRowTotals","styleTotalsCell","populateTotalsCellValue","AddTicker","state","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","handleSubmit","validateTickers","event","setState","target","preventDefault","user_tag","user_tickers","String","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","self","ticker","all_stocks","all_tags","push","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","id","onSubmit","onReset","onChange","placeholder","required","sort","filter","type","disabled","AddTag","user_tags_string","handleChange","validateTags","user_tags","toLowerCase","tags_to_add","on_new_tags","AddTransaction","transaction","validateTransaction","new_value","user_transaction","action","num_shares","parseInt","total","parseFloat","valid_transaction","on_new_transaction","size","AddCash","user_action","user_cash_amount","handleCashChange","handleActionChange","on_new_cash","DeleteTag","delete_tag","on_delete_tag","InputForms","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","status_messages","allPerformanceNumbers","show_index","show_holdings","show_cash","show_tagged","show_untagged","sort_column","sort_dir_asc","done","tickerIsIndex","convertNameForIndicies","getPositionFromTransactions","getPositionFromCashTransactions","onInputChange","onShowInputChange","onChangeSort","onNewTransaction","onNewCash","onNewMessages","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","getIndicies","getHoldings","getTagged","getUntagged","stored_baseline","JSON","parse","localStorage","getItem","assign","short_pct_gain","medium_pct_gain","long_pct_gain","stored_sort_column","stored_sort_dir_asc","stored_allTags","stored_allTransactions","control","stored_control","indexed_transaction_data","stringify","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","monthly_prices","entries","price","now","prev_short","prev_medium","prev_long","setItem","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","change","transactions","inflows","outflows","substr","cash_transactions","cash_transaction","cash_amount","new_baseline_name","new_baseline","checked","new_sort_column","prevState","idx","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newStatusMessages","new_transaction","orig_basis","orig_current_shares","orig_realized_gains","updatedPosition","new_cash_transaction","new_cash","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","new_messages","reverse","holding","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","console","log","ticker_shares","ticker_price","all_stocks_of_interest","values","array_of_tickers","aggr_performance_by_tag","num_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","tickers_to_show","unique_tickers_to_show","quote_columns","holdings_columns","performance_columns","sort_triangle","fromCharCode","sorted_tickers","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","all_columns","display_name","passthrough_strings","display_columns","column_variable","row_data","tag_membership","tag_info","aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","message","i","startsWith","htmlFor","cellSpacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bca824a5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.populateButton = this.populateButton.bind(this)\n    }\n\n    populateButton(column) {\n        if (column.variable_name === 'symbol' && !this.props.special_classes.includes('index')) {\n            return (\n                <button onClick={ (e) => {this.props.on_delete_ticker(e, this.props.symbol)}}>x</button>\n            )\n        } else {\n            return\n        }\n    }\n\n    render() {\n        const symbol = this.props.symbol\n        const on_remove_from_tag = this.props.on_remove_from_tag\n        let current_shares = this.props.current_shares\n        const current_price = this.props.current_price\n        const change_pct = this.props.change_pct\n        let basis = this.props.basis\n        let realized_gains = this.props.realized_gains\n        const volume = this.props.volume\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n        if (isNaN(current_shares) || current_shares === 0) {\n            current_shares = 'n/a'\n            basis = 'n/a'\n            realized_gains = 'n/a'\n        }\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateCellValue(column) {\n            let prefix = ''\n            let suffix = ''\n            let adjust_decimal = false\n            let num_decimals\n            let value, baseline_value\n            let performance_value = false\n            switch (column.variable_type) {\n                case 'number':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    break\n                case 'currency':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    prefix = '$'\n                    break\n                case 'percentage':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    suffix = '%'\n                    break\n                default:\n                    break\n            }\n            switch (column.variable_name) {\n                case 'symbol':\n                    value = symbol\n                    break\n                case 'current_shares':\n                    value = current_shares\n                    break\n                case 'current_price':\n                    value = current_price\n                    break\n                case 'current_value':\n                    value = current_value\n                    break\n                case 'percent_value':\n                    value = percent_value\n                    break\n                case 'basis':\n                    value = basis\n                    break\n                case 'percent_profit':\n                    value = percent_profit\n                    break\n                case 'realized_gains':\n                    value = realized_gains\n                    break\n                case 'change_pct':\n                    value = change_pct\n                    break\n                case 'volume':\n                    value = volume\n                    break\n                case 'dollar_volume':\n                    value = current_price * volume\n                    break\n                case 'short_change_pct':\n                    value = performance.short_change_pct\n                    performance_value = true\n                    baseline_value = baseline.short_change_pct\n                    break\n                case 'medium_change_pct':\n                    value = performance.medium_change_pct\n                    performance_value = true\n                    baseline_value = baseline.medium_change_pct\n                    break\n                case 'long_change_pct':\n                    value = performance.long_change_pct\n                    performance_value = true\n                    baseline_value = baseline.long_change_pct\n                    break\n                default:\n                    break\n            }\n\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else if (column.variable_type === 'string') {\n                return value\n            } else if (!isNaN(value)) {\n                if (adjust_decimal) {\n                    if (column.hasOwnProperty('scaling_power')) {\n                        value *= Math.pow(10, column.scaling_power)\n                    }\n                    if (performance_value && baseline.name !== 'zero_pct_gain') {\n                        value = value - baseline_value\n                    }\n                    if (value.toString().indexOf('.'))\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n                return value = prefix + numberWithCommas(value) + suffix\n            } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n                return value\n            } else if (column.variable_type === 'number' || column.variable_type === 'percentage' || column.variable_type === 'currency') {\n                return '-'\n            } else {\n                return '??'\n            }\n        }\n\n        function styleCell(column) {\n            let classes = 'position-cell'\n            switch (column) {\n                case 'change_pct':\n                    if (change_pct > 0) {\n                        classes += ' text-green'\n                    } else if (change_pct < 0) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'short_change_pct':\n                    if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'medium_change_pct':\n                    if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'long_change_pct':\n                    if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                        classes += ' text-green'\n                    } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                        classes += ' text-red'\n                    }\n                    break\n                default:\n                    break\n            }\n            return classes\n        }\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n        })\n\n        let current_value, percent_value, percent_profit\n        if (isNaN(current_shares)) {\n            current_value = 'n/a'\n            percent_value = 'n/a'\n            percent_profit = 'n/a'\n        } else {\n            current_value = (current_shares) ? current_price * current_shares : 'n/a'\n            if (isNaN(this.props.total_value) || this.props.total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / this.props.total_value * 100 : 'n/a'\n            }\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis === current_value) {\n                percent_profit = 0\n            } else if (current_value > basis) {\n                percent_profit = (1 - basis / current_value) * 100\n            }\n        }\n\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { this.props.tags.map( tag_name => tag_name !== 'untagged' && (\n                        <button key={tag_name} onClick={ (e) => {on_remove_from_tag(e, tag_name, symbol)}}>\n                            {tag_name}\n                        </button>\n                    ))}\n                    { (!this.props.tags.length || this.props.tags[0] === 'untagged') ? '-' : '' }\n                </td>\n                { this.props.columns.map(column => (\n                <td key={column.variable_name} className={ styleCell(column.variable_name) }>{ populateCellValue(column) }{ this.populateButton(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    columns: PropTypes.array,\n    symbol: PropTypes.string,\n    tags: PropTypes.array,\n    special_classes: PropTypes.array,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    baseline: PropTypes.object,\n    total_value: PropTypes.number,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.variable_name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100.0%' : 'n/a'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.variable_name} className={ styleTotalsCell(column.variable_name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: Ticker ' + ticker + ' does not exist.')\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added.')\n                } else {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".')\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push('ERROR: Ticker ' + ticker + ' has already been added to another named tag.')\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added.')\n                    } else {\n                        new_status_messages.push('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".')\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.user_tickers_string===''} />\n                        <input type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push('ERROR: Tag \"' + tag + '\" has already been created.')\n            } else {\n                new_status_messages.push('Tag \"' + tag + '\" has now been created.')\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.user_tags_string===''} />\n                        <input type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleReset(event) {\n        this.setState({ \n            transaction: ''\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push('ERROR: Transaction \"' + transaction + '\" must be 4 terms.')\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".')\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.')\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push('ERROR: Ticker \"' + transaction[2] + '\" does not exist.')\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.')\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push('Ticker ' + transaction[2].toUpperCase() + ' has now been added.')\n                }\n\n                let valid_transaction = action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n                this.props.on_new_transaction(valid_transaction)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"30\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" disabled={this.state.transaction===''} />\n                        <input type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddCash extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_action = this.state.user_action\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.')\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction = user_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push('Transaction \"' + valid_transaction + '\" has now been recorded.')\n            this.props.on_new_cash(valid_transaction)\n            this.handleReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" placeholder=\"$500.99\" disabled={this.state.user_cash_amount===''} />\n                        <input type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddCash.propTypes = {\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push('Tag \"' + user_tag + '\" has now been deleted.')\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { AddCash } from './AddCash'\nimport { DeleteTag } from './DeleteTag'\n\n\nexport class InputForms extends React.Component {\n\n    render() {\n        return (\n            <section>\n                <AddTicker\n                    all_stocks={this.props.all_stocks}\n                    all_tags={this.props.all_tags}\n                    on_new_tickers={this.props.on_new_tickers}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddTag\n                    all_tags={this.props.all_tags}\n                    on_new_tags={this.props.on_new_tags}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <DeleteTag\n                    all_tags={this.props.all_tags}\n                    on_delete_tag={this.props.on_delete_tag}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddTransaction\n                    all_stocks={this.props.all_stocks}\n                    all_tags={this.props.all_tags}\n                    on_new_transaction={this.props.on_new_transaction}\n                    on_new_messages={this.props.on_new_messages}\n                />\n                <AddCash\n                    on_new_cash={this.props.on_new_cash}\n                    on_new_messages={this.props.on_new_messages}\n                />\n            </section>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n}","import React from 'react'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\n\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: {},\n            allTags: {\n                'untagged': []\n            },\n            status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            allPerformanceNumbers: {},\n            show_index: false,\n            show_holdings: true,\n            show_cash: false,\n            show_tagged: true,\n            show_untagged: true,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getPositionFromTransactions = this.getPositionFromTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n    }\n\n    componentDidMount() {\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n        }\n\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n        }\n\n        let self = this\n\n        const view_controls = ['show_index', 'show_holdings', 'show_cash', 'show_tagged', 'show_untagged']\n        view_controls.forEach(function(control) {\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_transaction_data = {}\n        if (stored_allTransactions !== null) {\n            indexed_transaction_data = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition = self.getPositionFromTransactions(indexed_transaction_data[ticker])\n                newPosition['symbol'] = ticker\n                newPositions[ticker] = newPosition\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        if (indexed_transaction_data.hasOwnProperty('cash')) {\n            let newPosition = {}\n            newPosition = self.getPositionFromCashTransactions(indexed_transaction_data['cash'])\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getPositionFromTransactions(transactions) {\n        let inflows = 0, outflows = 0, current_shares = 0, action, num_shares, ticker, value\n\n        transactions.forEach(function(transaction) {\n            [action, num_shares, ticker, value] = transaction.split(' ')\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [action, value] = cash_transaction.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n        localStorage.setItem(name, JSON.stringify(new_value))\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onDeleteTicker(event, delete_ticker) {\n        this.setState(prevState => {\n\n            // update tags\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            delete newAllTransactions[delete_ticker]\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newStatusMessages = [...prevState.status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            newStatusMessages = [...new_message, ...newStatusMessages]\n\n            return { allTags: newAllTags, allPositions: newAllPositions, allTransactions: newAllTransactions, status_messages: newStatusMessages }\n        })\n    }\n\n    onNewTransaction(new_transaction) {\n        let action, num_shares, ticker, total\n        [action, num_shares, ticker, total]  = new_transaction.split(' ')\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty(ticker) && newAllTransactions[ticker] !== null) {\n                newAllTransactions[ticker] = newAllTransactions[ticker].concat([new_transaction])\n            } else {\n                newAllTransactions[ticker] = [new_transaction]\n            }\n\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let updatedPosition = {\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                current_shares: (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n\n            newAllPositions[ticker] = updatedPosition\n\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n            return { allTransactions: newAllTransactions, allPositions: newAllPositions }\n        })\n        this.onNewTickers('untagged', [ticker])\n    }\n\n    onNewCash(new_cash_transaction) {\n        let action, total\n        [action, total]  = new_cash_transaction.split(' ')\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            if (newAllTransactions.hasOwnProperty('cash') && newAllTransactions['cash'] !== null) {\n                newAllTransactions['cash'] = newAllTransactions['cash'].concat([new_cash_transaction])\n            } else {\n                newAllTransactions['cash'] = [new_cash_transaction]\n            }\n\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n\n            newAllPositions['cash'] = updatedPosition\n\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n            return { allTransactions: newAllTransactions, allPositions: newAllPositions }\n        })\n    }\n\n    onRemoveFromTag(event, remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n            return { allTags: newAllTags }\n        })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newStatusMessages = [...prevState.status_messages]\n            newStatusMessages = [...new_messages.reverse(), ...newStatusMessages]\n            return { status_messages: newStatusMessages }\n        })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    render() {\n\n        let self = this\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 0 \n            aggr_totalbasis_by_tag[tag] = 0 \n            aggr_totalvalue_by_tag[tag] = 0 \n        })\n        Object.entries(this.state.allPositions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            console.log(position_info[1])\n            // console.log(ticker + ': ' + ticker_realized_gains)\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = self.state.allCurrentQuotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && self.state.show_holdings) || (ticker === 'cash' && self.state.show_cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(self.state.allTags).forEach(function(tag) {\n                    if (self.state.allTags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n        console.log(aggr_totalrealized_by_tag)\n\n        let all_stocks_of_interest = []\n        Object.values(this.state.allTags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n        if (this.state.done) {\n            all_stocks_of_interest.forEach(function(ticker) {\n\n                let short = self.state.allPerformanceNumbers[ticker]['short_change_pct']\n                let medium = self.state.allPerformanceNumbers[ticker]['medium_change_pct']\n                let long = self.state.allPerformanceNumbers[ticker]['long_change_pct']\n\n                aggr_performance_by_tag['_everything_'].short_change_pct += short\n                aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n                aggr_performance_by_tag['_everything_'].long_change_pct += long\n                aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n                Object.keys(self.state.allTags).forEach(function(tag) {\n                    if (aggr_performance_by_tag.hasOwnProperty(tag) && self.state.allTags[tag].includes(ticker)) {\n                        aggr_performance_by_tag[tag].short_change_pct += short\n                        aggr_performance_by_tag[tag].medium_change_pct += medium\n                        aggr_performance_by_tag[tag].long_change_pct += long\n                        aggr_performance_by_tag[tag].num_tickers += 1\n                    } else if (self.state.allTags[tag].includes(ticker)) {\n                        let new_aggr_performance = {}\n                        new_aggr_performance['short_change_pct'] = short\n                        new_aggr_performance['medium_change_pct'] = medium\n                        new_aggr_performance['long_change_pct'] = long\n                        new_aggr_performance['num_tickers'] = 1\n                        aggr_performance_by_tag[tag] = new_aggr_performance\n                    }\n                })\n            })\n        }\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_column = self.state.sort_column\n        let quote_columns = ['symbol', 'current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = unique_tickers_to_show.sort(function(a, b) {\n            let value_a, value_b\n            if (quote_columns.includes(sort_column)) {\n                if (self.state.allCurrentQuotes.hasOwnProperty(a) && self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else if (sort_column === 'symbol') {\n                        value_a = self.state.allCurrentQuotes[a][sort_column].toUpperCase()\n                        value_b = self.state.allCurrentQuotes[b][sort_column].toUpperCase()\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                } \n            } else if (performance_columns.includes(sort_column)) {\n                if (self.state.allMonthlyQuotes.hasOwnProperty(a) || a === 'cash') {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                }\n                if (self.state.allMonthlyQuotes.hasOwnProperty(b) || b === 'cash') {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                }\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b\n                if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit') {\n                                let basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares'] || sort_column === 'realized_gains') {\n                        value_a = self.state.allPositions[a][sort_column]\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                let basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares'] || sort_column === 'realized_gains') {\n                        value_b = self.state.allPositions[b][sort_column]\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return -1\n                }\n                if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return 1\n                }\n                if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        let all_columns = {\n            'symbol': {\n                variable_name: 'symbol',\n                display_name: 'Symbol',\n                variable_type: 'string'\n            },\n            'current_shares': {\n                variable_name: 'current_shares',\n                display_name: 'Shares',\n                variable_type: 'number',\n                num_decimals: 0\n            },\n            'current_price': {\n                variable_name: 'current_price',\n                display_name: 'Price',\n                variable_type: 'currency',\n                num_decimals: 2\n            },\n            'current_value': {\n                variable_name: 'current_value',\n                display_name: 'Value',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'percent_value': {\n                variable_name: 'percent_value',\n                display_name: 'Pct of Total Value',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'basis': {\n                variable_name: 'basis',\n                display_name: 'Basis',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'percent_profit': {\n                variable_name: 'percent_profit',\n                display_name: 'Pct Profit',\n                variable_type: 'percentage',\n                passthrough_strings: true,\n                num_decimals: 1\n            },\n            'realized_gains': {\n                variable_name: 'realized_gains',\n                display_name: 'Realized',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'change_pct': {\n                variable_name: 'change_pct',\n                display_name: 'Change',\n                variable_type: 'percentage',\n                num_decimals: 2\n            },\n            'volume': {\n                variable_name: 'volume',\n                display_name: 'Volume',\n                variable_type: 'number',\n                num_decimals: 0\n            },\n            'dollar_volume': {\n                variable_name: 'dollar_volume',\n                display_name: 'Dollar Vol (M)',\n                variable_type: 'currency',\n                scaling_power: -6,\n                num_decimals: 0\n            },\n            'short_change_pct': {\n                variable_name: 'short_change_pct',\n                display_name: '6-month',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'medium_change_pct': {\n                variable_name: 'medium_change_pct',\n                display_name: '1-year',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'long_change_pct': {\n                variable_name: 'long_change_pct',\n                display_name: '2-year',\n                variable_type: 'percentage',\n                num_decimals: 1\n            }\n        }\n        let display_column_order = Object.keys(all_columns)\n        // let display_column_order = ['symbol', 'current_value', 'percent_value', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let display_columns = display_column_order.map(column_variable => all_columns[column_variable])\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n        })\n\n        let aggr_tickers = Object.keys(this.state.allTags)\n        let aggr_row_data = {}\n        aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = []\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['current_shares'] = aggr_totalvalue_by_tag[aggr_ticker]\n            new_aggr_data['current_price'] = 1\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = aggr_totalbasis_by_tag[aggr_ticker]\n            new_aggr_data['realized_gains'] = aggr_totalrealized_by_tag[aggr_ticker]\n            new_aggr_data['performance'] = aggr_performance_by_tag[aggr_ticker]\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"input-controls\">\n                        <div id=\"input-forms\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_new_transaction={this.onNewTransaction}\n                                on_new_cash={this.onNewCash}\n                                on_new_messages={this.onNewMessages}\n                            />\n                        </div>\n                        <div id=\"status-messages-wrapper\">\n                            { this.state.status_messages.length ? 'History:' : '' }\n                            <div id=\"status-messages\">\n                            { this.state.status_messages\n                                .map(\n                                    (message, i) => {\n                                        return (message.toLowerCase().startsWith(\"error\"))\n                                        ? <p key={i} className=\"message error\">{message}</p>\n                                        : <p key={i} className=\"message\">{message}</p>\n                                    }\n                                )\n                            }\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <form>\n                            <div className=\"switch_controls\">\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show holdings:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show tagged:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show untagged:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show index:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                                <div className=\"switch_control\">\n                                    <div className=\"switch_label\">show cash:</div>\n                                    <div className=\"switch_wrapper\">\n                                        <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                        <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </form>\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Tags</th>\n                            {display_columns.map(column => (\n                            <th key={ column.variable_name} onClick={ (e) => this.onChangeSort(column.variable_name) }>{ column.display_name }{ sort_column === column.variable_name ? sort_triangle : '' }</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && sorted_tickers.map(ticker => (\n                            <GridRow \n                                key={ticker}\n                                symbol={ticker}\n                                columns={display_columns}\n                                tags={row_data[ticker]['tags']}\n                                special_classes={row_data[ticker]['special_classes']}\n                                current_price={this.state.allCurrentQuotes[ticker].current_price}\n                                change_pct={this.state.allCurrentQuotes[ticker].change_pct}\n                                volume={this.state.allCurrentQuotes[ticker].volume}\n                                basis={row_data[ticker]['basis']}\n                                current_shares={row_data[ticker]['current_shares']}\n                                realized_gains={row_data[ticker]['realized_gains']}\n                                performance_numbers={this.state.allPerformanceNumbers[ticker]}\n                                baseline={this.state.baseline}\n                                total_value = {aggr_totalvalue_by_tag['_everything_']}\n                                on_remove_from_tag={this.onRemoveFromTag}\n                                on_delete_ticker={this.onDeleteTicker}\n                            />\n                        ))}\n                        <GridRowTotals\n                            columns={display_columns}\n                            total_value={aggr_totalvalue_by_tag['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Tags</th>\n                            {display_columns.map(column => (\n                            <th key={ column.variable_name}>{ column.display_name }</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.done && aggr_tickers.map(aggr_ticker => (\n                            <GridRow \n                                key={aggr_ticker}\n                                symbol={aggr_ticker}\n                                columns={display_columns}\n                                tags={aggr_row_data[aggr_ticker]['tags']}\n                                special_classes={aggr_row_data[aggr_ticker]['special_classes']}\n                                current_price={aggr_row_data[aggr_ticker]['current_price']}\n                                change_pct={aggr_row_data[aggr_ticker]['change_pct']}\n                                volume={aggr_row_data[aggr_ticker]['volume']}\n                                basis={aggr_totalbasis_by_tag[aggr_ticker]}\n                                current_shares={aggr_row_data[aggr_ticker]['current_shares']}\n                                realized_gains={aggr_row_data[aggr_ticker]['realized_gains']}\n                                performance_numbers={aggr_row_data[aggr_ticker]['performance']}\n                                baseline={this.state.baseline}\n                                total_value = {aggr_totalvalue_by_tag['_everything_']}\n                                on_remove_from_tag={this.onRemoveFromTag}\n                                on_delete_ticker={this.onDeleteTicker}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}