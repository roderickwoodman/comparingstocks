{"version":3,"sources":["components/PositionRow.js","components/AddByTicker.js","ComparingStocks.js","index.js"],"names":["PositionRow","on_remove_from_group","this","props","current_quote","performance","performance_numbers","performance_baseline","performance_baseline_numbers","current_position","styleCell","column","classes","change_pct","short_change_pct","short","medium_change_pct","medium","long_change_pct","long","current_shares","basis","realized_gains","row_classes","ticker_is_index","symbol","percent_gains","current_value","current_price","percent_value","total_value","className","watch_group","includes","onClick","e","columns","map","key","variable_name","num_decimals","value","baseline_value","prefix","suffix","adjust_decimal","performance_value","variable_type","volume","isNaN","hasOwnProperty","Math","pow","scaling_power","round","toFixed","populateCellValue","React","Component","AddByTicker","state","status_messages","handleChange","bind","handleReset","handleSubmit","validateTickers","event","setState","target","preventDefault","user_tickers","String","split","str","trim","toUpperCase","replace","Array","from","Set","tickers","tickers_to_add","new_status_messages","self","forEach","ticker","all_stocks","user_stocks","push","on_new_tickers","id","onSubmit","onReset","onChange","placeholder","required","type","message","i","toLowerCase","startsWith","zero_performance","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allGroups","watch","index_performance","allPerformanceNumbers","show_which_stocks","sort_column","sort_dir_asc","done","tickerIsIndex","convertNameForIndicies","onBaselineChange","onShowStocksChange","onChangeSort","onNewTickers","onRemoveFromGroup","stored_performance_baseline","JSON","parse","localStorage","getItem","stored_show_which_stocks","stored_sort_column","stored_sort_dir_asc","stored_allGroups","indexed_transaction_data","require","sample_transactions","raw_current_quote_data","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","quoteTimeSeries","monthly_prices","Object","entries","price","parseFloat","now","prev_short","prev_medium","prev_long","keys","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newPosition","reduce","total","current_val","outflows","inflows","newCurrentQuote","quoteResult","slice","parseInt","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","new_baseline","setItem","stringify","new_baseline_numbers","new_show_which_stocks","new_sort_column","prevState","idx","indexOf","new_tickers","newAllGroups","assign","remove_ticker","filter","position","quote_columns","holdings_columns","performance_columns","sort_triangle","fromCharCode","sorted_tickers","sort","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","getHoldings","getIndicies","getWatchList","filtered_sorted_tickers","all_columns","display_name","display_columns","column_variable","cellSpacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bcfadd4.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class PositionRow extends React.Component {\n\n    render() {\n        const on_remove_from_group = this.props.on_remove_from_group\n        const current_quote = this.props.current_quote\n        const performance = this.props.performance_numbers\n        const performance_baseline = this.props.performance_baseline\n        const performance_baseline_numbers = this.props.performance_baseline_numbers\n        let current_position = this.props.current_position\n        if (current_position == null) {\n            current_position = {\n                current_shares: 0,\n                basis: 'n/a',\n                realized_gains: 'n/a'\n            }\n        }\n\n        function populateCellValue(column) {\n            let prefix = ''\n            let suffix = ''\n            let adjust_decimal = false\n            let num_decimals\n            let value, baseline_value\n            let performance_value = false\n            switch (column.variable_type) {\n                case 'number':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    break\n                case 'currency':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    prefix = '$'\n                    break\n                case 'percentage':\n                    adjust_decimal = true\n                    num_decimals = column.num_decimals\n                    suffix = '%'\n                    break\n                default:\n                    break\n            }\n            switch (column.variable_name) {\n                case 'symbol':\n                    value = current_quote.symbol\n                    break\n                case 'current_shares':\n                    value = current_position.current_shares\n                    break\n                case 'current_price':\n                    value = current_quote.current_price\n                    break\n                case 'current_value':\n                    value = current_value\n                    break\n                case 'percent_value':\n                    value = percent_value\n                    break\n                case 'basis':\n                    value = basis\n                    break\n                case 'percent_gains':\n                    value = percent_gains\n                    break\n                case 'realized_gains':\n                    value = current_position.realized_gains\n                    break\n                case 'change_pct':\n                    value = current_quote.change_pct\n                    break\n                case 'volume':\n                    value = current_quote.volume\n                    break\n                case 'dollar_volume':\n                    value = current_quote.current_price * current_quote.volume\n                    break\n                case 'short_change_pct':\n                    value = performance.short_change_pct\n                    performance_value = true\n                    baseline_value = performance_baseline_numbers.short\n                    break\n                case 'medium_change_pct':\n                    value = performance.medium_change_pct\n                    performance_value = true\n                    baseline_value = performance_baseline_numbers.medium\n                    break\n                case 'long_change_pct':\n                    value = performance.long_change_pct\n                    performance_value = true\n                    baseline_value = performance_baseline_numbers.long\n                    break\n                default:\n                    break\n            }\n\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else if (column.variable_type === 'string') {\n                return value\n            } else if (!isNaN(value)) {\n                if (adjust_decimal) {\n                    if (column.hasOwnProperty('scaling_power')) {\n                        value *= Math.pow(10, column.scaling_power)\n                    }\n                    if (performance_value && performance_baseline !== 'zero_pct_gain') {\n                        value = value - baseline_value\n                    }\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n                return value = prefix + value + suffix\n\n            } else {\n                return '??'\n            }\n        }\n\n        function styleCell(column) {\n            let classes = 'position-cell'\n            switch (column) {\n                case 'change_pct':\n                    if (current_quote.change_pct > 0) {\n                        classes += ' text-green'\n                    } else if (current_quote.change_pct < 0) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'short_change_pct':\n                    if (performance.short_change_pct > 0 && performance.short_change_pct > performance_baseline_numbers.short) {\n                        classes += ' text-green'\n                    } else if (performance.short_change_pct < 0 && performance.short_change_pct < performance_baseline_numbers.short) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'medium_change_pct':\n                    if (performance.medium_change_pct > 0 && performance.medium_change_pct > performance_baseline_numbers.medium) {\n                        classes += ' text-green'\n                    } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < performance_baseline_numbers.medium) {\n                        classes += ' text-red'\n                    }\n                    break\n                case 'long_change_pct':\n                    if (performance.long_change_pct > 0 && performance.long_change_pct > performance_baseline_numbers.long) {\n                        classes += ' text-green'\n                    } else if (performance.long_change_pct < 0 && performance.long_change_pct < performance_baseline_numbers.long) {\n                        classes += ' text-red'\n                    }\n                    break\n                default:\n                    break\n            }\n            return classes\n        }\n\n        let row_classes = 'position-row' \n        if (this.props.ticker_is_index(current_quote.symbol)) {\n            row_classes += ' position-is-index'\n        }\n\n        let current_value = (current_position.current_shares) ? current_quote.current_price * current_position.current_shares : 'n/a'\n        let percent_value = (current_value !== 'n/a') ? current_value / this.props.total_value * 100 : 'n/a'\n        let basis = (current_position.basis) ? current_position.basis : 'n/a'\n        let percent_gains\n        if (current_position.current_shares === 0) {\n            percent_gains = 'n/a'\n        } else if (current_position.basis >= current_value) {\n            percent_gains = 'losing'\n        } else if (current_value > current_position.basis) {\n            percent_gains = (1 - current_position.basis / current_value) * 100\n        }\n\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { (this.props.watch_group.includes(current_quote.symbol)) ?\n                        <button onClick={ (e) => {on_remove_from_group(e, current_quote.symbol)}}>\n                            watch\n                        </button>\n                    : '-'\n                    }\n                </td>\n                { this.props.columns.map(column => (\n                <td key={column.variable_name} className={ styleCell(column.variable_name) }>{ populateCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nPositionRow.propTypes = {\n    columns: PropTypes.array,\n    watch_group: PropTypes.array,\n    current_quote: PropTypes.object,\n    current_position: PropTypes.object,\n    performance_numbers: PropTypes.object,\n    performance_baseline: PropTypes.string,\n    performance_baseline_numbers: PropTypes.object,\n    total_value: PropTypes.number,\n    ticker_is_index: PropTypes.func,\n    on_remove_from_group: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddByTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: '',\n            status_messages: []\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ value: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tickers = String(this.state.value)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        tickers.forEach(function(ticker) {\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: ticker ' + ticker + ' does not exist.')\n            } else if (self.props.user_stocks.includes(ticker)) {\n                new_status_messages.push('ERROR: ticker ' + ticker + ' has already been added.')\n            } else {\n                new_status_messages.push('ticker ' + ticker + ' has now been added.')\n                tickers_to_add.push(ticker)\n            }\n        })\n        this.props.on_new_tickers(tickers_to_add)\n        this.setState({ status_messages: new_status_messages })\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"input-by-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>Ticker(s):</label>\n                    <input value={this.state.value} onChange={this.handleChange} placeholder=\"Dow30 tickers only\" required />\n                    <section className=\"buttonrow\">\n                        <input type=\"reset\" value=\"Clear\" />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </section>\n                </form>\n                <div className=\"status-messages\">\n                    { this.state.status_messages\n                        .map(\n                            (message, i) => {\n                                return (message.toLowerCase().startsWith(\"error\"))\n                                ? <p key={i} className=\"message error\">{message}</p>\n                                : <p key={i} className=\"message\">{message}</p>\n                            }\n                        )\n                    }\n                </div>\n            </section>\n        )\n    }\n}\n\nAddByTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    user_stocks: PropTypes.array.isRequired,\n    on_new_tickers: PropTypes.func.isRequired\n}","import React from 'react'\nimport { PositionRow } from './components/PositionRow'\nimport { AddByTicker } from './components/AddByTicker'\n\n\nconst zero_performance = { short: 0, medium: 0, long: 0 }\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allGroups: {\n                watch: []\n            },\n            performance_baseline: 'zero_pct_gain',\n            performance_baseline_numbers: {},\n            index_performance: {},\n            allPerformanceNumbers: {},\n            show_which_stocks: 'all_stocks',\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.onBaselineChange = this.onBaselineChange.bind(this)\n        this.onShowStocksChange = this.onShowStocksChange.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromGroup = this.onRemoveFromGroup.bind(this)\n    }\n\n    componentDidMount() {\n\n        const stored_performance_baseline = JSON.parse(localStorage.getItem(\"performance_baseline\"))\n        if (stored_performance_baseline !== null) {\n            this.setState({ performance_baseline: stored_performance_baseline })\n        }\n\n        const stored_show_which_stocks = JSON.parse(localStorage.getItem(\"show_which_stocks\"))\n        if (stored_show_which_stocks !== null) {\n            this.setState({ show_which_stocks: stored_show_which_stocks })\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_allGroups = JSON.parse(localStorage.getItem(\"allGroups\"))\n        if (stored_allGroups !== null) {\n            this.setState({ allGroups: stored_allGroups })\n        }\n\n        let self = this\n\n        let indexed_transaction_data = require('./api/sample_transactions.json').sample_transactions\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'])\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'])\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short'] = (now - prev_short) / now * 100\n                index_performance['medium'] = (now - prev_medium) / now * 100\n                index_performance['long'] = (now - prev_long) / now * 100\n            }\n        })\n        if (stored_performance_baseline !== 'sp500_pct_gain') {\n            this.setState({ performance_baseline_numbers: index_performance })\n        } else {\n            this.setState({ performance_baseline_numbers: zero_performance })\n        }\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        Object.keys(indexed_transaction_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            // get position\n            if (indexed_transaction_data.hasOwnProperty(ticker)) {\n                let newPosition = {}\n                newPosition['symbol'] = ticker\n                let current_shares = indexed_transaction_data[ticker].reduce(function (total, current_val) {\n                return total + current_val['shares_added']\n                }, 0)\n                let outflows = indexed_transaction_data[ticker].reduce(function (total, current_val) {\n                return (current_val['dollars_spent'] > 0) ? total + current_val['dollars_spent'] : total\n                }, 0)\n                let inflows = -1 * indexed_transaction_data[ticker].reduce(function (total, current_val) {\n                return (current_val['dollars_spent'] < 0) ? total + current_val['dollars_spent'] : total\n                }, 0)\n                newPosition['current_shares'] = current_shares\n                newPosition['basis'] = Math.round((outflows > inflows) ? outflows - inflows : 0)\n                newPosition['realized_gains'] = Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n                newPositions[ticker] = newPosition\n            } else {\n                newPositions[ticker] = null\n            }\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            } else {\n                newCurrentQuotes[ticker] = null\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (stored_performance_baseline === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            } else {\n                newPerformanceNumbers[ticker] = null\n            }\n        })\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    onBaselineChange(event) {\n        let new_baseline = event.target.value\n        localStorage.setItem('performance_baseline', JSON.stringify(new_baseline))\n\n        let new_baseline_numbers = (new_baseline === 'sp500_pct_gain') ? this.state.index_performance : zero_performance\n        this.setState({ performance_baseline: new_baseline })\n        this.setState({ performance_baseline_numbers: new_baseline_numbers })\n    }\n\n    onShowStocksChange(event) {\n        let new_show_which_stocks = event.target.value\n        this.setState({ show_which_stocks: new_show_which_stocks })\n        localStorage.setItem('show_which_stocks', JSON.stringify(new_show_which_stocks))\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    onNewTickers(new_tickers) {\n        this.setState(prevState => {\n            let newAllGroups = Object.assign({}, prevState.allGroups)\n            new_tickers.forEach(function(ticker) {\n                if (!newAllGroups.watch.includes(ticker)) {\n                    newAllGroups.watch.push(ticker)\n                }\n            })\n            localStorage.setItem('allGroups', JSON.stringify(newAllGroups))\n            return { allGroups: newAllGroups }\n        })\n    }\n\n    onRemoveFromGroup(event, remove_ticker) {\n        this.setState(prevState => {\n            let newAllGroups = Object.assign({}, prevState.allGroups)\n            newAllGroups.watch = newAllGroups.watch.filter(ticker => ticker !== remove_ticker)\n\n            localStorage.setItem('allGroups', JSON.stringify(newAllGroups))\n            return { allGroups: newAllGroups }\n        })\n    }\n\n\n    render() {\n\n        let self = this\n\n        let total_value = Object.entries(this.state.allPositions).filter(position => position[1] !== null).reduce(function (total, current_val) {\n            if (self.state.allCurrentQuotes[current_val[0]] !== null) {\n                return total + current_val[1]['current_shares'] * self.state.allCurrentQuotes[current_val[0]]['current_price']\n            } else {\n                return total\n            }\n        }, 0)\n\n        let sort_column = self.state.sort_column\n        let quote_columns = ['symbol', 'current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_gains']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = Object.keys(this.state.allPositions).sort(function(a, b) {\n            let value_a, value_b\n            if (quote_columns.includes(sort_column)) {\n                if (self.state.allCurrentQuotes[a] !== null && self.state.allCurrentQuotes[b] !== null) {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                } \n            } else if (performance_columns.includes(sort_column)) {\n                if (self.state.allMonthlyQuotes[a] !== null && self.state.allMonthlyQuotes[b] !== null) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                }\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b\n                if (self.state.allPositions[a] !== null) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_gains') {\n                        if (self.state.allCurrentQuotes[a] !== null && self.state.allPositions[a]['current_shares']) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_gains') {\n                                let basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares'] || sort_column === 'realized_gains') {\n                        value_a = self.state.allPositions[a][sort_column]\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.state.allPositions[b] !== null) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_gains') {\n                        if (self.state.allCurrentQuotes[b] !== null && self.state.allPositions[b]['current_shares']) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_gains' && positionvalue_b !== 0) {\n                                let basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares'] || sort_column === 'realized_gains') {\n                        value_b = self.state.allPositions[b][sort_column]\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return -1\n                }\n                if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return 1\n                }\n                if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        function getHoldings() {\n            return self.state.allStocks.filter(ticker => self.state.allPositions[ticker] !== null && self.state.allPositions[ticker]['current_shares'])\n        }\n        function getIndicies() {\n            return self.state.allIndiciesAliases\n        }\n        function getWatchList() {\n            return self.state.allGroups.watch.filter(ticker => self.state.allPositions[ticker] === null || !self.state.allPositions[ticker]['current_shares'])\n        }\n\n        let filtered_sorted_tickers = [...sorted_tickers]\n        if (this.state.show_which_stocks === 'holdings_only') {\n            filtered_sorted_tickers = sorted_tickers.filter(ticker => [...getHoldings()].includes(ticker))\n        } else if (this.state.show_which_stocks === 'holdings_and_index') {\n            filtered_sorted_tickers = sorted_tickers.filter(ticker => [...getHoldings(), ...getIndicies()].includes(ticker))\n        } else if (this.state.show_which_stocks === 'holdings_and_watchlist_and_index') {\n            filtered_sorted_tickers = sorted_tickers.filter(ticker => [...getHoldings(), ...getWatchList(), ...getIndicies()].includes(ticker))\n        } else if (this.state.show_which_stocks === 'watchlist_only') {\n            filtered_sorted_tickers = sorted_tickers.filter(ticker => [...getWatchList()].includes(ticker))\n        }\n\n        let all_columns = {\n            'symbol': {\n                variable_name: 'symbol',\n                display_name: 'Symbol',\n                variable_type: 'string'\n            },\n            'current_shares': {\n                variable_name: 'current_shares',\n                display_name: 'Shares',\n                variable_type: 'number',\n                num_decimals: 0\n            },\n            'current_price': {\n                variable_name: 'current_price',\n                display_name: 'Price',\n                variable_type: 'currency',\n                num_decimals: 2\n            },\n            'current_value': {\n                variable_name: 'current_value',\n                display_name: 'Value',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'percent_value': {\n                variable_name: 'percent_value',\n                display_name: 'Pct Value',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'basis': {\n                variable_name: 'basis',\n                display_name: 'Basis',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'percent_gains': {\n                variable_name: 'percent_gains',\n                display_name: 'Pct Gains',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'realized_gains': {\n                variable_name: 'realized_gains',\n                display_name: 'Realized',\n                variable_type: 'currency',\n                num_decimals: 0\n            },\n            'change_pct': {\n                variable_name: 'change_pct',\n                display_name: 'Change',\n                variable_type: 'percentage',\n                num_decimals: 2\n            },\n            'volume': {\n                variable_name: 'volume',\n                display_name: 'Volume',\n                variable_type: 'number',\n                num_decimals: 0\n            },\n            'dollar_volume': {\n                variable_name: 'dollar_volume',\n                display_name: 'Dollar Vol (M)',\n                variable_type: 'currency',\n                scaling_power: -6,\n                num_decimals: 0\n            },\n            'short_change_pct': {\n                variable_name: 'short_change_pct',\n                display_name: '6-month',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'medium_change_pct': {\n                variable_name: 'medium_change_pct',\n                display_name: '1-year',\n                variable_type: 'percentage',\n                num_decimals: 1\n            },\n            'long_change_pct': {\n                variable_name: 'long_change_pct',\n                display_name: '2-year',\n                variable_type: 'percentage',\n                num_decimals: 1\n            }\n        }\n        // let display_column_order = Object.keys(all_columns)\n        let display_column_order = ['symbol', 'current_value', 'percent_value', 'percent_gains', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let display_columns = display_column_order.map(column_variable => all_columns[column_variable])\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <label>\n                        Performance Baseline:\n                        <select value={this.state.performance_baseline} onChange={this.onBaselineChange}>\n                            <option value=\"zero_pct_gain\">0% gain</option>\n                            <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                        </select>\n                    </label>\n                    <label>\n                        Show Stocks:\n                        <select value={this.state.show_which_stocks} onChange={this.onShowStocksChange}>\n                            <option value=\"all_stocks\">all stocks</option>\n                            <option value=\"watchlist_only\">watch list only</option>\n                            <option value=\"holdings_and_index\">holdings and index</option>\n                            <option value=\"holdings_and_watchlist_and_index\">holdings and watch and index</option>\n                            <option value=\"holdings_only\">holdings only</option>\n                        </select>\n                    </label>\n                    <AddByTicker\n                        all_stocks={this.state.allStocks}\n                        user_stocks={this.state.allGroups.watch}\n                        on_new_tickers={this.onNewTickers}\n                    />\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Groups</th>\n                            {display_columns.map(column => (\n                            <th key={ column.variable_name} onClick={ (e) => this.onChangeSort(column.variable_name) }>{ column.display_name }{ sort_column === column.variable_name ? sort_triangle : '' }</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {filtered_sorted_tickers.map(ticker => (\n                            <PositionRow \n                                key={ticker}\n                                columns={display_columns}\n                                watch_group={this.state.allGroups.watch}\n                                current_position={this.state.allPositions[ticker]}\n                                current_quote={this.state.allCurrentQuotes[ticker]}\n                                performance_numbers={this.state.allPerformanceNumbers[ticker]}\n                                performance_baseline={this.state.performance_baseline}\n                                performance_baseline_numbers={this.state.performance_baseline_numbers}\n                                total_value = {total_value}\n                                ticker_is_index={this.tickerIsIndex}\n                                on_remove_from_group={this.onRemoveFromGroup}\n                        />))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}