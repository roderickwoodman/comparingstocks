{"version":3,"sources":["components/GridHeaderRow.js","components/EditNumericCell.js","components/GridRow.js","components/GridRowTotals.js","components/AddTicker.js","components/AddTag.js","components/AddTransaction.js","components/TransactionLog.js","components/DeleteTag.js","components/StatusMessages.js","components/WhatIf.js","components/InputForms.js","ComparingStocks.js","index.js"],"names":["GridHeaderRow","props","onHeaderCellClick","bind","styleCell","column_index","column_name","classes","startsWith","this","on_change_whatif_format","on_change_sort","is_aggregate","sort_column","sort_triangle","symbol_count_str","all_columns","first_column","name","push","self","columns","forEach","column","new_column","whatif_format","display_name","replace","highlight_column","map","i","key","String","fromCharCode","className","onClick","e","undefined","React","Component","EditNumericCell","state","user_value","user_value_is_valid","handleEscapeKey","handleChange","handleSubmit","isNaN","original_value","setState","elem","focus","document","addEventListener","removeEventListener","event","keyCode","on_escape_key","target","value","length","preventDefault","on_new_value","onSubmit","ref","type","id","onChange","size","disabled","GridRow","hovering_symbol","hovering_risk_factor","user_risk_factor","user_risk_factor_valid","onWhatifCellClick","toggleHoverSymbol","toggleHoverRiskFactor","populateMemberButton","populateDeleteButton","populateEditButton","editRiskFactor","onNewValue","populateCellValue","numberWithCommas","daysAgo","symbol","is_aggr","row_name","on_remove_from_tag","special_classes","includes","membership_set","on_delete_tag","current_shares","on_delete_ticker","editing_row","on_edit_cell","change_pct","performance","performance_numbers","baseline","short_change_pct","style_realized_performance","start_date","show_only_achieved_performance","medium_change_pct","long_change_pct","new_value","on_modify_risk_factor","current_edit_value","num_decimals","baseline_value","percent_value","percent_basis","percent_profit","prefix","suffix","adjust_decimal","performance_value","total_value","total_basis","current_price","current_value","value_at_risk","risk_factor","basis","basis_risked","realized_gains","whatif","volume","hasOwnProperty","Math","pow","scaling_power","toString","indexOf","round","toFixed","abs","x","date_str","now","Date","then","diff","row_classes","special_class","member_count","sort","onMouseEnter","onMouseLeave","defaultProps","GridRowTotals","total_performance","styleTotalsCell","populateTotalsCellValue","AddTicker","user_tickers_string","add_to_tag","handleTickersChange","handleTagChange","handleReset","validateTickers","user_tag","user_tickers","split","str","trim","toUpperCase","Array","from","Set","tag","tickers","tickers_to_add","new_status_messages","create_message","ticker","all_stocks","all_tags","tagged_tickers","Object","keys","concat","on_new_tickers","on_new_messages","onReset","placeholder","required","filter","tag_name","AddTag","user_tags_string","validateTags","user_tags","toLowerCase","tags","tags_to_add","on_new_tags","AddTransaction","transaction_date","transaction","user_cash_action","user_cash_amount","validateTransaction","handleCashChange","handleCashReset","handleActionChange","handleCashSubmit","user_date","parseFloat","valid_transaction_summary","on_new_cash","user_transaction","action","num_shares","parseInt","total","on_new_transaction","TransactionLog","exportRef","createRef","importRef","filter_str","file","onExportButton","onHiddenImportChange","all_transactions","transactions","JSON","parse","stringify","data","encodeURIComponent","a","createElement","href","download","innerHTML","current","appendChild","click","remove","files","reader","FileReader","readAsText","onload","evt","file_contents","result","on_import_transactions","sorted_filtered_transactions","summary","b","accept","style","width","visibility","modified_at","on_delete_transaction","DeleteTag","delete_tag","StatusMessages","all_status_messages","message","content","WhatIf","balanceable_value","balance_target_set","balance_target_column","sell_all_of","cash_treatment","cash_remaining","cash_valid","isDisabled","new_balanceable_value","get_balanceable_value","stored_balance_target_set","localStorage","getItem","stored_balance_target_column","stored_cash_treatment","stored_cash_remaining","selectedOptions","user_whole_dollars_string","user_whole_dollars","valid_whole_dollars_string","setItem","multiple_tickers","item","user_remaining_cash","remaining_cash","on_whatif_submit","show_holdings","show_untagged","show_tagged","excludable_tickers","all_positions","position","untagged","entries","entry","multiple","htmlFor","selected","defaultChecked","show_cash","InputForms","which_inputs","onWhichInputs","stored_which_inputs","new_which_inputs","Fragment","all_current_quotes","passthrough_strings","default_shown_columns","ComparingStocks","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","allPositions","allTransactions","allTags","allPerformanceNumbers","allRisk","allWhatifs","last_status_messages","aggrPerformance","aggrBasis","aggrRealized","aggrTotalValue","show_index","show_aggregates","sort_dir_asc","shown_columns","done","tickerIsIndex","convertNameForIndicies","getTransactionById","getTransactionsByTicker","getPositionFromSingleTickerTransactions","getPositionFromCashTransactions","calculateAggrPositionInfo","calculateAggrPerformance","populateSymbolCount","onInputChange","onShowInputChange","onChangeWhatifFormat","onChangeSort","showColumns","createMessage","onToggleShowColumn","onNewTransaction","onImportTransactions","onNewCash","onNewTags","onNewTickers","onRemoveFromTag","onDeleteTicker","onDeleteTag","onDeleteTransaction","onEditCell","onModifyRiskFactor","onEscapeKey","onNewMessages","getCurrentValue","getCurrentShares","getBasis","getBalanceableValue","onWhatifSubmit","onWhatifGo","getIndicies","getHoldings","getAdded","getTagged","getUntagged","nameIsAnAggregate","nameIsSpecial","sortTickers","stored_baseline","assign","short_pct_gain","medium_pct_gain","long_pct_gain","stored_sort_column","stored_sort_dir_asc","stored_whatif_format","stored_allTags","stored_allTransactions","stored_allRisk","stored_controls","control","stored_control","indexed_risk_data","raw_current_quote_data","require","sample_current_quotes","indexed_current_quote_data","raw_quote","adjusted_ticker","raw_monthly_quote_data","sample_monthly_quotes","indexed_monthly_quote_data","index_performance","quoteTimeSeries","monthly_prices","price","prev_short","prev_medium","prev_long","newPositions","newCurrentQuotes","newMonthlyQuotes","newPerformanceNumbers","newRisk","newPosition","newCurrentQuote","quoteResult","slice","newMonthlyQuote","newPerformance","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","newRiskEntry","factor","change","cash_transactions","init_shown_columns","stored_shown_columns","aggr_position_info","aggr_performance","transaction_id","date","inflows","outflows","sorted_transactions","position_start_date","substr","cash_transaction","cash_amount","all_quotes","holdings","cash","aggr_totalbasis_by_tag","aggr_totalrealized_by_tag","aggr_totalvalue_by_tag","position_info","ticker_basis","ticker_realized_gains","ticker_shares","ticker_price","all_performance_numbers","aggr_performance_by_tag","num_tickers","all_stocks_of_interest","values","array_of_tickers","short","medium","long","new_aggr_performance","tag_performance","time_range","new_baseline_name","new_baseline","checked","new_whatif_format","new_sort_column","prevState","column_names","new_shown_column_names","new_shown_columns","splice","findIndex","idx","message_content","getTime","new_tags","newAllTags","new_tickers","untagged_ticker","delete_ticker","all_tags_for_this_ticker","newAllPositions","newAllTransactions","newAllStatusMessages","new_message","newLastStatusMessages","new_transaction_summary","new_transaction","orig_start_date","orig_basis","orig_current_shares","orig_realized_gains","new_start_date","new_current_shares","updatedPosition","imported_transactions","transaction_tickers","window","location","reload","new_cash_transaction_summary","new_cash_transaction","new_cash","delete_transaction_id","transaction_to_delete","remainingTransactionsForTicker","remove_from_tag","remove_ticker","all_other_tags_for_this_ticker","newUntagged","tickers_losing_a_tag","all_other_tagged_tickers","newAllRisk","new_messages","reverse","current_cash_position","show_whatif_columns","sell_all_set","adjusting_cash","original_cash_position","total_balance_value","ticker_set","new_whatif","actual_remaining_cash","tickers_balanced_set","whatif_currentshares","whatif_balancedvalue","value_delta","original_currentvalue","original_basis","floor","whatif_basis","target_delta_shares","target_delta","ceil","whatif_balancedbasis","numerator_product","numerator","denominator_terms","fill","ticker_idx","term","term_idx","denominator","reduce","accumulator","currentValue","targets","factor_0","holding","added_tickers","grid_rows","names_list","quote_columns","holdings_columns","performance_columns","sorted_names_list","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","tickers_to_show","unique_tickers_to_show","sorted_tickers","row_data","tag_membership","tag_info","sorted_aggr_tickers","aggr_row_data","aggr_ticker","new_aggr_data","shown_column_names","all_columns_namesorted","row_popover","Popover","Title","as","Content","column_popover","PopulateHeaderRow","symbol_count","PopulateRow","all_row_data","new_row","status_message","OverlayTrigger","trigger","placement","overlay","variant","cellSpacing","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e18c1ed.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\n// This component displays table headers for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\nexport class GridHeaderRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onHeaderCellClick = this.onHeaderCellClick.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n    }\n\n    styleCell(column_index, column_name) {\n        let classes = ''\n        if (column_index !== 0) {\n            classes += 'clickable '\n        }\n        if (column_name.startsWith('whatif_')) {\n            classes += 'whatif '\n        }\n        return classes\n    }\n\n    onHeaderCellClick(column_name) {\n        if (column_name.startsWith('whatif_')) {\n            this.props.on_change_whatif_format()\n        } else {\n            this.props.on_change_sort(column_name)\n        }\n    }\n\n    render() {\n\n        let is_aggregate = this.props.is_aggregate\n        let sort_column = this.props.sort_column\n        let sort_triangle = this.props.sort_triangle\n        let symbol_count_str = this.props.symbol_count_str\n\n        let all_columns = []\n\n        let first_column = { // always the tag or ticker membership column\n            name: 'first'\n        }\n        if (this.props.is_aggregate) {\n            first_column['display_name'] = 'Tickers'\n        } else {\n            first_column['display_name'] = 'Tags'\n        }\n        all_columns.push(first_column)\n\n        let self = this\n        this.props.columns.forEach(function(column) {\n            let new_column = {}\n            new_column['name'] = column.name\n            if (column.name === 'symbol') {\n                if (is_aggregate) {\n                    new_column['display_name'] = 'Tags'\n                } else {\n                    new_column['display_name'] = 'Tickers'\n                }\n            } else if (column.name.startsWith('whatif_')) {\n                if (self.props.whatif_format === 'deltas') {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If DELTA')\n                } else {\n                    new_column['display_name'] = column.display_name.replace('What-If', 'What-If NEW')\n                }\n            } else {\n                new_column['display_name'] = column.display_name\n            }\n            all_columns.push(new_column)\n        })\n\n        return (\n            <tr>\n            {this.props.highlight_column !== null && all_columns.map( (column,i) => (\n                <th\n                key={ column.name }\n                >\n                    { (column.name === this.props.highlight_column) \n                    ? 'BEFORE BALANCING' \n                    : (column.name === 'whatif_' + this.props.highlight_column) \n                        ? 'AFTER BALANCING' \n                        : String.fromCharCode(160) }\n                </th>\n            ))}\n            {this.props.highlight_column === null && all_columns.map( (column,i) => (\n                <th \n                    key={ column.name } \n                    className={ self.styleCell(i, column.name) }\n                    onClick={ (i!==0) ? (e)=>this.onHeaderCellClick(column.name) : undefined }\n                >   { (i===1 && !is_aggregate) ? column.display_name + symbol_count_str : column.display_name }\n                    { column.name === sort_column ? sort_triangle : '' }\n                </th>\n            ))}\n            </tr>\n        )\n    }\n\n}\n\nGridHeaderRow.propTypes = {\n    highlight_column: PropTypes.string,\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    symbol_count_str: PropTypes.string,\n    sort_column: PropTypes.string,\n    sort_triangle: PropTypes.string,\n    whatif_format: PropTypes.string,\n    on_change_sort: PropTypes.func,\n    on_change_whatif_format: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class EditNumericCell extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_value: '',\n            user_value_is_valid: false\n        }\n        this.handleEscapeKey = this.handleEscapeKey.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (isNaN(this.props.original_value)) {\n            this.setState({ user_value: '' }) \n        } else {\n            this.setState({ user_value: this.props.original_value })\n        }\n        this.elem.focus()\n        document.addEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleEscapeKey, false)\n    }\n\n    handleEscapeKey(event) {\n        if (event.keyCode === 27) {\n            this.props.on_escape_key()\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value } = event.target\n\n        // when the input changes, validate the user's value\n        if (name === 'user_value') {\n            if (value.length && !isNaN(value) && value > 0) {\n                this.setState({ user_value: value, user_value_is_valid: true })\n            } else {\n                this.setState({ user_value: value, user_value_is_valid: false })\n            }\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        this.props.on_new_value(this.state.user_value)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input ref={(elem) => {this.elem = elem}} type=\"text\" id=\"edit-cell\" name=\"user_value\" value={this.state.user_value} onChange={this.handleChange} size=\"5\" />\n                <button type=\"submit\" disabled={!this.state.user_value_is_valid}>S</button>\n            </form>\n        )\n    }\n}\n\nEditNumericCell.propTypes = {\n    original_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_new_value: PropTypes.func.isRequired,\n    on_escape_key: PropTypes.func.isRequired\n}\n\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { EditNumericCell } from './EditNumericCell'\n\n\n// This component displays table data for either tickers (is_aggregate === 0) or tags (is_aggregate === 1).\n// For tickers, the membership_set prop is all of the tags that it belongs to.\n// For tags, the membership_set prop is all of the tags that belong to it.\nexport class GridRow extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            hovering_symbol: false,\n            hovering_risk_factor: false,\n            user_risk_factor: '',\n            user_risk_factor_valid: false\n        }\n        this.onWhatifCellClick = this.onWhatifCellClick.bind(this)\n        this.toggleHoverSymbol = this.toggleHoverSymbol.bind(this)\n        this.toggleHoverRiskFactor = this.toggleHoverRiskFactor.bind(this)\n        this.populateMemberButton = this.populateMemberButton.bind(this)\n        this.populateDeleteButton = this.populateDeleteButton.bind(this)\n        this.populateEditButton = this.populateEditButton.bind(this)\n        this.editRiskFactor = this.editRiskFactor.bind(this)\n        this.onNewValue = this.onNewValue.bind(this)\n        this.populateCellValue = this.populateCellValue.bind(this)\n        this.styleCell = this.styleCell.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n        this.daysAgo = this.daysAgo.bind(this)\n    }\n\n    onWhatifCellClick() {\n        this.props.on_change_whatif_format()\n    }\n\n    toggleHoverSymbol() {\n        this.setState({ hovering_symbol: !this.state.hovering_symbol })\n    }\n\n    toggleHoverRiskFactor() {\n        this.setState({ hovering_risk_factor: !this.state.hovering_risk_factor })\n    }\n\n    // this button removes a ticker from a tag\n    populateMemberButton(symbol) {\n        let is_aggr = this.props.is_aggregate\n        let row_name = this.props.row_name\n        if (is_aggr) {\n            // row_name is a TAG\n            // symbol is a TICKER \n            if (row_name !== 'untagged') {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(row_name, symbol)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" disabled={true}>{ symbol }</button>\n                )\n            }\n        } else {\n            // row_name is a TICKER\n            // symbol is a TAG \n            if (!this.props.special_classes.includes('index') && !this.props.special_classes.includes('cash') && !this.props.membership_set.includes('untagged')) {\n                return (\n                    <button key={row_name + symbol + is_aggr} className=\"tag-removal\" onClick={ (e) => { this.props.on_remove_from_tag(symbol, row_name)} }>{ symbol }</button>\n                )\n            } else {\n                return (\n                    '-'\n                )\n            }\n        }\n    }\n\n    // this button deletes the ticker or tag completely\n    populateDeleteButton(column_name, is_aggregate) {\n        let classes = 'delete'\n        if (this.state.hovering_symbol) {\n            classes += ' hovering'\n        }\n        if (is_aggregate) {\n            if (column_name === 'symbol' && this.props.row_name !== 'untagged') {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_tag(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        } else {\n            if (column_name === 'symbol' \n                && !this.props.special_classes.includes('index')\n                && !(this.props.row_name === 'cash' && isNaN(this.props.current_shares)) ) {\n                return (\n                    <button className={classes} onClick={ (e) => {this.props.on_delete_ticker(this.props.row_name)}}>x</button>\n                )\n            } else {\n                return\n            }\n        }\n    }\n\n    // the edit button is an extra affordance; clicking anywhere in the cell enters edit mode on this cell's value\n    populateEditButton(column_name, row_name) {\n        let classes = 'edit'\n        if (this.state.hovering_risk_factor) {\n            classes += ' hovering'\n        }\n        if ( column_name === 'risk_factor'\n            && row_name !== this.props.editing_row\n            && row_name !== 'cash'\n            && !this.props.is_aggregate \n            && !this.props.special_classes.includes('index') ) {\n                return (\n                    <button className={classes}>{String.fromCharCode(0x270e)}</button>\n                )\n        } else {\n            return\n        }\n    }\n\n    editRiskFactor(row_name) {\n        this.props.on_edit_cell(row_name)\n    }\n\n    styleCell(column_name) {\n        let classes = 'position-cell'\n        const row_name = this.props.row_name\n        const change_pct = this.props.change_pct\n        const current_shares = this.props.current_shares\n        const special_classes = this.props.special_classes\n        const performance = this.props.performance_numbers\n        const baseline = this.props.baseline\n\n        // hovering\n        if ( this.state.hovering_symbol\n            && column_name === 'symbol' \n            && !special_classes.includes('index') \n            && row_name !== 'untagged'\n            && !(row_name === 'cash' && isNaN(current_shares)) ) {\n            classes += ' hovering'\n        }\n        if ( this.state.hovering_risk_factor\n            && column_name === 'risk_factor' \n            && !special_classes.includes('index') \n            && !this.props.is_aggregate\n            && row_name !== 'cash' ) {\n            classes += ' hovering'\n        }\n\n        // whatif\n        if ( column_name.startsWith('whatif_') ) {\n            classes += ' clickable whatif'\n        }\n\n        // italics\n        if ( column_name === 'symbol' && row_name === 'untagged') {\n            classes += ' italics'\n        }\n\n        switch (column_name) {\n            case 'symbol':\n                classes += ' col-symbol'\n                break\n            case 'risk_factor':\n                classes += ' col-riskfactor'\n                break\n            case 'change_pct':\n                if (change_pct > 0) {\n                    classes += ' text-green'\n                } else if (change_pct < 0) {\n                    classes += ' text-red'\n                }\n                break\n            case 'short_change_pct':\n                if (performance.short_change_pct > 0 && performance.short_change_pct > baseline.short_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.short_change_pct < 0 && performance.short_change_pct < baseline.short_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 180\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            case 'medium_change_pct':\n                if (performance.medium_change_pct > 0 && performance.medium_change_pct > baseline.medium_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.medium_change_pct < 0 && performance.medium_change_pct < baseline.medium_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 365\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' :  ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            case 'long_change_pct':\n                if (performance.long_change_pct > 0 && performance.long_change_pct > baseline.long_change_pct) {\n                    classes += ' text-green'\n                } else if (performance.long_change_pct < 0 && performance.long_change_pct < baseline.long_change_pct) {\n                    classes += ' text-red'\n                }\n                if (this.props.style_realized_performance\n                    && row_name !== 'cash' \n                    && !special_classes.includes('index')) {\n                        if (isNaN(current_shares) \n                            || !current_shares \n                            || this.daysAgo(this.props.start_date) < 730\n                            ){\n                            classes += (this.props.show_only_achieved_performance) ? ' hide' : ' strikethrough'\n                        } else {\n                            classes += ' strong'\n                        }\n                }\n                break\n            default:\n                break\n        }\n        return classes\n    }\n\n    onNewValue(new_value) {\n        this.props.on_modify_risk_factor(this.props.row_name, new_value)\n    }\n\n    // prints the value that is (usually) explicitly passed in via props\n    // AND is responsible for calculating \"percent_value\", \"percent_basis\", and \"percent_profit\"\n    populateCellValue(column) {\n\n        if ( column.name === 'risk_factor'\n            && this.props.row_name === this.props.editing_row ) {\n            return (\n                <EditNumericCell \n                    original_value={this.props.current_edit_value} \n                    on_new_value={this.onNewValue} \n                    on_escape_key={this.props.on_escape_key}\n                />\n            )\n        }\n\n        let prefix = ''\n        let suffix = ''\n        let adjust_decimal = false\n        let num_decimals\n        let value, baseline_value\n        let performance_value = false\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const current_price = this.props.current_price\n        let current_shares = this.props.current_shares\n        const current_value = this.props.current_value\n        let value_at_risk = current_value * this.props.risk_factor\n        let basis = this.props.basis\n        let basis_risked = basis * this.props.risk_factor\n        let realized_gains = this.props.realized_gains\n        const whatif = this.props.whatif\n\n        let percent_value, percent_basis, percent_profit\n\n        // calculate percent_value\n        if (isNaN(current_value)) {\n            percent_value = 'n/a'\n        } else {\n            if (isNaN(total_value) || total_value === 0) {\n                percent_value = 'n/a'\n            } else {\n                percent_value = (current_value !== 'n/a') ? current_value / total_value * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_basis\n        if (isNaN(current_value)) {\n            percent_basis = 'n/a'\n        } else {\n            if (isNaN(total_basis) || total_basis === 0) {\n                percent_basis = 'n/a'\n            } else {\n                percent_basis = (current_value !== 'n/a') ? basis / total_basis * 100 : 'n/a'\n            }\n        }\n\n        // calculate percent_profit\n        if (isNaN(current_value) || isNaN(basis)) {\n            percent_profit = 'n/a'\n        } else {\n            if (current_shares === 0) {\n                percent_profit = 'n/a'\n            } else if (basis > current_value) {\n                percent_profit = 'losing'\n            } else if (basis < current_value) {\n                percent_profit = (1 - basis / current_value) * 100\n            } else {\n                percent_profit = 0\n            }\n        }\n\n        switch (column.type) {\n            case 'number':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                break\n            case 'currency':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                prefix = '$'\n                break\n            case 'percentage':\n                adjust_decimal = true\n                num_decimals = column.num_decimals\n                suffix = '%'\n                break\n            default:\n                break\n        }\n\n        switch (column.name) {\n            case 'symbol':\n                value = this.props.row_name\n                break\n            case 'start_date':\n                value = this.props.start_date\n                break\n            case 'current_shares':\n                value = current_shares\n                break\n            case 'whatif_current_shares':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_shares - ((current_shares === 'n/a') ? 0 : current_shares)\n                } else {\n                    value = whatif.current_shares\n                }\n                break\n            case 'current_price':\n                value = current_price\n                break\n            case 'current_value':\n                value = current_value\n                break\n            case 'whatif_current_value':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.current_value - ((current_value === 'n/a') ? 0 : current_value)\n                } else {\n                    value = whatif.current_value\n                }\n                break\n            case 'percent_value':\n                value = percent_value\n                break\n            case 'basis':\n                value = basis\n                break\n            case 'whatif_basis':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis - ((basis === 'n/a') ? 0 : basis)\n                } else {\n                    value = whatif.basis\n                }\n                break\n            case 'basis_risked':\n                value = basis_risked\n                break\n            case 'whatif_basis_risked':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.basis_risked - ((basis_risked === 'n/a') ? 0 : basis_risked)\n                } else {\n                    value = whatif.basis_risked\n                }\n                break\n            case 'percent_basis':\n                value = percent_basis\n                break\n            case 'percent_profit':\n                value = percent_profit\n                break\n            case 'realized_gains':\n                value = realized_gains\n                break\n            case 'change_pct':\n                value = this.props.change_pct\n                break\n            case 'risk_factor':\n                value = this.props.risk_factor\n                break\n            case 'value_at_risk':\n                value = value_at_risk\n                break\n            case 'whatif_value_at_risk':\n                if (whatif === null) {\n                    value = 'n/a'\n                } else if (this.props.whatif_format === 'deltas') {\n                    value = whatif.value_at_risk - ((value_at_risk === 'n/a') ? 0 : value_at_risk)\n                } else {\n                    value = whatif.value_at_risk\n                }\n                break\n            case 'volume':\n                value = this.props.volume\n                break\n            case 'dollar_volume':\n                value = this.props.current_price * this.props.volume\n                break\n            case 'short_change_pct':\n                value = this.props.performance_numbers.short_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.short_change_pct\n                break\n            case 'medium_change_pct':\n                value = this.props.performance_numbers.medium_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.medium_change_pct\n                break\n            case 'long_change_pct':\n                value = this.props.performance_numbers.long_change_pct\n                performance_value = true\n                baseline_value = this.props.baseline.long_change_pct\n                break\n            default:\n                break\n        }\n        if ( this.props.row_name === 'cash' || (this.props.is_aggregate && !this.props.membership_set.length) ) {\n            switch (column.name) {\n                case 'realized_gains': \n                case 'percent_profit': \n                case 'volume': \n                case 'dollar_volume': \n                case 'short_change_pct': \n                case 'medium_change_pct': \n                case 'long_change_pct': \n                    value = 'n/a'\n                    break\n                default:\n                    break\n            }\n        }\n\n        if (value === null || value === 'n/a') {\n            return '-'\n        } else if (column.type === 'string') {\n            return value\n        } else if (!isNaN(value)) {\n            if (adjust_decimal) {\n                if (column.hasOwnProperty('scaling_power')) {\n                    value *= Math.pow(10, column.scaling_power)\n                }\n                if (performance_value && this.props.baseline.name !== 'zero_pct_gain') {\n                    value = value - baseline_value\n                }\n                if (value.toString().indexOf('.')) {\n                    value = (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals)\n                }\n            }\n            if (value >= 0) {\n                prefix = (column.name.startsWith('whatif_') && this.props.whatif_format === 'deltas') ? '+' + prefix : prefix\n                return value = prefix + this.numberWithCommas(value) + suffix\n            } else {\n                return value = '-' + prefix + this.numberWithCommas(Math.abs(value)) + suffix\n            }\n        } else if (column.hasOwnProperty('passthrough_strings') && column['passthrough_strings']) {\n            return value\n        } else if (column.type === 'number' || column.type === 'percentage' || column.type === 'currency') {\n            return '-'\n        } else {\n            return '??'\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    daysAgo(date_str) { // yyyy-mm-dd\n        let now = new Date()\n        let then = new Date(date_str)\n        let diff = Math.round((now - then) / 1000 / 60 / 60 / 24)\n        if (date_str === 'n/a') {\n            return -1\n        } else {\n            return diff\n        }\n    }\n\n    render() {\n        const is_aggr = this.props.is_aggregate\n\n        let row_classes = 'position-row' \n        this.props.special_classes.forEach(function(special_class) {\n            if (special_class === 'index') {\n                row_classes += ' position-is-index'\n            }\n            if (special_class === 'cash') {\n                row_classes += ' position-is-cash'\n            }\n            if (special_class === 'aggregate') {\n                row_classes += ' position-is-aggregate'\n            }\n        })\n\n        let member_count = this.props.membership_set.length\n\n        let self = this\n        return (\n            <tr className={ row_classes }>\n                <td>\n                    { member_count ? this.props.membership_set.sort().map(symbol => this.populateMemberButton(symbol)) : (this.props.special_classes.length ? '' : '-') }\n                </td>\n                { this.props.columns.map(function(column) {\n                    if (column.name === 'symbol') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onMouseEnter={self.toggleHoverSymbol} onMouseLeave={self.toggleHoverSymbol}>{ self.populateCellValue(column) }{ is_aggr && member_count ? '('+member_count+')' : '' }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else if (column.name === 'risk_factor') {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (e)=>self.editRiskFactor(self.props.row_name) } onMouseEnter={self.toggleHoverRiskFactor} onMouseLeave={self.toggleHoverRiskFactor}>{ self.populateCellValue(column) }{ self.populateEditButton(column.name, self.props.row_name) }</td>\n                        )\n                    } else if (column.name.startsWith('whatif_')) {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) } onClick={ (column.name.startsWith('whatif_')) ? (e)=>self.onWhatifCellClick() : undefined }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    } else {\n                        return (\n                            <td key={column.name} className={ self.styleCell(column.name) }>{ self.populateCellValue(column) }{ self.populateDeleteButton(column.name, is_aggr) }</td>\n                        )\n                    }\n                })}\n            </tr>\n        )\n    }\n\n}\n\nGridRow.defaultProps = {\n    performance_numbers: {\n        short_change_pct: 0,\n        medium_change_pct: 0,\n        long_change_pct: 0\n    }\n}\n\nGridRow.propTypes = {\n    is_aggregate: PropTypes.bool,\n    columns: PropTypes.array,\n    row_name: PropTypes.string,\n    membership_set: PropTypes.array,\n    special_classes: PropTypes.array,\n    start_date: PropTypes.string,\n    current_shares: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_price: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    current_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    change_pct: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    volume: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    basis: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    realized_gains: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    risk_factor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    performance_numbers: PropTypes.object,\n    show_only_achieved_performance: PropTypes.bool,\n    baseline: PropTypes.object,\n    style_realized_performance: PropTypes.bool,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    whatif: PropTypes.object,\n    whatif_format: PropTypes.string,\n    on_change_whatif_format: PropTypes.func,\n    on_remove_from_tag: PropTypes.func,\n    on_delete_ticker: PropTypes.func,\n    on_delete_tag: PropTypes.func,\n    editing_row: PropTypes.string,\n    current_edit_value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string\n      ]),\n    on_edit_cell: PropTypes.func,\n    on_modify_risk_factor: PropTypes.func,\n    on_escape_key: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class GridRowTotals extends React.Component {\n\n    render() {\n\n        const total_value = this.props.total_value\n        const total_basis = this.props.total_basis\n        const total_performance = this.props.total_performance\n\n        function numberWithCommas(x) {\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        function populateTotalsCellValue(column) {\n            let value\n            switch (column.name) {\n                case 'current_value':\n                    value = '$' + numberWithCommas(Math.round(total_value))\n                    break\n                case 'percent_value':\n                    value = (total_value) ? '100%' : 'n/a'\n                    break\n                case 'basis':\n                    value = '$' + numberWithCommas(Math.round(total_basis))\n                    break\n                case 'percent_basis':\n                    value = (total_basis) ? '100%' : 'n/a'\n                    break\n                case 'short_change_pct':\n                    value = (Math.round(10 * total_performance.short_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'medium_change_pct':\n                    value = (Math.round(10 * total_performance.medium_change_pct) / 10).toFixed(1) + '%'\n                    break\n                case 'long_change_pct':\n                    value = (Math.round(10 * total_performance.long_change_pct) / 10).toFixed(1) + '%'\n                    break\n                default:\n                    break\n            }\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else {\n                return value\n            }\n        }\n\n        function styleTotalsCell(column) {\n            let classes = ''\n            switch (column) {\n                case 'current_value':\n                case 'percent_value':\n                case 'basis':\n                case 'percent_basis':\n                case 'short_change_pct':\n                case 'medium_change_pct':\n                case 'long_change_pct':\n                    classes += 'totals'\n                    break\n                default:\n                    classes = ''\n                    break\n            }\n            return classes\n        }\n\n        return (\n            <tr>\n                <td></td>\n                { this.props.columns.map(column => (\n                <td key={column.name} className={ styleTotalsCell(column.name) }>{ populateTotalsCellValue(column) }</td>\n                ))}\n            </tr>\n        )\n    }\n\n}\n\nGridRowTotals.propTypes = {\n    columns: PropTypes.array,\n    total_value: PropTypes.number,\n    total_basis: PropTypes.number,\n    total_performance: PropTypes.object,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTicker extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tickers_string: '',\n            add_to_tag: 'untagged',\n        }\n        this.handleTickersChange = this.handleTickersChange.bind(this)\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTickers = this.validateTickers.bind(this)\n    }\n\n    handleTickersChange(event) {\n        this.setState({ user_tickers_string: event.target.value })\n    }\n\n    handleTagChange(event) {\n        this.setState({ add_to_tag: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tickers_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.add_to_tag\n        let user_tickers = String(this.state.user_tickers_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toUpperCase())\n            .map(str => str.replace(/[^A-Z]/g, \"\"))\n        this.validateTickers(user_tag, Array.from(new Set(user_tickers)))\n    }\n\n    validateTickers(tag, tickers) {\n        let tickers_to_add = []\n        let new_status_messages = []\n        let self = this\n        const create_message = this.props.create_message\n        tickers.forEach(function(ticker) {\n            // ticker does not exist\n            if (!self.props.all_stocks.includes(ticker)) {\n                new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' does not exist.'))\n\n            // ticker is already in the target tag\n            } else if (self.props.all_tags[tag].includes(ticker)) {\n                if (tag === 'untagged') {\n                    new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' has already been added.'))\n                } else {\n                    new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' has already been added to tag \"'+ tag +'\".'))\n                }\n\n            // ticker is being added to a tag that it is not already in\n            } else {\n                let tagged_tickers = []\n                Object.keys(self.props.all_tags).forEach(function(tag) {\n                    if (tag !== 'untagged') {\n                        tagged_tickers = tagged_tickers.concat(self.props.all_tags[tag])\n                    }\n                })\n                if (tag === 'untagged' && tagged_tickers.includes(ticker)) {\n                    new_status_messages.push(create_message('ERROR: Ticker ' + ticker + ' has already been added to another named tag.'))\n                } else {\n                    if (tag === 'untagged') {\n                        new_status_messages.push(create_message('Ticker ' + ticker + ' has now been added.'))\n                    } else {\n                        new_status_messages.push(create_message('Ticker ' + ticker + ' has now been added to tag \"' + tag + '\".'))\n                    }\n                    tickers_to_add.push(ticker)\n                }\n            }\n        })\n        this.props.on_new_tickers(tag, tickers_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-ticker\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Ticker(s):</label>\n                    <input value={this.state.user_tickers_string} onChange={this.handleTickersChange} placeholder=\"Dow30 tickers only\" required />\n                    <label>\n                        Add to Tag:\n                        <select value={this.state.add_to_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(no tag)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Ticker(s)\" disabled={this.state.user_tickers_string===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTicker.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_tickers: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_tags_string: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTags = this.validateTags.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ user_tags_string: event.target.value })\n    }\n\n    handleReset(event) {\n        this.setState({ user_tags_string: \"\" })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tags = String(this.state.user_tags_string)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.toLowerCase())\n            .map(str => str.replace(/[^a-z0-9:()-_!?]/g, \"\"))\n        this.validateTags(Array.from(new Set(user_tags)))\n    }\n\n    validateTags(tags) {\n        let tags_to_add = []\n        let new_status_messages = []\n        let self = this\n        tags.forEach(function(tag) {\n            if (self.props.all_tags.hasOwnProperty(tag)) {\n                new_status_messages.push(self.props.create_message('ERROR: Tag \"' + tag + '\" has already been created.'))\n            } else {\n                new_status_messages.push(self.props.create_message('Tag \"' + tag + '\" has now been created.'))\n                tags_to_add.push(tag)\n            }\n        })\n        this.props.on_new_tags(tags_to_add)\n        this.props.on_new_messages(new_status_messages)\n        this.handleReset()\n    }\n\n    render() {\n        return (\n            <section id=\"add-tag\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>New Tag Name(s):</label>\n                    <input value={this.state.user_tags_string} onChange={this.handleChange} required />\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Create Tag(s)\" disabled={this.state.user_tags_string===''} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class AddTransaction extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            transaction_date: '',\n            transaction: '',\n            user_cash_action: 'add',\n            user_cash_amount: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.validateTransaction = this.validateTransaction.bind(this)\n        this.handleCashChange = this.handleCashChange.bind(this)\n        this.handleCashReset = this.handleCashReset.bind(this)\n        this.handleActionChange = this.handleActionChange.bind(this)\n        this.handleCashSubmit = this.handleCashSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n\n    handleActionChange(event) {\n        this.setState({ user_cash_action: event.target.value })\n    }\n\n    handleCashChange(event) {\n        this.setState({ user_cash_amount: event.target.value })\n    }\n\n    handleCashReset(event) {\n        this.setState({ user_cash_amount: \"\" })\n    }\n\n    handleCashSubmit(event) {\n        event.preventDefault()\n        let new_status_messages = []\n        let user_cash_action = this.state.user_cash_action\n        let user_date = this.state.transaction_date\n        let user_cash_amount = parseFloat(this.state.user_cash_amount.trim().replace(/\\$/g, \"\"))\n        if (isNaN(user_cash_amount)) {\n            new_status_messages.push(this.props.create_message('ERROR: Cash amount \"' + this.state.user_cash_amount + '\" is not in currency format.'))\n        } else {\n            let total = parseFloat((Math.round(user_cash_amount * 100) / 100).toFixed(2));\n            let valid_transaction_summary = user_date + ': ' + user_cash_action + ' $' + total.toFixed(2) + ' cash'\n            new_status_messages.push(this.props.create_message('Transaction \"' + valid_transaction_summary + '\" has now been recorded.'))\n            this.props.on_new_cash(valid_transaction_summary)\n            this.handleCashReset()\n        }\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_transaction = String(this.state.transaction)\n            .split(\" \")\n            .map(str => str.trim())\n            .map(str => str.replace(/[^A-Za-z0-9$.]/g, \"\"))\n        this.validateTransaction(user_transaction)\n    }\n\n    validateTransaction(transaction) {\n        let new_status_messages = []\n        const create_message = this.props.create_message\n\n        if (transaction.length < 4) {\n\n            new_status_messages.push(create_message('ERROR: Transaction \"' + transaction + '\" must be 4 terms.'))\n\n        } else {\n\n            let action = transaction[0].toLowerCase()\n            if (action !== 'buy' && action !== 'sell') {\n                new_status_messages.push(create_message('ERROR: Action \"' + transaction[0] + '\" must be either \"buy\" or \"sell\".'))\n            }\n\n            let num_shares = parseInt(transaction[1])\n            if (isNaN(num_shares) || num_shares < 1) {\n                new_status_messages.push(create_message('ERROR: Share count \"' + transaction[1] + '\" must be a positive integer.'))\n            }\n\n            let ticker = transaction[2].toUpperCase().replace(/[^A-Z]/g, \"\")\n            if (ticker !== transaction[2].toUpperCase() || !this.props.all_stocks.includes(ticker.toUpperCase())) {\n                new_status_messages.push(create_message('ERROR: Ticker \"' + transaction[2] + '\" does not exist.'))\n            }\n\n            let total = parseFloat(transaction[3].replace(/[^0-9.]/g, \"\"))\n            if (isNaN(total) || total < 0) {\n                new_status_messages.push(create_message('ERROR: Total amount \"' + transaction[3] + '\" must be a non-negative number.'))\n            } else {\n                total = parseFloat((Math.round(total * 100) / 100).toFixed(2));\n            }\n\n            // this transaction is valid\n            if (!new_status_messages.length) {\n\n                // also print the \"ticker has now been added\" message, if needed\n                let tagged_tickers = []\n                let self = this\n                Object.keys(this.props.all_tags).forEach(function(tag) {\n                    self.props.all_tags[tag].forEach(function(ticker) {\n                        if (!tagged_tickers.includes(ticker)) {\n                            tagged_tickers.push(ticker)\n                        }\n                    })\n                })\n                if (tagged_tickers.includes(transaction[2].toUpperCase())) {\n                    new_status_messages.push(create_message('Ticker ' + transaction[2].toUpperCase() + ' has now been added.'))\n                }\n\n                let valid_transaction_summary = this.state.transaction_date + ': ' + action + ' ' + num_shares + ' ' + ticker + ' $' + total.toFixed(2)\n                new_status_messages.push(create_message('Transaction \"' + valid_transaction_summary + '\" has now been recorded.'))\n                this.props.on_new_transaction(valid_transaction_summary)\n            }\n\n        }\n\n        // send all of the messages to print\n        this.props.on_new_messages(new_status_messages)\n    }\n\n    render() {\n        return (\n            <section id=\"add-transaction\">\n                <form>\n                    <label>Transaction Date:</label>\n                    <input name=\"transaction_date\" value={this.state.transaction_date} onChange={this.handleChange} type=\"date\" size=\"10\" />\n                </form>\n                <form onSubmit={this.handleSubmit}>\n                    <label>New Transaction:</label>\n\n                    <input name=\"transaction\" value={this.state.transaction} onChange={this.handleChange} size=\"25\" placeholder=\"buy 100 CSCO $2200.32\" required />\n\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Add Transaction\" disabled={this.state.transaction==='' || this.state.transaction_date===''} />\n                    </section>\n                </form>\n                <form onSubmit={this.handleCashSubmit}>\n                    <label>Add/Remove Cash:\n                        <select value={this.state.action} onChange={this.handleActionChange}>\n                            <option value=\"add\">add</option>\n                            <option value=\"remove\">remove</option>\n                        </select>\n                        <input value={this.state.user_cash_amount} onChange={this.handleCashChange} size=\"15\" placeholder=\"$1000\" required />\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Adjust Cash\" disabled={this.state.user_cash_amount==='' || this.state.transaction_date===''}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nAddTransaction.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class TransactionLog extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.exportRef = React.createRef()\n        this.importRef = React.createRef()\n        this.state = {\n            filter_str: '',\n            file: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.onExportButton = this.onExportButton.bind(this)\n        this.onHiddenImportChange = this.onHiddenImportChange.bind(this)\n    }\n\n    handleChange(event) {\n        const target = event.target\n        const new_value = target.value\n        const name = target.name\n        this.setState({ [name]: new_value })\n    }\n        \n    onExportButton() {\n\n        // prepare the data\n        let all_transactions = {\n            transactions: JSON.parse(JSON.stringify(this.props.all_transactions))\n        }\n        var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(all_transactions));\n\n        // create the download link\n        var a = document.createElement('a')\n        a.href = 'data:' + data\n        a.download = 'transactions.json'\n        a.innerHTML = 'download'\n\n        // attach the download link, trigger it, and then remove it from the DOM\n        var container = this.exportRef.current\n        container.appendChild(a)\n        a.click()\n        a.remove()\n    }\n\n    onHiddenImportChange(files) {\n        if (files[0]) {\n            let self = this\n            let reader = new FileReader();\n            reader.readAsText(files[0], \"UTF-8\");\n            reader.onload = function (evt) {\n                let file_contents = JSON.parse(evt.target.result)\n                self.props.on_import_transactions(file_contents.transactions)\n            }\n        }\n    }\n\n    render() {\n        let sorted_filtered_transactions = this.props.all_transactions\n            .filter( transaction => transaction.summary.toLowerCase().includes(this.state.filter_str.toLowerCase()) )\n            .sort( function(a,b) {\n                if (a.summary < b.summary){\n                    return -1\n                } else if (a.summary > b.summary) {\n                    return 1\n                } else {\n                    return 0\n                }\n            })\n        return (\n            <section id=\"transaction-log\">\n                <section id=\"transaction-log-controls\">\n                    <form>\n                        <label>Filter:</label>\n                        <input name=\"filter_str\" value={this.state.filter_str} onChange={this.handleChange} size=\"15\" />\n\n                        <button className=\"btn btn-sm btn-primary\" onClick={this.onExportButton} disabled={!this.props.all_transactions.length}>export</button>\n                        <div ref={this.exportRef}></div>\n\n                        <label className=\"btn btn-sm btn-primary\">\n                        <input type=\"file\" ref={this.importRef} onChange={ (e) => this.onHiddenImportChange(e.target.files) } accept=\"application/json\" style={{width: 0, visibility: \"hidden\"}} />\n                        import\n                        </label>\n                    </form>\n                </section>\n                <section id=\"transactions\">\n                    {sorted_filtered_transactions.map( transaction => (\n                        <p key={transaction.modified_at} className=\"transaction\" onClick={ (e)=>this.props.on_delete_transaction(transaction.modified_at)}>{transaction.summary}</p>\n                    ))}\n                </section>\n            </section>\n        )\n    }\n}\n\nTransactionLog.propTypes = {\n    all_transactions: PropTypes.array.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class DeleteTag extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            delete_tag: 'untagged',\n        }\n        this.handleTagChange = this.handleTagChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleTagChange(event) {\n        this.setState({ delete_tag: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_tag = this.state.delete_tag\n        let new_status_messages = []\n\n        if (user_tag !== 'untagged') {\n            new_status_messages.push(this.props.create_message('Tag \"' + user_tag + '\" has now been deleted.'))\n            this.props.on_new_messages(new_status_messages)\n            this.props.on_delete_tag(user_tag)\n            this.setState({ delete_tag: 'untagged' })\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"delete-tag\">\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Delete Tag:\n                        <select value={this.state.delete_tag} onChange={this.handleTagChange}>\n                            <option key=\"untagged\" value=\"untagged\">(none)</option>\n                            {Object.keys(this.props.all_tags).sort().filter(tag_name => tag_name !== 'untagged').map(tag_name => (\n                            <option key={tag_name} value={tag_name}>{tag_name}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"Delete Tag\" disabled={this.state.delete_tag==='untagged'} />\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nDeleteTag.propTypes = {\n    all_tags: PropTypes.object.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    on_new_messages: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class StatusMessages extends React.Component {\n\n    render() {\n        return (\n            <div id=\"status-messages-wrapper\">\n                { this.props.all_status_messages.length ? 'History:' : '' }\n                <div id=\"status-messages\">\n                { this.props.all_status_messages\n                    .map(\n                        (message, i) => {\n                            return (message.content.toLowerCase().startsWith(\"error\"))\n                            ? <p key={i + message.modified_at} className=\"message error\">{message.content}</p>\n                            : <p key={i + message.modified_at} className=\"message\">{message.content}</p>\n                        }\n                    )\n                }\n                </div>\n            </div>\n        )\n    }\n}\n\nStatusMessages.propTypes = {\n    all_status_messages: PropTypes.array.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class WhatIf extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            balanceable_value: 0,\n            balance_target_set: 'my_holdings',\n            balance_target_column: 'current_value',\n            sell_all_of: ['sell_none'],\n            cash_treatment: 'ignore',\n            cash_remaining: '$0',\n            cash_valid: true\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.isDisabled = this.isDisabled.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    componentDidMount() {\n        let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, this.state.balance_target_column))\n        this.setState({ balanceable_value: new_balanceable_value })\n\n        const stored_balance_target_set = JSON.parse(localStorage.getItem(\"balance_target_set\"))\n        if (stored_balance_target_set !== null) {\n            this.setState({ balance_target_set: stored_balance_target_set })\n        }\n\n        const stored_balance_target_column = JSON.parse(localStorage.getItem(\"balance_target_column\"))\n        if (stored_balance_target_column !== null) {\n            this.setState({ balance_target_column: stored_balance_target_column })\n        }\n\n        const stored_cash_treatment = JSON.parse(localStorage.getItem(\"cash_treatment\"))\n        if (stored_cash_treatment !== null) {\n            this.setState({ cash_treatment: stored_cash_treatment })\n        }\n\n        const stored_cash_remaining = JSON.parse(localStorage.getItem(\"cash_remaining\"))\n        if (stored_cash_remaining !== null) {\n            this.setState({ cash_remaining: stored_cash_remaining })\n        }\n    }\n\n    handleChange(event) {\n\n        let {name, value, selectedOptions } = event.target\n\n        // when the balance target set input changes, update the maximum value\n        if (name === 'balance_target_set') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(value, this.state.balance_target_column))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the balance target column input changes, update the maximum value\n        if (name === 'balance_target_column') {\n            let new_balanceable_value = Math.round(this.props.get_balanceable_value(this.state.balance_target_set, value))\n            this.setState({ balanceable_value: new_balanceable_value })\n        }\n\n        // when the cash remaining input changes, validate the user's value\n        if (name === 'cash_remaining') {\n            let user_whole_dollars_string = value.replace('$','').split('.')[0]\n            let user_whole_dollars = parseInt(user_whole_dollars_string)\n            let valid_whole_dollars_string = value.replace(/[^0-9.,]/g,'').split('.')[0]\n            if (valid_whole_dollars_string.length \n                && user_whole_dollars_string === valid_whole_dollars_string \n                && user_whole_dollars >= 0\n                && user_whole_dollars <= this.state.balanceable_value) { \n                this.setState({ cash_valid: true })\n            } else {\n                this.setState({ cash_valid: false })\n            }\n        }\n\n        // update local storage\n        localStorage.setItem(name, JSON.stringify(value))\n\n        // mirror the input in state, since this is a (React) controlled input\n        if (name !== 'sell_all_of') {\n            this.setState({ [name]: value })\n        } else {\n            let multiple_tickers = Array.from(selectedOptions, (item) => item.value)\n            if (multiple_tickers.includes('sell_none')) {\n                multiple_tickers = ['sell_none']\n            }\n            this.setState({ sell_all_of: multiple_tickers })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let user_remaining_cash = this.state.cash_remaining.split('.')[0].replace(/[^0-9]/g, \"\")\n        let remaining_cash = (this.state.cash_treatment === 'ignore') ? null : parseInt(user_remaining_cash)\n        this.props.on_whatif_submit(this.state.balance_target_set, this.state.sell_all_of, this.state.balance_target_column, remaining_cash)\n    }\n\n    isDisabled() {\n\n        if (this.state.cash_treatment === 'include' && !this.state.cash_valid) {\n            return true\n        } else if (this.state.balance_target_set === 'my_holdings') {\n            return (this.props.show_holdings) ? false : true\n        } else if (this.state.balance_target_set === 'untagged') {\n            return (this.props.show_untagged) ? false : true\n        } else {\n            return (this.props.show_tagged) ? false : true\n        }\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        let excludable_tickers = []\n        if (this.state.balance_target_set === \"my_holdings\") {\n            excludable_tickers = Object.keys(this.props.all_positions).filter( ticker => ticker !== 'cash' && this.props.all_positions[ticker].current_shares)\n        } else if (this.props.all_tags.hasOwnProperty(this.state.balance_target_set)) {\n            excludable_tickers = this.props.all_tags[this.state.balance_target_set].filter( ticker => this.props.all_positions[ticker] && this.props.all_positions[ticker].current_shares)\n        }\n        return (\n            <section id=\"what-if\">\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <div>Balance&nbsp;\n                        <select name=\"balance_target_set\" value={this.state.balance_target_set} onChange={this.handleChange}>\n                            <option value=\"my_holdings\">my holdings ({Object.keys(this.props.all_positions).filter(position => position !== 'cash').length})</option>\n                            <option value=\"untagged\">untagged tickers ({this.props.all_tags.untagged.length})</option>\n                            {Object.entries(this.props.all_tags).filter(entry => entry[1].length).map(entry => entry[0]).sort().filter(tag => tag !== 'untagged').map(tag => \n                                <option key={tag} value={tag}>tag: {tag} ({this.props.all_tags[tag].length})</option>\n                            )}\n                        </select>\n                        &nbsp;into&nbsp; \n                        <select name=\"balance_target_column\" value={this.state.balance_target_column} onChange={this.handleChange}>\n                            <option value=\"current_value\">equal values</option>\n                            <option value=\"value_at_risk\">equal values, risk adjusted</option>\n                            <option value=\"basis\">equal bases</option>\n                            <option value=\"basis_risked\">equal bases, risk adjusted</option>\n                        </select>\n                        , but sell all of&nbsp;\n                        <select name=\"sell_all_of\" value={this.state.sell_all_of} multiple={true} onChange={this.handleChange}>\n                            <option value=\"sell_none\">(none. keep all.)</option>\n                            {excludable_tickers.sort().map(ticker => \n                                <option key={ticker} value={ticker}> {ticker} </option>\n                            )}\n                        </select>\n                        &nbsp;...\n                    </div>\n                    <label htmlFor=\"ignore\"><input type=\"radio\" id=\"ignore\" name=\"cash_treatment\" value=\"ignore\" selected onChange={this.handleChange} defaultChecked />ignoring my cash balance</label>\n                    <label htmlFor=\"include\"><input type=\"radio\" id=\"include\" name=\"cash_treatment\" value=\"include\" onChange={this.handleChange} disabled={!this.props.show_cash} />using my cash balance, and leaving at least\n                    <input type=\"text\" id=\"cash_remaining\" name=\"cash_remaining\" size=\"12\" onChange={this.handleChange} value={this.state.cash_remaining} placeholder=\"$0\"></input> cash remaining (max: ${this.numberWithCommas(this.state.balanceable_value)})</label>\n                    <section className=\"buttonrow\">\n                        <input className=\"btn btn-sm btn-primary\" type=\"submit\" value=\"What If?\" disabled={this.isDisabled()}/>\n                    </section>\n                </form>\n            </section>\n        )\n    }\n}\n\nWhatIf.propTypes = {\n    all_current_quotes: PropTypes.object,\n    all_tags: PropTypes.object,\n    all_positions: PropTypes.object,\n    get_balanceable_value: PropTypes.func,\n    show_holdings: PropTypes.bool,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AddTicker } from './AddTicker'\nimport { AddTag } from './AddTag'\nimport { AddTransaction } from './AddTransaction'\nimport { TransactionLog } from './TransactionLog'\nimport { DeleteTag } from './DeleteTag'\nimport { StatusMessages } from './StatusMessages'\nimport { WhatIf } from './WhatIf'\n\n\nexport class InputForms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            which_inputs: \"tickers\" // tickers | tags | transactions | logs | what-ifs\n        }\n        this.onWhichInputs = this.onWhichInputs.bind(this)\n    }\n\n    componentDidMount() {\n        const stored_which_inputs = JSON.parse(localStorage.getItem(\"which_inputs\"))\n        if (stored_which_inputs !== null) {\n            this.setState({ which_inputs: stored_which_inputs })\n        }\n    }\n\n    onWhichInputs(new_which_inputs) {\n        localStorage.setItem('which_inputs', JSON.stringify(new_which_inputs))\n        this.setState({ which_inputs: new_which_inputs })\n    }\n\n    render() {\n        return (\n            <div id=\"input-forms\">\n                <section id=\"input-form-selectors\">\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tickers\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tickers')}>Tickers</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"tags\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('tags')}>Tags</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"transactions\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('transactions')}>Transactions</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"what-ifs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('what-ifs')}>What If?</span>\n                    <span className={\"input-form-selector\" + (this.state.which_inputs===\"logs\" ? \" selected\" : \"\") } onClick={ (e)=>this.onWhichInputs('logs')}>Logs</span>\n                </section>\n                <section id=\"input-form-forms\">\n                    {this.state.which_inputs === 'tickers' && (\n                        <React.Fragment>\n                        <AddTicker\n                            all_stocks={this.props.all_stocks}\n                            all_tags={this.props.all_tags}\n                            on_new_tickers={this.props.on_new_tickers}\n                            create_message={this.props.create_message}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'tags' && (\n                        <React.Fragment>\n                        <AddTag\n                            all_tags={this.props.all_tags}\n                            on_new_tags={this.props.on_new_tags}\n                            create_message={this.props.create_message}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        <DeleteTag\n                            all_tags={this.props.all_tags}\n                            on_delete_tag={this.props.on_delete_tag}\n                            create_message={this.props.create_message}\n                            on_new_messages={this.props.on_new_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'transactions' && (\n                    <React.Fragment>\n                        <div className=\"content-wrapper\">\n                            <div className=\"content-half\">\n                                <AddTransaction\n                                    all_stocks={this.props.all_stocks}\n                                    all_tags={this.props.all_tags}\n                                    on_new_transaction={this.props.on_new_transaction}\n                                    on_new_cash={this.props.on_new_cash}\n                                    create_message={this.props.create_message}\n                                    on_new_messages={this.props.on_new_messages}\n                                />\n                            </div>\n                            <div className=\"content-half\">\n                                <TransactionLog\n                                    all_transactions={this.props.all_transactions}\n                                    on_delete_transaction={this.props.on_delete_transaction}\n                                    on_import_transactions={this.props.on_import_transactions}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'what-ifs' && (\n                        <React.Fragment>\n                        <WhatIf\n                            all_current_quotes={this.props.all_current_quotes}\n                            all_positions={this.props.all_positions}\n                            all_tags={this.props.all_tags}\n                            get_balanceable_value={this.props.get_balanceable_value}\n                            show_holdings={this.props.show_holdings}\n                            show_tagged={this.props.show_tagged}\n                            show_untagged={this.props.show_untagged}\n                            show_cash={this.props.show_cash}\n                            on_whatif_submit={this.props.on_whatif_submit}\n                        />\n                        </React.Fragment>\n                    )}\n                    {this.state.which_inputs === 'logs' && (\n                        <React.Fragment>\n                        <StatusMessages\n                            all_status_messages={this.props.all_status_messages}\n                        />\n                        </React.Fragment>\n                    )}\n                </section>\n            </div>\n        )\n    }\n}\n\nInputForms.propTypes = {\n    all_stocks: PropTypes.array.isRequired,\n    all_tags: PropTypes.object.isRequired,\n    all_current_quotes: PropTypes.object,\n    all_positions: PropTypes.object,\n    all_transactions: PropTypes.array,\n    show_tagged: PropTypes.bool,\n    show_untagged: PropTypes.bool,\n    show_cash: PropTypes.bool,\n    get_balanceable_value: PropTypes.func,\n    on_new_tickers: PropTypes.func.isRequired,\n    on_new_cash: PropTypes.func.isRequired,\n    on_new_tags: PropTypes.func.isRequired,\n    on_delete_tag: PropTypes.func.isRequired,\n    on_new_transaction: PropTypes.func.isRequired,\n    on_delete_transaction: PropTypes.func.isRequired,\n    on_import_transactions: PropTypes.func.isRequired,\n    create_message: PropTypes.func.isRequired,\n    all_status_messages: PropTypes.array.isRequired,\n    on_new_messages: PropTypes.func.isRequired,\n    on_whatif_submit: PropTypes.func\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { GridHeaderRow } from './components/GridHeaderRow'\nimport { GridRow } from './components/GridRow'\nimport { GridRowTotals } from './components/GridRowTotals'\nimport { InputForms } from './components/InputForms'\nimport { Popover } from 'react-bootstrap'\nimport { OverlayTrigger } from 'react-bootstrap'\n\n\nconst all_columns = [\n    {\n        name: 'symbol',\n        display_name: 'Symbol',\n        type: 'string'\n    },\n    {\n        name: 'current_shares',\n        display_name: 'Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_shares',\n        display_name: 'What-If Shares',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'current_price',\n        display_name: 'Price',\n        type: 'currency',\n        num_decimals: 2\n    },\n    // this column is too short-term ;-P\n    // {\n    //     name: 'change_pct',\n    //     display_name: 'Change',\n    //     type: 'percentage',\n    //     num_decimals: 2\n    // },\n    {\n        name: 'current_value',\n        display_name: 'Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_current_value',\n        display_name: 'What-If Value',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_value',\n        display_name: 'Pct of Total Value',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'basis',\n        display_name: 'Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_basis',\n        display_name: 'What-If Basis',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'percent_basis',\n        display_name: 'Pct of Total Basis',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'percent_profit',\n        display_name: 'Pct Profit',\n        type: 'percentage',\n        passthrough_strings: true,\n        num_decimals: 1\n    },\n    {\n        name: 'realized_gains',\n        display_name: 'Realized',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'risk_factor',\n        display_name: 'Risk Factor',\n        type: 'number',\n        num_decimals: 2\n    },\n    {\n        name: 'value_at_risk',\n        display_name: 'Value At Risk',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_value_at_risk',\n        display_name: 'What-If Value At Risk',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'basis_risked',\n        display_name: 'Basis Risked',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'whatif_basis_risked',\n        display_name: 'What-If Basis Risked',\n        type: 'currency',\n        num_decimals: 0\n    },\n    {\n        name: 'volume',\n        display_name: 'Volume',\n        type: 'number',\n        num_decimals: 0\n    },\n    {\n        name: 'dollar_volume',\n        display_name: 'Dollar Vol (M)',\n        type: 'currency',\n        scaling_power: -6,\n        num_decimals: 0\n    },\n    {\n        name: 'start_date',\n        display_name: 'Started',\n        type: 'string'\n    },\n    {\n        name: 'short_change_pct',\n        display_name: '6-month',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'medium_change_pct',\n        display_name: '1-year',\n        type: 'percentage',\n        num_decimals: 1\n    },\n    {\n        name: 'long_change_pct',\n        display_name: '2-year',\n        type: 'percentage',\n        num_decimals: 1\n    }\n]\n\nconst default_shown_columns = ['symbol', 'current_shares', 'current_value', 'percent_value', 'percent_basis', 'percent_profit', 'short_change_pct', 'medium_change_pct', 'long_change_pct']\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [],\n            allCurrentQuotes: {},\n            allMonthlyQuotes: {},\n            allPositions: {},\n            allTransactions: [],\n            allTags: {\n                'untagged': []\n            },\n            allPerformanceNumbers: {},\n            allRisk: {},\n            allWhatifs: {},\n\n            whatif_format: 'deltas', // deltas | new_values\n            balance_target_set: 'my_holdings',\n            balance_target_column: '',\n            remaining_cash: null,\n            last_status_messages: [],\n            all_status_messages: [],\n            baseline: {\n                name: 'zero_pct_gain',\n                short_change_pct: 0,\n                medium_change_pct: 0,\n                long_change_pct: 0,\n            },\n            editing_row: null,\n\n            aggrPerformance: {},\n            aggrBasis: {},\n            aggrRealized: {},\n            aggrTotalValue: {},\n\n            show_holdings: true,\n            show_tagged: true,\n            show_untagged: true,\n            show_index: false,\n            show_cash: false,\n            show_aggregates: true,\n            show_only_achieved_performance: false,\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            shown_columns: [],\n\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getTransactionById = this.getTransactionById.bind(this)\n        this.getTransactionsByTicker = this.getTransactionsByTicker.bind(this)\n        this.getPositionFromSingleTickerTransactions = this.getPositionFromSingleTickerTransactions.bind(this)\n        this.getPositionFromCashTransactions = this.getPositionFromCashTransactions.bind(this)\n        this.calculateAggrPositionInfo = this.calculateAggrPositionInfo.bind(this)\n        this.calculateAggrPerformance = this.calculateAggrPerformance.bind(this)\n        this.populateSymbolCount = this.populateSymbolCount.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n        this.onShowInputChange = this.onShowInputChange.bind(this)\n        this.onChangeWhatifFormat = this.onChangeWhatifFormat.bind(this)\n        this.onChangeSort = this.onChangeSort.bind(this)\n        this.showColumns = this.showColumns.bind(this)\n        this.createMessage = this.createMessage.bind(this)\n        this.onToggleShowColumn = this.onToggleShowColumn.bind(this)\n        this.onNewTransaction = this.onNewTransaction.bind(this)\n        this.onImportTransactions = this.onImportTransactions.bind(this)\n        this.onNewCash = this.onNewCash.bind(this)\n        this.onNewTags = this.onNewTags.bind(this)\n        this.onNewTickers = this.onNewTickers.bind(this)\n        this.onRemoveFromTag = this.onRemoveFromTag.bind(this)\n        this.onDeleteTicker = this.onDeleteTicker.bind(this)\n        this.onDeleteTag = this.onDeleteTag.bind(this)\n        this.onDeleteTransaction = this.onDeleteTransaction.bind(this)\n        this.onEditCell = this.onEditCell.bind(this)\n        this.onModifyRiskFactor = this.onModifyRiskFactor.bind(this)\n        this.onEscapeKey = this.onEscapeKey.bind(this)\n        this.onNewMessages = this.onNewMessages.bind(this)\n        this.getCurrentValue = this.getCurrentValue.bind(this)\n        this.getCurrentShares = this.getCurrentShares.bind(this)\n        this.getBasis = this.getBasis.bind(this)\n        this.getBalanceableValue = this.getBalanceableValue.bind(this)\n        this.onWhatifSubmit = this.onWhatifSubmit.bind(this)\n        this.onWhatifGo = this.onWhatifGo.bind(this)\n        this.getIndicies = this.getIndicies.bind(this)\n        this.getHoldings = this.getHoldings.bind(this)\n        this.getAdded = this.getAdded.bind(this)\n        this.getTagged = this.getTagged.bind(this)\n        this.getUntagged = this.getUntagged.bind(this)\n        this.nameIsAnAggregate = this.nameIsAnAggregate.bind(this)\n        this.nameIsSpecial = this.nameIsSpecial.bind(this)\n        this.sortTickers = this.sortTickers.bind(this)\n    }\n\n    componentDidMount() {\n\n        let baseline = {}\n        const stored_baseline = JSON.parse(localStorage.getItem(\"baseline\"))\n        if (stored_baseline !== null) {\n            baseline = Object.assign({}, stored_baseline)\n        } else {\n            baseline = {\n                name: 'zero_pct_gain',\n                short_pct_gain: 0,\n                medium_pct_gain: 0,\n                long_pct_gain: 0,\n            }\n        }\n\n        const stored_sort_column = JSON.parse(localStorage.getItem(\"sort_column\"))\n        if (stored_sort_column !== null) {\n            this.setState({ sort_column: stored_sort_column })\n        }\n\n        const stored_sort_dir_asc = JSON.parse(localStorage.getItem(\"sort_dir_asc\"))\n        if (stored_sort_dir_asc !== null) {\n            this.setState({ sort_dir_asc: stored_sort_dir_asc })\n        }\n\n        const stored_whatif_format = JSON.parse(localStorage.getItem(\"whatif_format\"))\n        if (stored_whatif_format !== null) {\n            this.setState({ whatif_format: stored_whatif_format })\n        }\n\n        let allTags = {}\n        const stored_allTags = JSON.parse(localStorage.getItem(\"allTags\"))\n        if (stored_allTags !== null) {\n            this.setState({ allTags: stored_allTags })\n            allTags = JSON.parse(JSON.stringify(stored_allTags))\n        }\n\n        let allTransactions = []\n        const stored_allTransactions = JSON.parse(localStorage.getItem(\"allTransactions\"))\n        if (stored_allTransactions !== null) {\n            this.setState({ allTransactions: stored_allTransactions })\n            allTransactions = JSON.parse(JSON.stringify(stored_allTransactions))\n        }\n\n        const stored_allRisk = JSON.parse(localStorage.getItem(\"allRisk\"))\n        if (stored_allRisk !== null) {\n            this.setState({ allRisk: stored_allRisk })\n        }\n\n        let self = this\n\n        const view_controls = ['show_holdings', 'show_tagged', 'show_untagged', 'show_index', 'show_cash', 'show_aggregates', 'show_only_achieved_performance']\n        let stored_controls = {}\n        view_controls.forEach(function(control) {\n            stored_controls[control] = null\n            const stored_control = JSON.parse(localStorage.getItem(control))\n            if (stored_control !== null) {\n                stored_controls[control] = stored_control\n                self.setState({ [control]: stored_control })\n            }\n        })\n\n        let indexed_risk_data = {}\n        if (stored_allRisk !== null) {\n            indexed_risk_data = JSON.parse(JSON.stringify(stored_allRisk))\n        }\n\n        let raw_current_quote_data = require('./api/sample_current_quotes.json').sample_current_quotes\n        let indexed_current_quote_data = {}\n        raw_current_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Global Quote']['01. symbol'].toUpperCase())\n            indexed_current_quote_data[adjusted_ticker] = raw_quote\n        })\n\n        let raw_monthly_quote_data = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let indexed_monthly_quote_data = {}\n        let index_performance = {}\n        raw_monthly_quote_data.forEach(function(raw_quote) {\n            let adjusted_ticker = self.convertNameForIndicies(raw_quote['Meta Data']['2. Symbol'].toUpperCase())\n            indexed_monthly_quote_data[adjusted_ticker] = raw_quote\n            if (adjusted_ticker === 'S&P500') {\n                let quoteTimeSeries = indexed_monthly_quote_data[adjusted_ticker]['Monthly Adjusted Time Series']\n                let monthly_prices = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                let now = monthly_prices[0]\n                let prev_short = monthly_prices[5]\n                let prev_medium = monthly_prices[11]\n                let prev_long = monthly_prices[23]\n                index_performance['short_change_pct'] = (now - prev_short) / now * 100\n                index_performance['medium_change_pct'] = (now - prev_medium) / now * 100\n                index_performance['long_change_pct'] = (now - prev_long) / now * 100\n                baseline['short_change_pct'] = index_performance['short_change_pct']\n                baseline['medium_change_pct'] = index_performance['medium_change_pct']\n                baseline['long_change_pct'] = index_performance['long_change_pct']\n                self.setState({ baseline: baseline })\n                localStorage.setItem('baseline', JSON.stringify(baseline))\n            }\n        })\n\n        this.setState({ index_performance: index_performance })\n\n        let all_stocks = []\n        allTransactions.forEach(function(transaction) {\n            if (transaction.symbol !== 'cash' && !all_stocks.includes(transaction.symbol)) {\n                all_stocks.push(transaction.symbol)\n            }\n        })\n        Object.keys(indexed_current_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_monthly_quote_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker)) {\n                all_stocks.push(ticker)\n            }\n        })\n        Object.keys(indexed_risk_data).forEach(function(ticker) {\n            if (!all_stocks.includes(ticker) && ticker !== 'cash') {\n                all_stocks.push(ticker)\n            }\n        })\n\n        let newPositions = {}\n        let newCurrentQuotes = {}\n        let newMonthlyQuotes = {}\n        let newPerformanceNumbers = {}\n        let newRisk = {}\n\n        all_stocks.forEach(function(ticker) {\n\n            // create a position if any transactions exist\n            allTransactions.forEach(function(transaction) {\n                if (!newPositions.hasOwnProperty(transaction.ticker) && transaction.ticker !== 'cash') {\n                    let newPosition = {}\n                    let ticker = transaction.ticker\n                    newPosition = self.getPositionFromSingleTickerTransactions(allTransactions.filter(transaction => transaction.ticker === ticker))\n                    newPosition['symbol'] = ticker\n                    newPositions[ticker] = newPosition\n                }\n            })\n\n            // get current quote\n            if (indexed_current_quote_data.hasOwnProperty(ticker)) {\n                let newCurrentQuote = {}\n                let quoteResult = indexed_current_quote_data[ticker]['Global Quote']\n                newCurrentQuote['symbol'] = ticker\n                newCurrentQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n                newCurrentQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n                newCurrentQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n                newCurrentQuote['volume'] = parseInt(quoteResult['06. volume'])\n                newCurrentQuotes[ticker] = newCurrentQuote\n            }\n\n            // get monthly quote\n            if (indexed_monthly_quote_data.hasOwnProperty(ticker)) {\n                let newMonthlyQuote = {}\n                let quoteTimeSeries = indexed_monthly_quote_data[ticker]['Monthly Adjusted Time Series']\n                newMonthlyQuote['symbol'] = ticker\n                newMonthlyQuote['monthly_prices'] = Object.entries(quoteTimeSeries).map(price => parseFloat(price[1]['5. adjusted close']))\n                newMonthlyQuotes[ticker] = newMonthlyQuote\n\n                // calculate performance\n                let newPerformance = {}\n                let ticker_now = newMonthlyQuote['monthly_prices'][0]\n                let ticker_prev_short = newMonthlyQuote['monthly_prices'][5]\n                let ticker_prev_medium = newMonthlyQuote['monthly_prices'][11]\n                let ticker_prev_long = newMonthlyQuote['monthly_prices'][23]\n                let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now * 100\n                let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now * 100\n                let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now * 100\n                if (baseline.name === 'sp500_pct_gain') {\n                    newPerformance['short_change_pct'] = ticker_perf_short - index_performance.short_change_pct\n                    newPerformance['medium_change_pct'] = ticker_perf_medium - index_performance.medium_change_pct\n                    newPerformance['long_change_pct'] = ticker_perf_long - index_performance.long_change_pct\n                } else {\n                    newPerformance['short_change_pct'] = ticker_perf_short\n                    newPerformance['medium_change_pct'] = ticker_perf_medium\n                    newPerformance['long_change_pct'] = ticker_perf_long\n                }\n                newPerformanceNumbers[ticker] = newPerformance\n            }\n\n            // get risk factor\n            let newRiskEntry = {}\n            if (indexed_risk_data.hasOwnProperty(ticker)) {\n                newRiskEntry['factor'] = indexed_risk_data[ticker].factor\n            } else if (ticker !== 'S&P500') {\n                newRiskEntry['factor'] = 0.25  // based on TradeStops VQ% (range: 0 to 1), this 25% number represents medium risk\n            }\n            newRisk[ticker] = newRiskEntry\n        })\n\n        // quote for cash\n        let cashCurrentQuote = {\n            change: 0,\n            change_pct: 0,\n            current_price: 1,\n            symbol: 'cash',\n            volume: 0\n        }\n        newCurrentQuotes['cash'] = cashCurrentQuote\n\n        // performance for cash\n        let cashPerformance = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n        }\n        newPerformanceNumbers['cash'] = cashPerformance\n\n        // position for cash\n        let cash_transactions = allTransactions.filter(transaction => transaction.ticker === 'cash')\n        if (cash_transactions.length) {\n            let newPosition = {}\n            newPosition = this.getPositionFromCashTransactions(cash_transactions)\n            newPosition['symbol'] = 'cash'\n            newPositions['cash'] = newPosition\n        }\n\n        // risk for cash\n        let newRiskEntry = {}\n        newRiskEntry['factor'] = 0\n        newRisk['cash'] = newRiskEntry\n\n        let init_shown_columns = []\n        const stored_shown_columns = JSON.parse(localStorage.getItem(\"shown_columns\"))\n        if (stored_shown_columns !== null) {\n            init_shown_columns = [...stored_shown_columns]\n        } else {\n            init_shown_columns = all_columns.filter(column => default_shown_columns.includes(column.name))\n        }\n\n        let aggr_position_info = JSON.parse(JSON.stringify(this.calculateAggrPositionInfo(allTags, newPositions, newCurrentQuotes, stored_controls['show_holdings'], stored_controls['show_cash'])))\n        let aggr_performance = JSON.parse(JSON.stringify(this.calculateAggrPerformance(allTags, newPerformanceNumbers)))\n\n        this.setState({ allStocks: all_stocks,\n                        allPositions: newPositions,\n                        allCurrentQuotes: newCurrentQuotes,\n                        allMonthlyQuotes: newMonthlyQuotes,\n                        allPerformanceNumbers: newPerformanceNumbers,\n                        allRisk: newRisk,\n                        aggrBasis: aggr_position_info[0],\n                        aggrRealized: aggr_position_info[1],\n                        aggrTotalValue: aggr_position_info[2],\n                        aggrPerformance: aggr_performance,\n                        shown_columns: init_shown_columns,\n                        done: true })\n\n    }\n\n    // FIXME: disable these parallel API calls during development due to the API quota limits\n    // getQuoteUrl(ticker) {\n    //     //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n    //     let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n    //     let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n    //     let url_suffix = '&apikey=' + alpha_vantage_api_key\n    //     return url_prefix + ticker + url_suffix\n    // }\n    // \n    // async getCurrentQuotes(tickers) {\n    //     let newQuotes = {}\n    //     const quotesApiResults = await Promise.all(tickers.map(ticker =>\n    //         fetch(this.getQuoteUrl(ticker))\n    //         .then(res => res.json())\n    //     ))\n    //     quotesApiResults.forEach(function(item, idx) {\n    //         let quoteResult = item['Global Quote']\n    //         let newQuote = {}\n    //         let ticker = quoteResult['01. symbol'] + idx\n    //         newQuote['symbol'] = this.convertNameForIndicies(ticker)\n    //         newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n    //         newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n    //         newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n    //         newQuote['volume'] = parseInt(quoteResult['06. volume'])\n    //         newQuotes[ticker] = newQuote\n    //     })\n    //     this.setState({ allCurrentQuotes: newQuotes })\n    // }\n\n    getTransactionById(transaction_id) {\n        return this.state.allTransactions.filter(transaction => transaction.modified_at === transaction_id)[0]\n    }\n\n    getTransactionsByTicker(ticker) {\n        return this.state.allTransactions.filter(transaction => transaction.ticker === ticker)\n    }\n\n    getPositionFromSingleTickerTransactions(transactions) { // assumes the transactions are all from a single ticker\n        let inflows = 0, outflows = 0, current_shares = 0, date, action, num_shares, ticker, value\n        let sorted_transactions = transactions.sort(function(a,b) {\n            if (a.date > b.date) {\n                return -1\n            } else if (a.date < b.date) {\n                return -1\n            } else {\n                return 0\n            }\n        })\n        let position_start_date = '1970/01/01'\n        sorted_transactions.forEach(function(transaction) {\n            [date, action, num_shares, ticker, value] = transaction.summary.split(' ')\n            date = date.substr(0, date.length-1)\n            num_shares = parseInt(num_shares)\n            value = parseFloat(value.substr(1))\n            if (current_shares === 0) {\n                position_start_date = date\n            }\n            if (action === 'buy') {\n                outflows += value\n                current_shares += num_shares\n            } else if (action === 'sell') {\n                inflows += value\n                current_shares -= num_shares\n            }\n            if (current_shares === 0) {\n                position_start_date = 'n/a'\n            }\n        })\n        let newPosition = {\n            symbol: ticker,\n            current_shares: current_shares,\n            start_date: position_start_date,\n            basis: Math.round((outflows > inflows) ? outflows - inflows : 0),\n            realized_gains: Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n        }\n\n        return newPosition\n    }\n\n    getPositionFromCashTransactions(cash_transactions) {\n        let total = 0, action, value\n\n        cash_transactions.forEach(function(cash_transaction) {\n            [, action, value] = cash_transaction.summary.split(' ')\n            let cash_amount = parseFloat(value.substr(1))\n            if (action === 'add') {\n                total += cash_amount\n            } else if (action === 'remove') {\n                total -= cash_amount\n            }\n        })\n        let newPosition = {\n            symbol: 'cash',\n            current_shares: total,\n            basis: total,\n            realized_gains: 0\n        }\n\n        return newPosition\n    }\n\n    calculateAggrPositionInfo(all_tags, all_positions, all_quotes, show_holdings, show_cash) {\n\n        let holdings = (show_holdings === null) ? this.state.show_holdings : show_holdings\n        let cash = (show_cash === null) ? this.state.show_cash : show_cash\n\n        let aggr_totalbasis_by_tag = {}, aggr_totalrealized_by_tag = {}, aggr_totalvalue_by_tag = {}\n        aggr_totalbasis_by_tag['_everything_'] = 0\n        aggr_totalrealized_by_tag['_everything_'] = 0\n        aggr_totalvalue_by_tag['_everything_'] = 0\n        Object.keys(all_tags).forEach(function(tag) {\n            aggr_totalrealized_by_tag[tag] = 'n/a';\n            aggr_totalbasis_by_tag[tag] = 'n/a';\n            aggr_totalvalue_by_tag[tag] = 'n/a';\n            Object.keys(all_positions).forEach(function(ticker) {\n                if (all_tags[tag].includes(ticker)) {\n                    aggr_totalrealized_by_tag[tag] = 0 \n                    aggr_totalbasis_by_tag[tag] = 0 \n                    aggr_totalvalue_by_tag[tag] = 0 \n                }\n            })\n        })\n        Object.entries(all_positions).forEach(function(position_info) {\n            let ticker = position_info[0]\n            let ticker_basis = position_info[1]['basis']\n            let ticker_realized_gains = position_info[1]['realized_gains']\n            let ticker_shares = position_info[1]['current_shares']\n            let ticker_price = all_quotes[ticker]['current_price'] || 1\n            if ((ticker !== 'cash' && holdings) || (ticker === 'cash' && cash)) {\n                aggr_totalbasis_by_tag['_everything_'] += ticker_basis - ticker_realized_gains\n                aggr_totalrealized_by_tag['_everything_'] += ticker_realized_gains\n                aggr_totalvalue_by_tag['_everything_'] += ticker_price * ticker_shares\n                Object.keys(all_tags).forEach(function(tag) {\n                    if (all_tags[tag].includes(ticker)) {\n                        aggr_totalbasis_by_tag[tag] += ticker_basis - ticker_realized_gains\n                        aggr_totalrealized_by_tag[tag] += parseFloat(ticker_realized_gains)\n                        if (aggr_totalbasis_by_tag[tag] < 0) {\n                            aggr_totalbasis_by_tag[tag] = 0\n                        }\n                        aggr_totalvalue_by_tag[tag] += ticker_price * ticker_shares\n                    }\n                })\n            }\n        })\n        if (aggr_totalbasis_by_tag['_everything_'] < 0) {\n            aggr_totalbasis_by_tag['_everything_'] = 0\n        }\n\n        return [aggr_totalbasis_by_tag, aggr_totalrealized_by_tag, aggr_totalvalue_by_tag]\n    }\n\n    calculateAggrPerformance(all_tags, all_performance_numbers) {\n\n        let aggr_performance_by_tag = {}\n        aggr_performance_by_tag['_everything_'] = {\n            short_change_pct: 0,\n            medium_change_pct: 0,\n            long_change_pct: 0,\n            num_tickers: 0\n        }\n\n        let all_stocks_of_interest = []\n        Object.values(all_tags).forEach(function(array_of_tickers) {\n            array_of_tickers.forEach(ticker => all_stocks_of_interest.push(ticker))\n        })\n        all_stocks_of_interest = Array.from(new Set(all_stocks_of_interest))\n\n        all_stocks_of_interest.forEach(function(ticker) {\n\n            let short = all_performance_numbers[ticker]['short_change_pct']\n            let medium = all_performance_numbers[ticker]['medium_change_pct']\n            let long = all_performance_numbers[ticker]['long_change_pct']\n\n            aggr_performance_by_tag['_everything_'].short_change_pct += short\n            aggr_performance_by_tag['_everything_'].medium_change_pct += medium\n            aggr_performance_by_tag['_everything_'].long_change_pct += long\n            aggr_performance_by_tag['_everything_'].num_tickers += 1\n\n            Object.keys(all_tags).forEach(function(tag) {\n                if (aggr_performance_by_tag.hasOwnProperty(tag) && all_tags[tag].includes(ticker)) {\n                    aggr_performance_by_tag[tag].short_change_pct += short\n                    aggr_performance_by_tag[tag].medium_change_pct += medium\n                    aggr_performance_by_tag[tag].long_change_pct += long\n                    aggr_performance_by_tag[tag].num_tickers += 1\n                } else if (all_tags[tag].includes(ticker)) {\n                    let new_aggr_performance = {}\n                    new_aggr_performance['short_change_pct'] = short\n                    new_aggr_performance['medium_change_pct'] = medium\n                    new_aggr_performance['long_change_pct'] = long\n                    new_aggr_performance['num_tickers'] = 1\n                    aggr_performance_by_tag[tag] = new_aggr_performance\n                }\n            })\n        })\n\n        Object.entries(aggr_performance_by_tag).forEach(function(tag_performance) {\n            let tag = tag_performance[0]\n            let performance = tag_performance[1]\n            Object.keys(performance).filter(time_range => time_range !== 'num_tickers').forEach(function(time_range) {\n                let value = (performance['num_tickers']) ? performance[time_range] / performance.num_tickers : 'n/a'\n                aggr_performance_by_tag[tag][time_range] = value\n            })\n        })\n\n        return aggr_performance_by_tag\n    }\n\n    onInputChange(event) {\n        let name = event.target.name\n\n        if (name === 'baseline') {\n            let new_baseline_name = event.target.value\n            let new_baseline = {}\n            new_baseline['name'] = new_baseline_name\n            if (new_baseline_name === 'sp500_pct_gain') {\n                new_baseline['short_change_pct'] = this.state.allPerformanceNumbers['S&P500']['short_change_pct']\n                new_baseline['medium_change_pct'] = this.state.allPerformanceNumbers['S&P500']['medium_change_pct']\n                new_baseline['long_change_pct'] = this.state.allPerformanceNumbers['S&P500']['long_change_pct']\n            } else {\n                new_baseline['short_change_pct'] = 0\n                new_baseline['medium_change_pct'] = 0\n                new_baseline['long_change_pct'] = 0\n            }\n\n            localStorage.setItem('baseline', JSON.stringify(new_baseline))\n            this.setState({ baseline: new_baseline })\n        }\n    }\n    \n    onShowInputChange(event) {\n        const target = event.target\n        const new_value = target.type === 'checkbox' ? target.checked : target.value\n        const name = target.name\n        localStorage.setItem(name, JSON.stringify(new_value))\n\n        // recalculate the aggregate numbers\n        let show_cash = (name === 'show_cash') ? new_value : this.state.show_cash\n        let show_holdings = (name === 'show_holdings') ? new_value : this.state.show_holdings\n        let aggr_position_info = JSON.parse(JSON.stringify(\n            this.calculateAggrPositionInfo(\n                this.state.allTags, \n                this.state.allPositions, \n                this.state.allCurrentQuotes, \n                show_holdings,\n                show_cash)))\n\n        if (name === 'show_cash') {\n            this.onWhatifGo(this.state.balance_target_set, this.state.balance_target_column, new_value, this.state.remaining_cash)\n        }\n\n        this.setState({ \n            [name]: new_value,\n            aggrBasis: aggr_position_info[0],\n            aggrRealized: aggr_position_info[1],\n            aggrTotalValue: aggr_position_info[2],\n        })\n    }\n\n    onChangeWhatifFormat() {\n        let new_whatif_format = (this.state.whatif_format === 'deltas') ? 'new_values' : 'deltas'\n        localStorage.setItem('whatif_format', JSON.stringify(new_whatif_format))\n        this.setState({ whatif_format: new_whatif_format })\n    }\n\n    onChangeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            localStorage.setItem('sort_dir_asc', JSON.stringify(!this.state.sort_dir_asc))\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        localStorage.setItem('sort_column', JSON.stringify(new_sort_column))\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    showColumns(column_names) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            column_names.forEach(function(column_name) {\n                if (!new_shown_column_names.includes(column_name)) {\n                    new_shown_column_names.push(column_name)\n                }\n            })\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    onToggleShowColumn(column_name) {\n        this.setState(prevState => {\n            let new_shown_column_names = JSON.parse(JSON.stringify(prevState.shown_columns)).map(column => column.name)\n            if (new_shown_column_names.includes(column_name)) {\n                new_shown_column_names.splice(new_shown_column_names.findIndex(name => name === column_name), 1)\n            } else {\n                new_shown_column_names.push(column_name)\n            }\n            let new_shown_columns = all_columns.filter(column => new_shown_column_names.includes(column.name))\n            localStorage.setItem('shown_columns', JSON.stringify(new_shown_columns))\n            return { shown_columns: new_shown_columns }\n        })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    createMessage(message_content) {\n        let new_message = {\n            modified_at: new Date().getTime(),\n            content: message_content\n        }\n        return new_message\n    }\n\n    onNewTags(new_tags) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tags.forEach(function(tag) {\n                let newTag = []\n                if (!newAllTags.hasOwnProperty(tag)) {\n                    newAllTags[tag] = newTag\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTickers(tag, new_tickers) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            new_tickers.forEach(function(ticker) {\n                if (!newAllTags[tag].includes(ticker)) {\n                    newAllTags[tag].push(ticker)\n                    if (tag !== 'untagged') {\n                        newAllTags['untagged'] = newAllTags['untagged'].filter(untagged_ticker => untagged_ticker !== ticker)\n                    }\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTicker(delete_ticker) {\n        this.setState(prevState => {\n\n            // update tag membership info\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let all_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                all_tags_for_this_ticker.push(tag_name)\n            })\n            all_tags_for_this_ticker.forEach(function(tag) {\n                newAllTags[tag] = newAllTags[tag].filter(ticker => ticker !== delete_ticker)\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update position\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            delete newAllPositions[delete_ticker]\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.ticker !== delete_ticker)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status messages\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            let new_message = ['Ticker ' + delete_ticker + ' has now been deleted.']\n            let newLastStatusMessages = new_message\n            newAllStatusMessages = [...new_message, ...newAllStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    newAllPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                all_status_messages: newAllStatusMessages,\n                last_status_messages: newLastStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onNewTransaction(new_transaction_summary) {\n        let date, action, num_shares, ticker, total\n        [date, action, num_shares, ticker, total]  = new_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        num_shares = parseInt(num_shares)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update tag membership info only if this is a new ticker\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            if (!(this.getAdded().includes(ticker))){\n                newAllTags['untagged'].push(ticker)\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: ticker,\n                summary: new_transaction_summary\n            }\n            newAllTransactions.push(new_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let orig_start_date, orig_basis = 0, orig_current_shares = 0, orig_realized_gains = 0\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            if (newAllPositions.hasOwnProperty(ticker) && newAllPositions[ticker] !== null) {\n                orig_start_date = newAllPositions[ticker]['start_date']\n                orig_basis = newAllPositions[ticker]['basis']\n                orig_current_shares = newAllPositions[ticker]['current_shares']\n                orig_realized_gains = newAllPositions[ticker]['realized_gains']\n            }\n            let new_current_shares = (action === 'buy') ? orig_current_shares + num_shares : orig_current_shares - num_shares\n            let new_start_date\n            if (orig_start_date === undefined) {\n                new_start_date = date\n            } else {\n                new_start_date = (new Date(date) < new Date(orig_start_date)) ? date : orig_start_date\n            }\n            let updatedPosition = {\n                current_shares: new_current_shares,\n                start_date: (new_current_shares) ? new_start_date : 'n/a',\n                symbol: ticker,\n                basis: (action === 'buy') ? orig_basis + total : orig_basis - total,\n                realized_gains: (action === 'sell') ? orig_realized_gains + total : orig_realized_gains\n            }\n            if (updatedPosition['basis'] < 0) {\n                updatedPosition['basis'] = 0\n            }\n            newAllPositions[ticker] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags,\n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onImportTransactions(imported_transactions) {\n        let transaction_tickers = []\n        imported_transactions.forEach( transaction => transaction_tickers.push(transaction.ticker))\n        let all_stocks_of_interest = Array.from(new Set(transaction_tickers))\n        let self = this\n        this.setState(prevState => {\n\n            // update the \"untagged\" tag so that all added tickers belong to a tag\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            all_stocks_of_interest.forEach( function(ticker) {\n                if (!(self.getAdded().includes(ticker))){\n                    newAllTags['untagged'].push(ticker)\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // replace the stored transactions\n            localStorage.setItem('allTransactions', JSON.stringify(imported_transactions))\n\n            return\n        })\n\n        window.location.reload(false)\n    }\n\n    onNewCash(new_cash_transaction_summary) {\n        let date, action, total\n        [date, action, total]  = new_cash_transaction_summary.split(' ')\n        date = date.substr(0, date.length-1)\n        total = parseFloat(total.substr(1))\n        this.setState(prevState => {\n\n            // update transaction info\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions))\n            let new_cash_transaction = { \n                modified_at: new Date().getTime(),\n                date: date,\n                ticker: 'cash',\n                summary: new_cash_transaction_summary\n            }\n            newAllTransactions.push(new_cash_transaction)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // recalculate the position numbers\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let orig_current_shares = 0\n            if (newAllPositions.hasOwnProperty('cash')) {\n                orig_current_shares = newAllPositions['cash']['current_shares']\n            }\n            let new_cash = (action === 'add') ? orig_current_shares + total : orig_current_shares - total\n            let updatedPosition = {\n                symbol: 'cash',\n                basis: (new_cash >= 0) ? new_cash : 0,\n                current_shares: new_cash,\n                realized_gains: 0\n            }\n            newAllPositions['cash'] = updatedPosition\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags, \n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    this.state.allTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTransactions: newAllTransactions, \n                allPositions: newAllPositions, \n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTransaction(delete_transaction_id) {\n\n        let transaction_to_delete = this.getTransactionById(delete_transaction_id)\n        let ticker = transaction_to_delete.ticker\n\n        this.setState(prevState => {\n\n            // update transactions\n            let newAllTransactions = JSON.parse(JSON.stringify(prevState.allTransactions)).filter(transaction => transaction.modified_at !== delete_transaction_id)\n            localStorage.setItem('allTransactions', JSON.stringify(newAllTransactions))\n\n            // add status message\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            let new_message = ['Transaction \"' + transaction_to_delete.summary + '\" has now been deleted.']\n            let newLastStatusMessages = new_message\n            newAllStatusMessages = [...new_message, ...newAllStatusMessages]\n\n            // recalculate the position numbers\n            let remainingTransactionsForTicker = newAllTransactions.filter(transaction => transaction.ticker === ticker)\n            let newAllPositions = JSON.parse(JSON.stringify(prevState.allPositions))\n            let updatedPosition\n            if (!remainingTransactionsForTicker.length) {\n                delete newAllPositions[ticker]\n            } else {\n                if (ticker === 'cash') {\n                    updatedPosition = this.getPositionFromCashTransactions(remainingTransactionsForTicker)\n                } else {\n                    updatedPosition = this.getPositionFromSingleTickerTransactions(remainingTransactionsForTicker)\n                }\n                newAllPositions[ticker] = updatedPosition\n            }\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    this.state.allTags,\n                    newAllPositions,\n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n\n            return { \n                allPositions: newAllPositions, \n                allTransactions: newAllTransactions, \n                all_status_messages: newAllStatusMessages,\n                last_status_messages: newLastStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n            }\n        })\n    }\n\n    onRemoveFromTag(remove_from_tag, remove_ticker) {\n        this.setState(prevState => {\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            newAllTags[remove_from_tag] = newAllTags[remove_from_tag].filter(ticker => ticker !== remove_ticker)\n\n            // assign ticker to \"untagged\" if it is losing its last (user) tag\n            let all_other_tags_for_this_ticker = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== remove_from_tag && tag_name !== 'untagged' && newAllTags[tag_name].includes(remove_ticker)) {\n                    all_other_tags_for_this_ticker.push(tag_name)\n                }\n            })\n            if (!all_other_tags_for_this_ticker.length) {\n                let newUntagged = newAllTags['untagged']\n                newUntagged.push(remove_ticker)\n                newAllTags['untagged'] = newUntagged\n            }\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onDeleteTag(delete_tag) {\n        this.setState(prevState => {\n\n            let newAllTags = JSON.parse(JSON.stringify(prevState.allTags))\n            let tickers_losing_a_tag = newAllTags[delete_tag]\n            delete newAllTags[delete_tag]\n\n            // assign tickers to \"untagged\" if they are losing their last (user) tag\n            let all_other_tagged_tickers = []\n            Object.keys(newAllTags).forEach(function(tag_name) {\n                if (tag_name !== 'untagged') {\n                    all_other_tagged_tickers = all_other_tagged_tickers.concat(newAllTags[tag_name])\n                }\n            })\n            tickers_losing_a_tag.forEach(function(ticker) {\n                let newUntagged = newAllTags['untagged']\n                if (!all_other_tagged_tickers.includes(ticker)) {\n                    newUntagged.push(ticker)\n                    newAllTags['untagged'] = newUntagged\n                }\n            })\n            localStorage.setItem('allTags', JSON.stringify(newAllTags))\n\n            // add status messages\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            let new_message = ['Tag \"' + delete_tag + '\" has now been deleted.']\n            let newLastStatusMessages = new_message\n            newAllStatusMessages = [...new_message, ...newAllStatusMessages]\n\n            // recalculate the aggregate numbers\n            let aggr_position_info = JSON.parse(JSON.stringify(\n                this.calculateAggrPositionInfo(\n                    newAllTags, \n                    this.state.allPositions, \n                    this.state.allCurrentQuotes, \n                    this.state.show_holdings,\n                    this.state.show_cash)))\n            let aggr_performance = JSON.parse(JSON.stringify(\n                this.calculateAggrPerformance(\n                    newAllTags, \n                    this.state.allPerformanceNumbers)))\n\n            return { \n                allTags: newAllTags, \n                all_status_messages: newAllStatusMessages,\n                last_status_messages: newLastStatusMessages,\n                aggrBasis: aggr_position_info[0],\n                aggrRealized: aggr_position_info[1],\n                aggrTotalValue: aggr_position_info[2],\n                aggrPerformance: aggr_performance,\n            }\n        })\n    }\n\n    onEditCell(row_name) {\n        this.setState(prevState => {\n            if (\n                prevState.editing_row !== row_name\n                && row_name !== this.props.editing_row\n                && !this.nameIsAnAggregate(row_name)\n                && !this.nameIsSpecial(row_name)\n            ) {\n                return { editing_row: row_name }\n            } else {\n                return\n            }\n        })\n    }\n\n    onModifyRiskFactor(ticker, new_value) {\n        this.setState(prevState => {\n\n            let newAllRisk = JSON.parse(JSON.stringify(prevState.allRisk))\n            if (newAllRisk.hasOwnProperty(ticker)) {\n                newAllRisk[ticker]['factor'] = parseFloat(new_value)\n            } else {\n                let newRisk = { factor: parseFloat(new_value) }\n                newAllRisk[ticker] = newRisk\n            }\n            localStorage.setItem('allRisk', JSON.stringify(newAllRisk))\n\n            return { \n                allRisk: newAllRisk,\n                editing_row: null\n            }\n        })\n    }\n\n    onEscapeKey() {\n        this.setState({ editing_row: null })\n    }\n\n    onNewMessages(new_messages) {\n        this.setState(prevState => {\n            let newAllStatusMessages = [...prevState.all_status_messages]\n            newAllStatusMessages = [...new_messages.reverse(), ...newAllStatusMessages]\n            return { \n                last_status_messages: new_messages.reverse(),\n                all_status_messages: newAllStatusMessages }\n        })\n    }\n\n    getCurrentValue(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allCurrentQuotes[ticker].current_price * this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getCurrentShares(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].current_shares\n        } else {\n            return 0\n        }\n    }\n\n    getBasis(ticker) {\n        if (this.state.allPositions.hasOwnProperty(ticker)) {\n            return this.state.allPositions[ticker].basis\n        } else {\n            return 0\n        }\n    }\n\n    getBalanceableValue(balance_target_set, balance_target_column) {\n\n        let self = this\n        let balanceable_value = 0\n\n        let current_cash_position = 0\n        if (this.state.show_cash && this.state.allPositions.hasOwnProperty('cash')) {\n            current_cash_position = self.state.allPositions['cash'].current_shares * self.state.allCurrentQuotes['cash'].current_price\n        }\n        balanceable_value += current_cash_position\n\n        if (balance_target_set === 'my_holdings') {\n            if (this.state.show_holdings) {\n                Object.keys(this.state.allPositions).filter( ticker => ticker !== 'cash' ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value' || 'value_at_risk') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis' || 'basis_risked') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        } else if (balance_target_set === 'untagged') {\n            if (this.state.show_untagged && this.state.allTags.hasOwnProperty('untagged')) {\n                this.state.allTags['untagged'].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value' || 'value_at_risk') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis' || 'basis_risked') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        } else { // balance_target_set is a tag name\n            if (this.state.show_tagged) {\n                this.state.allTags[balance_target_set].filter( ticker => self.state.allPositions.hasOwnProperty(ticker) ).forEach( function(ticker) {\n                    let current_value = self.state.allPositions[ticker].current_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (balance_target_column === 'current_value' || 'value_at_risk') {\n                        balanceable_value += current_value\n                    } else if (balance_target_column === 'basis' || 'basis_risked') {\n                        balanceable_value += self.state.allPositions[ticker].basis\n                    }\n                })\n            }\n        }\n\n        return balanceable_value\n    }\n\n    onWhatifSubmit(balance_target_set, sell_all_of, balance_target_column, remaining_cash) {\n        this.setState({ \n            remaining_cash: remaining_cash, \n            balance_target_set: balance_target_set, \n            sell_all_of: sell_all_of,\n            balance_target_column: balance_target_column \n            })\n        let show_whatif_columns = ['current_shares', 'whatif_current_shares', balance_target_column, 'whatif_'+balance_target_column]\n        if (balance_target_column.includes('risk')) {\n            show_whatif_columns.push('risk_factor')\n        }\n        this.showColumns(show_whatif_columns)\n        this.onWhatifGo(balance_target_set, sell_all_of, balance_target_column, this.state.show_cash, remaining_cash)\n    }\n\n    onWhatifGo(balance_target_set, sell_all_set, balance_target_column, show_cash, remaining_cash) {\n\n        let self = this\n        let adjusting_cash = show_cash && remaining_cash !== null\n        let original_cash_position = (this.state.allPositions.hasOwnProperty('cash')) ? this.state.allPositions['cash'].current_shares * this.state.allCurrentQuotes['cash'].current_price : 0\n\n        // determine the total value to be balanced\n        let total_balance_value = this.getBalanceableValue(balance_target_set, balance_target_column) // includes cash if show_cash is enabled\n        if (remaining_cash === null) {\n            total_balance_value -= original_cash_position\n        } else {\n            total_balance_value -= remaining_cash\n        }\n\n        // determine the tickers to balance across\n        let ticker_set = []\n        if (balance_target_set === 'my_holdings') {\n            ticker_set = [...this.getHoldings().filter( ticker => ticker !== 'cash' )]\n        } else if (balance_target_set === 'untagged') {\n            ticker_set = [...this.getUntagged()]\n        } else {\n            ticker_set = this.state.allTags[balance_target_set]\n        }\n\n        // determine these tickers' what-if values for each relevant column\n        let new_whatif = {\n            balance_target_column: balance_target_column,\n            values: {}\n        }\n\n        let actual_remaining_cash = original_cash_position\n        let tickers_balanced_set = ticker_set.filter( ticker => !sell_all_set.includes(ticker) )\n        ticker_set.forEach(function(ticker) {\n            let whatif_currentshares, whatif_balancedvalue\n            \n            let target = total_balance_value / tickers_balanced_set.length\n            new_whatif.values[ticker] = {}\n            let value_delta = 0\n            let original_currentvalue = self.getCurrentValue(ticker)\n            let original_basis = self.getBasis(ticker)\n\n            if (sell_all_set.includes(ticker)) {\n                new_whatif.values[ticker]['current_shares'] = 0\n                new_whatif.values[ticker]['current_value'] = 0\n                new_whatif.values[ticker]['basis'] = 0\n                new_whatif.values[ticker]['basis_risked'] = 0\n                new_whatif.values[ticker]['value_at_risk'] = 0\n                return\n            }\n\n            // balancing by value is a simple average of current values\n            if (balance_target_column === 'current_value') {\n\n                whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                value_delta = whatif_balancedvalue - original_currentvalue\n                let whatif_basis = original_basis + value_delta\n                if (whatif_basis < 0) {\n                    whatif_basis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_basis\n                new_whatif.values[ticker]['basis_risked'] = whatif_basis * self.state.allRisk[ticker].factor\n\n                new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * self.state.allRisk[ticker].factor\n\n            // balancing by basis must account for sunk costs too; current value is not enough\n            } else if (balance_target_column === 'basis') {\n\n                let original_currentshares = self.getCurrentShares(ticker)\n                let target_delta = target - original_basis\n                let target_delta_shares\n                if (target_delta >= 0) {\n                    target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                } else {\n                    target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                }\n                whatif_currentshares = original_currentshares + target_delta_shares\n                new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                if (whatif_balancedbasis < 0) {\n                    whatif_balancedbasis = 0\n                }\n                new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * self.state.allRisk[ticker].factor\n\n                value_delta = whatif_balancedbasis - original_basis\n                new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n\n                new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * self.state.allRisk[ticker].factor\n            }\n\n            if (adjusting_cash) {\n                actual_remaining_cash -= value_delta \n            }\n        })\n\n        // RISK BALANCING ALGORITHM:\n        //\n        // given:\n        //   3 positions (tickers)\n        //   ticker risk factors a, b, c \n        //   and total portfolio value Vtot \n        //\n        // need to solve for:\n        //   ticker position values V1, V2, V3 \n        //\n        // total portfolio value is the sum of each position:\n        //   V1 + V2 + V3 = Vtot\n        //\n        // for balanced risk, each weighted position must be equal:\n        //   aV1 + bV2 + cV3 = TotalRisk, where aV1 = bV2 = cV3\n        // \n        // solving the first equation for V1 using substitution:\n        //   V1 = (Vtot * bc) / (bc + ac + ab)      <== \"numerator\" / \"denominator\"\n        //\n        // extending this for 4 and 5 positions:\n        //   4 positions... V1 = (Vtot * bcd) / (bcd + acd + abd + abc)\n        //   5 positions... V1 = (Vtot * bcde) / (bcde + acde + abde + abce + abcd)\n        //\n        // then solve for the other ticker positions:\n        //   V2 = aV1/b, V3 = aV1/c, V4 = aV1/d, V5=aV1/e\n        //\n        // The above applies to risk-balancing VALUE. This results in each position currently\n        // having the same dollar value at risk right now. Similarly, in order to risk-balance \n        // by BASIS, the same formula may be used except with Btot (total basis) in the numberator.\n        // This results in each position having the same amount of sunk investment dollars at risk.\n\n        // balancing by risk requires a complicated algorithm (shown above)\n        if (balance_target_column === 'value_at_risk' || balance_target_column === 'basis_risked') {\n            \n            // determine the numerator\n            let numerator_product = 1\n            tickers_balanced_set.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    numerator_product *= self.state.allRisk[ticker].factor\n                }\n            })\n            let numerator = total_balance_value * numerator_product\n\n            // determine the denominator\n            let denominator_terms = Array(tickers_balanced_set.length).fill(1)\n            tickers_balanced_set.forEach(function(ticker, ticker_idx) {\n                denominator_terms.forEach(function(term, term_idx) {\n                    if (ticker_idx !== term_idx) {\n                        denominator_terms[term_idx] = term * self.state.allRisk[ticker].factor\n                    }\n                })\n            })\n            let denominator = denominator_terms.reduce( (accumulator, currentValue) => accumulator + currentValue, 0 )\n\n            // determine the target value for each ticker; each will be different if their risk factors are different\n            let targets = Array(tickers_balanced_set.length).fill(0)\n            targets[0] = numerator / denominator\n            let factor_0 = self.state.allRisk[tickers_balanced_set[0]].factor\n            tickers_balanced_set.forEach(function(ticker, idx) {\n                if (idx !== 0) {\n                    targets[idx] = Math.round(targets[0] * factor_0 / self.state.allRisk[ticker].factor)\n                }\n            })\n\n            // for each ticker, use its target to derive the other metrics\n            tickers_balanced_set.forEach(function(ticker, idx) {\n                if (!new_whatif.values.hasOwnProperty(ticker)) {\n                    new_whatif.values[ticker] = {}\n                }\n                let original_currentvalue = self.getCurrentValue(ticker)\n                let original_basis = self.getBasis(ticker)\n                let value_delta, target = targets[idx]\n\n                // for values, \"target\" is the target market value for this position\n                if (balance_target_column === 'value_at_risk') {\n\n                    let whatif_currentshares = Math.floor(target / self.state.allCurrentQuotes[ticker].current_price)\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedvalue = whatif_currentshares * self.state.allCurrentQuotes[ticker].current_price\n                    new_whatif.values[ticker]['current_value'] = whatif_balancedvalue\n\n                    value_delta = whatif_balancedvalue - original_currentvalue\n                    let whatif_basis = original_basis + value_delta\n                    if (whatif_basis < 0) {\n                        whatif_basis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_basis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_basis * self.state.allRisk[ticker].factor\n\n                    new_whatif.values[ticker]['value_at_risk'] = whatif_balancedvalue * self.state.allRisk[ticker].factor\n\n                // for bases, \"target\" is the target basis for this position\n                } else if (balance_target_column === 'basis_risked') {\n\n                    let original_currentshares = self.getCurrentShares(ticker)\n                    let target_delta = target - original_basis\n                    let target_delta_shares\n                    if (target_delta >= 0) {\n                        target_delta_shares = Math.floor(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    } else {\n                        target_delta_shares = Math.ceil(target_delta / self.state.allCurrentQuotes[ticker].current_price)\n                    }\n                    let whatif_currentshares = original_currentshares + target_delta_shares\n                    new_whatif.values[ticker]['current_shares'] = whatif_currentshares\n\n                    let whatif_balancedbasis = original_basis + target_delta_shares * self.state.allCurrentQuotes[ticker].current_price\n                    if (whatif_balancedbasis < 0) {\n                        whatif_balancedbasis = 0\n                    }\n                    new_whatif.values[ticker]['basis'] = whatif_balancedbasis\n                    new_whatif.values[ticker]['basis_risked'] = whatif_balancedbasis * self.state.allRisk[ticker].factor\n    \n                    value_delta = whatif_balancedbasis - original_basis\n                    new_whatif.values[ticker]['current_value'] = original_currentvalue + value_delta\n    \n                    new_whatif.values[ticker]['value_at_risk'] = new_whatif.values[ticker]['current_value'] * self.state.allRisk[ticker].factor\n                }\n\n                if (adjusting_cash) {\n                    actual_remaining_cash -= value_delta \n                }\n            })\n        }\n\n        if (adjusting_cash) {\n            new_whatif.values['cash'] = {}\n            new_whatif.values['cash']['current_shares'] = actual_remaining_cash\n            new_whatif.values['cash']['current_value'] = actual_remaining_cash\n            new_whatif.values['cash']['basis'] = actual_remaining_cash\n            new_whatif.values['cash']['value_at_risk'] = 0\n        }\n        this.setState({ allWhatifs: new_whatif.values, balance_target_column: new_whatif.balance_target_column })\n    }\n\n    getHoldings() {\n        return Object.entries(this.state.allPositions).filter(holding => holding[1]['current_shares'] > 0).map(holding => holding[0])\n    }\n\n    getIndicies() {\n        return [...this.state.allIndiciesAliases]\n    }\n\n    getAdded() {\n        let added_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            added_tickers = added_tickers.concat(self.state.allTags[tag])\n        })\n        return Array.from(new Set(added_tickers))\n    }\n\n    getTagged() {\n        let tagged_tickers = []\n        let self = this\n        Object.keys(this.state.allTags).forEach(function(tag) {\n            if (tag !== 'untagged') {\n                tagged_tickers = tagged_tickers.concat(self.state.allTags[tag])\n            }\n        })\n        return Array.from(new Set(tagged_tickers))\n    }\n\n    getUntagged() {\n        return Array.from(this.state.allTags['untagged'])\n    }\n\n    populateSymbolCount(grid_rows) {\n        if (this.state.show_index) {\n            grid_rows -= 1\n        }\n        if (this.state.show_cash) {\n            grid_rows -= 1\n        }\n        if (grid_rows) {\n            return '(' + grid_rows + ')'\n        } else {\n            return ''\n        }\n    }\n\n    nameIsAnAggregate(name) {\n        return Object.keys(this.state.allTags).includes(name)\n    }\n\n    nameIsSpecial(name) {\n        if (name === 'cash') {\n            return true\n        } else if (name === 'S&P500') {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    sortTickers(names_list) {\n\n        let sort_column = this.state.sort_column\n        let quote_columns = ['current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['start_date', 'current_shares', 'current_value', 'percent_value', 'value_at_risk', 'basis', 'basis_risked', 'realized_gains', 'percent_basis', 'percent_profit']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n\n        let sorted_names_list = [...names_list]\n        let self = this\n        sorted_names_list.sort(function(a,b) {\n            let value_a, value_b\n\n            // pin certain names to the top, regardless of the user sort\n            if (sort_column === 'symbol') {\n                if (a === 'untagged') {\n                    return -1\n                } else if (b === 'untagged') {\n                    return 1\n                } else if (a === 'S&P500') {\n                    return -1\n                } else if (b === 'S&P500') {\n                    return 1\n                } else if (a === 'cash') {\n                    return -1\n                } else if (b === 'cash') {\n                    return 1\n                }\n                value_a = a\n                value_b = b\n\n            // sort by a quote column\n            } else if (quote_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) || !self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                    value_a = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                    }\n                }\n                if (self.nameIsAnAggregate(b) || !self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    value_b = 'n/a'\n                } else {\n                    if (sort_column === 'dollar_volume') {\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                }\n\n            // sort by a performance column\n            } else if (performance_columns.includes(sort_column)) {\n                if (self.nameIsAnAggregate(a) && self.state.aggrPerformance.hasOwnProperty(a)) {\n                    value_a = self.state.aggrPerformance[a][sort_column]\n                } else if (!self.nameIsAnAggregate(a) && self.state.allPerformanceNumbers.hasOwnProperty(a)) {\n                    value_a = self.state.allPerformanceNumbers[a][sort_column]\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b) && self.state.aggrPerformance.hasOwnProperty(b)) {\n                    value_b = self.state.aggrPerformance[b][sort_column]\n                } else if (!self.nameIsAnAggregate(b) && self.state.allPerformanceNumbers.hasOwnProperty(b)) {\n                    value_b = self.state.allPerformanceNumbers[b][sort_column]\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // sort by a holdings column\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b, basis_a, basis_b\n                if (self.nameIsAnAggregate(a)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_a = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_a = self.state.aggrTotalValue[a]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_a = self.state.aggrBasis[a]\n                            break;\n                        case 'realized_gains':\n                            value_a = self.state.aggrRealized[a]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_a = self.state.aggrTotalValue[a]\n                            basis_a = self.state.aggrBasis[a]\n                            if (isNaN(positionvalue_a) || isNaN(basis_a)) {\n                                value_a = 'n/a' \n                            } else if (positionvalue_a !== 0) {\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                            break;\n                        default:\n                            value_a = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a)) {\n                            positionvalue_a = self.state.allPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_a !== 0) {\n                                basis_a = self.state.allPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_a !== 0 && self.state.allRisk.hasOwnProperty(a)) {\n                                value_a = positionvalue_a * self.state.allRisk[a].factor\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.allPositions[a]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(a)) {\n                            value_a = self.state.allPositions[a]['basis'] * self.state.allRisk[a]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_a = self.state.allPositions[a]['basis']\n                        } else {\n                            value_a = self.state.allPositions[a][sort_column]\n                        }\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.nameIsAnAggregate(b)) {\n                    switch(sort_column) {\n                        case 'current_shares':\n                            value_b = 'n/a'\n                            break;\n                        case 'current_value':\n                        case 'percent_value':\n                            value_b = self.state.aggrTotalValue[b]\n                            break;\n                        case 'basis':\n                        case 'percent_basis':\n                            value_b = self.state.aggrBasis[b]\n                            break;\n                        case 'realized_gains':\n                            value_b = self.state.aggrRealized[b]\n                            break;\n                        case 'percent_profit':\n                            positionvalue_b = self.state.aggrTotalValue[b]\n                            basis_b = self.state.aggrBasis[b]\n                            if (isNaN(positionvalue_b) || isNaN(basis_b)) {\n                                value_b = 'n/a' \n                            } else if (positionvalue_b !== 0) {\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                            break;\n                        default:\n                            value_b = 'n/a'\n                    }\n                } else if (self.state.allPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_profit' || sort_column === 'value_at_risk') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                            positionvalue_b = self.state.allPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_profit' && positionvalue_b !== 0) {\n                                basis_b = self.state.allPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else if (sort_column === 'value_at_risk' && positionvalue_b !== 0 && self.state.allRisk.hasOwnProperty(b)) {\n                                value_b = positionvalue_b * self.state.allRisk[b].factor\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.allPositions[b]['current_shares']) {\n                        if (sort_column === 'basis_risked' && self.state.allRisk.hasOwnProperty(b)) {\n                            value_b = self.state.allPositions[b]['basis'] * self.state.allRisk[b]['factor']\n                        } else if (sort_column === 'percent_basis') {\n                            value_b = self.state.allPositions[b]['basis']\n                        } else {\n                            value_b = self.state.allPositions[b][sort_column]\n                        }\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n\n            // miscelaneous columns\n            } else if (sort_column === 'risk_factor') {\n                value_a = (self.state.allRisk.hasOwnProperty(a)) ? self.state.allRisk[a].factor : 'n/a'\n                value_b = (self.state.allRisk.hasOwnProperty(b)) ? self.state.allRisk[b].factor : 'n/a'\n\n            // default, do not reorder this pair\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return -1\n                } else if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                } else if (value_b === 'n/a') {\n                    return -1\n                } else if (value_a < value_b) {\n                    return 1\n                } else if (value_a > value_b) {\n                    return -1\n                }\n            }\n            return 0\n        })\n\n        return sorted_names_list\n    }\n\n    render() {\n\n        let self = this\n\n        let tickers_to_show = []\n        if (this.state.done) {\n            if (this.state.show_index) {\n                tickers_to_show = [...tickers_to_show, ...this.getIndicies()]\n            }\n            if (this.state.show_holdings) {\n                tickers_to_show = [...tickers_to_show, ...this.getHoldings()].filter(ticker => ticker !== 'cash')\n            }\n            if (this.state.show_cash) {\n                tickers_to_show.push('cash')\n            }\n            if (this.state.show_tagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getTagged()]\n            }\n            if (this.state.show_untagged) {\n                tickers_to_show = [...tickers_to_show, ...this.getUntagged()]\n            }\n        }\n        let unique_tickers_to_show = Array.from(new Set(tickers_to_show))\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = this.sortTickers(unique_tickers_to_show)\n\n        let row_data = {}\n        sorted_tickers.forEach(function(ticker) {\n\n            row_data[ticker] = {}\n\n            let tag_membership = []\n            Object.entries(self.state.allTags).forEach(function(tag_info) {\n                if (tag_info[1].includes(ticker)) {\n                    tag_membership.push(tag_info[0])\n                }\n            })\n            row_data[ticker]['tags'] = tag_membership\n\n            let special_classes = []\n            if (self.tickerIsIndex(ticker)) {\n                special_classes.push('index')\n            }\n            if (ticker === 'cash') {\n                special_classes.push('cash')\n            }\n            row_data[ticker]['special_classes'] = special_classes\n\n            if (self.state.allPositions.hasOwnProperty(ticker)) {\n                row_data[ticker]['start_date'] = self.state.allPositions[ticker].start_date\n                row_data[ticker]['basis'] = self.state.allPositions[ticker].basis\n                row_data[ticker]['current_shares'] = self.state.allPositions[ticker].current_shares\n                row_data[ticker]['realized_gains'] = self.state.allPositions[ticker].realized_gains\n            } else {\n                row_data[ticker]['start_date'] = 'n/a'\n                row_data[ticker]['basis'] = 'n/a'\n                row_data[ticker]['current_shares'] = 'n/a'\n                row_data[ticker]['realized_gains'] = 'n/a'\n            }\n\n            if (self.state.allWhatifs.hasOwnProperty(ticker)) {\n                row_data[ticker]['whatif'] = self.state.allWhatifs[ticker]\n\n            } else {\n                row_data[ticker]['whatif'] = null\n            }\n        })\n\n        let sorted_aggr_tickers = this.sortTickers(Object.keys(this.state.allTags).filter(ticker => !(ticker === 'untagged' && !this.state.allTags.untagged.length)))\n        let aggr_row_data = {}\n        sorted_aggr_tickers.forEach(function(aggr_ticker) {\n\n            let new_aggr_data = {}\n\n            new_aggr_data['symbol'] = aggr_ticker\n            new_aggr_data['tags'] = []\n            new_aggr_data['special_classes'] = ['aggregate']\n            new_aggr_data['basis'] = 'n/a'\n            new_aggr_data['start_date'] = 'n/a'\n            new_aggr_data['current_shares'] = 'n/a'\n            new_aggr_data['current_price'] = 'n/a'\n            new_aggr_data['current_value'] = self.state.aggrTotalValue[aggr_ticker]\n            new_aggr_data['change_pct'] = 'n/a'\n            new_aggr_data['volume'] = 'n/a'\n            new_aggr_data['basis'] = self.state.aggrBasis[aggr_ticker]\n            new_aggr_data['realized_gains'] = self.state.aggrRealized[aggr_ticker]\n            new_aggr_data['performance'] = self.state.aggrPerformance[aggr_ticker]\n            new_aggr_data['whatif'] = null\n\n            aggr_row_data[aggr_ticker] = new_aggr_data\n        })\n\n        let shown_column_names = this.state.shown_columns.map(column => column.name)\n        let all_columns_namesorted = JSON.parse(JSON.stringify(all_columns)).sort(function (a,b) {\n            let value_a = a.display_name\n            if (value_a.includes('year')) {\n                value_a = '0' + value_a\n            } else if (value_a.includes('month')) {\n                value_a = '00' + value_a\n            }\n            let value_b = b.display_name\n            if (value_b.includes('year')) {\n                value_b = '0' + value_b\n            } else if (value_b.includes('month')) {\n                value_b = '00' + value_b\n            }\n            if (value_a < value_b) {\n                return -1\n            } else if (value_a < value_b) {\n                return 1\n            } else {\n                return 0\n            }\n        })\n\n        const row_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included rows:</Popover.Title>\n                <Popover.Content>\n                <div id=\"row-control\">\n                    <form>\n                        <div className=\"switch_controls\">\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show holdings:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_holdings\" name=\"show_holdings\" type=\"checkbox\" checked={this.state.show_holdings} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_holdings\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show tagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_tagged\" name=\"show_tagged\" type=\"checkbox\" checked={this.state.show_tagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_tagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show untagged:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_untagged\" name=\"show_untagged\" type=\"checkbox\" checked={this.state.show_untagged} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_untagged\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show index:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_index\" name=\"show_index\" type=\"checkbox\" checked={this.state.show_index} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_index\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show cash:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_cash\" name=\"show_cash\" type=\"checkbox\" checked={this.state.show_cash} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_cash\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show aggregates (tags):</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_aggregates\" name=\"show_aggregates\" type=\"checkbox\" checked={this.state.show_aggregates} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_aggregates\" className=\"switch\"></label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const RowSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={row_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Rows</button>\n            </OverlayTrigger>\n        )\n        const column_popover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">included columns:</Popover.Title>\n                <Popover.Content>\n                <div id=\"column-control\">\n                    {all_columns_namesorted.map(column => (\n                        <span key={ column.name } onClick={ (e)=>this.onToggleShowColumn(column.name) } className={!shown_column_names.includes(column.name) ? 'strikethrough' : ''}>{ column.display_name }</span>\n                    ))}\n                </div>\n                </Popover.Content>\n            </Popover>\n        )\n        const ColumnSettings = () => (\n            <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={column_popover}>\n                <button className=\"btn btn-sm btn-secondary\" variant=\"success\">&#x2699; Columns</button>\n            </OverlayTrigger>\n        )\n        \n        const PopulateHeaderRow = ({is_aggregate, highlight_column}) => (\n            <GridHeaderRow\n                highlight_column={highlight_column}\n                is_aggregate={is_aggregate}\n                columns={this.state.shown_columns}\n                symbol_count_str={symbol_count}\n                sort_column={this.state.sort_column}\n                sort_triangle={sort_triangle}\n                whatif_format={this.state.whatif_format}\n                on_change_sort={this.onChangeSort}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n            />\n        )\n\n        const PopulateRow = ({row_data}) => (\n            <GridRow \n                key={row_data.row_name}\n                is_aggregate={row_data.is_aggregate}\n                row_name={row_data.row_name}\n                membership_set={row_data.membership_set}\n                columns={row_data.columns}\n                special_classes={row_data.special_classes}\n                current_price={row_data.current_price}\n                change_pct={row_data.change_pct}\n                volume={row_data.volume}\n                basis={row_data.basis}\n                start_date={row_data.start_date}\n                current_shares={row_data.current_shares}\n                current_value={row_data.current_value}\n                realized_gains={row_data.realized_gains}\n                risk_factor={row_data.risk_factor}\n                performance_numbers={row_data.performance_numbers}\n                show_only_achieved_performance={this.state.show_only_achieved_performance}\n                baseline={row_data.baseline}\n                style_realized_performance={row_data.style_realized_performance}\n                total_value={row_data.total_value}\n                total_basis={row_data.total_basis}\n                whatif={row_data.whatif}\n                whatif_format={this.state.whatif_format}\n                on_change_whatif_format={this.onChangeWhatifFormat}\n                on_remove_from_tag={row_data.on_remove_from_tag}\n                on_delete_ticker={row_data.on_delete_ticker}\n                on_delete_tag={row_data.on_delete_tag}\n                editing_row={this.state.editing_row}\n                current_edit_value={(typeof this.state.editing_row === 'string' && this.state.allRisk.hasOwnProperty(this.state.editing_row)) ? this.state.allRisk[this.state.editing_row].factor : ''}\n                on_edit_cell={row_data.on_edit_cell}\n                on_modify_risk_factor={row_data.on_modify_risk_factor}\n                on_escape_key={this.onEscapeKey}\n            />\n        )\n\n        let all_row_data = []\n        sorted_tickers.forEach(function(ticker) {\n            let new_row = {}\n            new_row['is_aggregate'] = false\n            new_row['row_name'] = ticker\n            new_row['membership_set'] = row_data[ticker]['tags']\n            new_row['columns'] = self.state.shown_columns\n            new_row['special_classes'] = row_data[ticker]['special_classes']\n            new_row['current_price'] = self.state.allCurrentQuotes[ticker].current_price\n            new_row['change_pct'] = self.state.allCurrentQuotes[ticker].change_pct\n            new_row['volume'] = self.state.allCurrentQuotes[ticker].volume\n            new_row['basis'] = row_data[ticker]['basis']\n            new_row['start_date'] = row_data[ticker]['start_date']\n            new_row['current_shares'] = row_data[ticker]['current_shares']\n            new_row['current_value'] = (new_row.current_price === 'n/a' || new_row.current_shares === 'n/a') ? 'n/a' : new_row.current_price * new_row.current_shares\n            new_row['realized_gains'] = row_data[ticker]['realized_gains']\n            new_row['risk_factor'] = (self.state.allRisk.hasOwnProperty(ticker) && ticker !== 'S&P500') ? self.state.allRisk[ticker].factor : null\n            new_row['performance_numbers'] = self.state.allPerformanceNumbers[ticker]\n            new_row['baseline'] = self.state.baseline\n            new_row['style_realized_performance'] = (Object.entries(self.state.allPositions).filter(position => position[0] !== 'cash' && position[1].current_shares).length) ? true : false\n            new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n            new_row['total_basis'] = self.state.aggrBasis['_everything_']\n            new_row['whatif'] = row_data[ticker]['whatif']\n            new_row['on_remove_from_tag'] = self.onRemoveFromTag\n            new_row['on_delete_ticker'] = self.onDeleteTicker\n            new_row['on_delete_tag'] = self.onDeleteTag\n            new_row['on_edit_cell'] = self.onEditCell\n            new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n            all_row_data.push(new_row)\n        })\n        if (this.state.show_aggregates) {\n            sorted_aggr_tickers.forEach(function(aggr_ticker) {\n                let new_row = {}\n                new_row['is_aggregate'] = true\n                new_row['row_name'] = aggr_ticker\n                new_row['membership_set'] = self.state.allTags[aggr_ticker]\n                new_row['columns'] = self.state.shown_columns\n                new_row['special_classes'] = aggr_row_data[aggr_ticker]['special_classes']\n                new_row['current_price'] = aggr_row_data[aggr_ticker]['current_price']\n                new_row['change_pct'] = aggr_row_data[aggr_ticker]['change_pct']\n                new_row['volume'] = aggr_row_data[aggr_ticker]['volume']\n                new_row['basis'] = self.state.aggrBasis[aggr_ticker]\n                new_row['start_date'] = aggr_row_data[aggr_ticker]['start_date']\n                new_row['current_shares'] = aggr_row_data[aggr_ticker]['current_shares']\n                new_row['current_value'] = aggr_row_data[aggr_ticker]['current_value']\n                new_row['realized_gains'] = aggr_row_data[aggr_ticker]['realized_gains']\n                new_row['risk_factor'] = 'n/a'\n                new_row['performance_numbers'] = aggr_row_data[aggr_ticker]['performance']\n                new_row['baseline'] = self.state.baseline\n                new_row['style_realized_performance'] = false\n                new_row['total_value'] = self.state.aggrTotalValue['_everything_']\n                new_row['total_basis'] = self.state.aggrBasis['_everything_']\n                new_row['whatif'] = aggr_row_data[aggr_ticker]['whatif']\n                new_row['on_remove_from_tag'] = self.onRemoveFromTag\n                new_row['on_delete_ticker'] = self.onDeleteTicker\n                new_row['on_delete_tag'] = self.onDeleteTag\n                new_row['on_edit_cell'] = self.onEditCell\n                new_row['on_modify_risk_factor'] = self.onModifyRiskFactor\n                all_row_data.push(new_row)\n            })\n        }\n\n        let symbol_count = this.populateSymbolCount(sorted_tickers.length) \n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <div id=\"left-side\">\n                        <div id=\"input-controls\">\n                            <InputForms\n                                all_stocks={this.state.allStocks}\n                                all_tags={this.state.allTags}\n                                all_current_quotes={this.state.allCurrentQuotes}\n                                all_positions={this.state.allPositions}\n                                all_transactions={this.state.allTransactions}\n                                show_holdings={this.state.show_holdings}\n                                show_tagged={this.state.show_tagged}\n                                show_untagged={this.state.show_untagged}\n                                show_cash={this.state.show_cash}\n                                get_balanceable_value={this.getBalanceableValue}\n                                on_new_tickers={this.onNewTickers}\n                                on_new_tags={this.onNewTags}\n                                on_delete_tag={this.onDeleteTag}\n                                on_delete_transaction={this.onDeleteTransaction}\n                                on_new_transaction={this.onNewTransaction}\n                                on_import_transactions={this.onImportTransactions}\n                                on_new_cash={this.onNewCash}\n                                create_message={this.createMessage}\n                                all_status_messages={this.state.all_status_messages}\n                                on_new_messages={this.onNewMessages}\n                                on_whatif_submit={this.onWhatifSubmit}\n                            />\n                        </div>\n                        <div id=\"last-status-messages\">\n                            {this.state.last_status_messages.filter( status_message => status_message.content.includes('ERROR')).map( (status_message,i) => (\n                                <div key={i + status_message.modified_at}>({status_message.modified_at}){status_message.content}</div>\n                            ))}\n                        </div>\n                    </div>\n                    <div id=\"view-controls\">\n                        <div id=\"baseline-control\">\n                            <label htmlFor=\"baseline\">Performance Baseline:</label>\n                            <select id=\"baseline\" name=\"baseline\" value={this.state.baseline.name} onChange={this.onInputChange}>\n                                <option value=\"zero_pct_gain\">0% gain</option>\n                                <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                            </select>\n                        </div>\n                        <div id=\"performance_controls\">\n                            <div className=\"switch_control\">\n                                <div className=\"switch_label\">show performance only if achieved:</div>\n                                <div className=\"switch_wrapper\">\n                                    <input id=\"show_only_achieved_performance\" name=\"show_only_achieved_performance\" type=\"checkbox\" checked={this.state.show_only_achieved_performance} onChange={this.onShowInputChange} />\n                                    <label htmlFor=\"show_only_achieved_performance\" className=\"switch\"></label>\n                                </div>\n                            </div>\n                        </div>\n                        <div id=\"page-settings\">\n                            <RowSettings />\n                            <ColumnSettings />\n                        </div>\n\n                    </div>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={this.state.balance_target_column} />\n                        <PopulateHeaderRow is_aggregate={false} highlight_column={null} />\n                    </thead>\n                    <tbody>\n                        {this.state.done && all_row_data.filter(row_data => !row_data.is_aggregate).map(row_data => (\n                            <PopulateRow key={row_data.row_name} row_data={row_data} />\n                        ))}\n                        <GridRowTotals\n                            columns={this.state.shown_columns}\n                            total_value={this.state.aggrTotalValue['_everything_']}\n                            total_basis={this.state.aggrBasis['_everything_']}\n                            total_performance={this.state.aggrPerformance['_everything_']}\n                        />\n                    </tbody>\n                </table>\n                {this.state.done && this.state.show_aggregates && (\n                    <table id=\"aggr-position-listing\" cellSpacing=\"0\">\n                        <thead>\n                            <PopulateHeaderRow is_aggregate={true} highlight_column={null} />\n                        </thead>\n                        <tbody>\n                            {this.state.done && all_row_data.filter(row_data => row_data.is_aggregate).map(row_data => (\n                                <PopulateRow key={row_data.row_name} row_data={row_data} />\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}