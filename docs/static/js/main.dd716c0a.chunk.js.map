{"version":3,"sources":["components/PositionRow.js","ComparingStocks.js","index.js"],"names":["PositionRow","current_quote","this","props","performance","performance_numbers","current_position","formatValue","prefix_for_number","value","suffix_for_number","num_decimals","isNaN","parseFloat","Math","round","pow","toFixed","current_shares","basis","realized_gains","row_classes","ticker_is_index","symbol","percent_gains","current_value","current_price","percent_value","total_value","className","change_pct","volume","short_change_pct","medium_change_pct","long_change_pct","React","Component","ComparingStocks","state","allIndiciesTickers","allIndiciesAliases","allStocks","allCurrentQuotes","allMonthlyQuotes","currentPositions","performance_baseline","show_which_stocks","sort_column","sort_dir_asc","done","tickerIsIndex","bind","convertNameForIndicies","getCurrentQuotes","debugGetCurrentQuotes","debugGetMonthlyQuotes","debugGetAllPositions","onBaselineChange","onShowStocksChange","changeSort","ticker","tickers","newQuotes","Promise","all","map","fetch","getQuoteUrl","then","res","json","forEach","item","idx","quoteResult","newQuote","slice","parseInt","setState","currentQuotes","require","sample_current_quotes","self","monthlyQuotes","sample_monthly_quotes","quoteMeta","Object","entries","price","newPositions","transactions","sample_transactions","keys","newPosition","reduce","total","current_val","outflows","inflows","event","target","new_sort_column","prevState","includes","indexOf","allPerformanceNumbers","newPerformanceNumbers","ticker_now","ticker_perf_short","ticker_perf_medium","ticker_perf_long","baseline_now","baseline_perf_short","baseline_perf_medium","baseline_perf_long","key","hasOwnProperty","quote_columns","holdings_columns","performance_columns","sort_triangle","String","fromCharCode","sorted_tickers","sort","a","b","value_a","value_b","positionvalue_a","positionvalue_b","basis_a","basis_b","filtered_sorted_tickers","filter","id","baseline","onChange","cellSpacing","onClick","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd716c0a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport class PositionRow extends React.Component {\n\n    render() {\n\n        const current_quote = this.props.current_quote\n        const performance = this.props.performance_numbers\n        let current_position = this.props.current_position\n        if (current_position == null) {\n            current_position = {\n                current_shares: 0,\n                basis: 'n/a',\n                realized_gains: 'n/a'\n            }\n        }\n\n        function formatValue(prefix_for_number, value, suffix_for_number, num_decimals) {\n            if (value === null || value === 'n/a') {\n                return '-'\n            } else if (isNaN(parseFloat(value))) {\n                return value\n            } else if (num_decimals >= 0) {\n                return prefix_for_number + (Math.round(Math.pow(10, num_decimals) * value) / Math.pow(10, num_decimals)).toFixed(num_decimals) + suffix_for_number\n            }\n        }\n\n        let row_classes = 'position-row' \n        if (this.props.ticker_is_index(current_quote.symbol)) {\n            row_classes += ' position-is-index'\n        }\n\n        let current_value = (current_position.current_shares) ? formatValue('', current_quote.current_price * current_position.current_shares, '', 0) : 'n/a'\n        let percent_value = (current_value !== 'n/a') ? formatValue('', current_value / this.props.total_value * 100, '', 1) : 'n/a'\n        let basis = (current_position.basis) ? current_position.basis : 'n/a'\n        let percent_gains\n        if (current_position.current_shares === 0) {\n            percent_gains = 'n/a'\n        } else if (current_position.basis >= current_value) {\n            percent_gains = 'losing'\n        } else if (current_value > current_position.basis) {\n            percent_gains = formatValue('', (1 - current_position.basis / current_value) * 100, '', 1)\n        }\n\n        return (\n            <tr className={ row_classes }>\n                <td className=\"position-cell\">{ formatValue('', current_quote.symbol, '') }</td>\n                <td className=\"position-cell\">{ formatValue('', current_position.current_shares, '', null) }</td>\n                <td className=\"position-cell\">{ formatValue('$', current_quote.current_price, '', null) }</td>\n                <td className=\"position-cell\">{ formatValue('$', current_value, '', null) }</td>\n                <td className=\"position-cell\">{ formatValue('', percent_value, '%', 1) }</td>\n                <td className=\"position-cell\">{ formatValue('$', basis, '', null) }</td>\n                <td className=\"position-cell\">{ formatValue('', percent_gains, '%', 1) }</td>\n                <td className=\"position-cell\">{ formatValue('$', current_position.realized_gains, '', null) }</td>\n                <td className=\"position-cell\">{ formatValue('', current_quote.change_pct, '%', 2) }</td>\n                <td className=\"position-cell\">{ formatValue('', current_quote.volume, '', null) }</td>\n                <td className=\"position-cell\">{ formatValue('$', current_quote.current_price * current_quote.volume / 1000000, '', 0) }</td>\n                <td className=\"position-cell\">{ formatValue('', performance.short_change_pct, '%', 1) }</td>\n                <td className=\"position-cell\">{ formatValue('', performance.medium_change_pct, '%', 1) }</td>\n                <td className=\"position-cell\">{ formatValue('', performance.long_change_pct, '%', 1) }</td>\n            </tr>\n        )\n    }\n\n}\n\nPositionRow.propTypes = {\n    current_quote: PropTypes.object.isRequired,\n    current_position: PropTypes.object,\n    performance_numbers: PropTypes.object.isRequired,\n    ticker_is_index: PropTypes.func.isRequired,\n}","import React from 'react'\nimport { PositionRow } from './components/PositionRow'\n\n\nexport class ComparingStocks extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allIndiciesTickers: [ 'INX' ],\n            allIndiciesAliases: [ 'S&P500' ],\n            allStocks: [ // FIXME: placeholder data for now\n                // 'MSFT', 'MSFT', 'MSFT' // FIXME: default to demo key and MSFT, not rate-limited\n                'V', 'MSFT', 'SBUX', 'BA', 'CVX', 'JNJ', 'CAT', 'DIS', 'HD', 'HSY', 'NFLX', 'TRV', 'PG'\n            ],\n            allCurrentQuotes: [],\n            allMonthlyQuotes: [],\n            currentPositions: [],\n            performance_baseline: 'sp500_pct_gain',\n            show_which_stocks: 'all_stocks',\n            sort_column: 'symbol',\n            sort_dir_asc: true,\n            done: false\n        }\n        this.tickerIsIndex = this.tickerIsIndex.bind(this)\n        this.convertNameForIndicies = this.convertNameForIndicies.bind(this)\n        this.getCurrentQuotes = this.getCurrentQuotes.bind(this)\n        this.debugGetCurrentQuotes = this.debugGetCurrentQuotes.bind(this)\n        this.debugGetMonthlyQuotes = this.debugGetMonthlyQuotes.bind(this)\n        this.debugGetAllPositions = this.debugGetAllPositions.bind(this)\n        this.onBaselineChange = this.onBaselineChange.bind(this)\n        this.onShowStocksChange = this.onShowStocksChange.bind(this)\n        this.changeSort = this.changeSort.bind(this)\n    }\n\n    async componentDidMount() {\n        // this.getCurrentQuotes(this.state.allStocks)\n        this.debugGetCurrentQuotes(this.state.allStocks)\n        this.debugGetMonthlyQuotes(this.state.allStocks)\n        this.debugGetAllPositions(this.state.allStocks)\n    }\n\n    getQuoteUrl(ticker) {\n        //let alpha_vantage_api_key = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY\n        let alpha_vantage_api_key = 'demo' // FIXME: default to demo key and MSFT, not rate-limited \n        let url_prefix = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol='\n        let url_suffix = '&apikey=' + alpha_vantage_api_key\n        return url_prefix + ticker + url_suffix\n    }\n\n    async getCurrentQuotes(tickers) {\n        let newQuotes = {}\n        const quotesApiResults = await Promise.all(tickers.map(ticker =>\n            fetch(this.getQuoteUrl(ticker))\n            .then(res => res.json())\n        ))\n        quotesApiResults.forEach(function(item, idx) {\n            let quoteResult = item['Global Quote']\n            let newQuote = {}\n            let ticker = quoteResult['01. symbol'] + idx\n            newQuote['symbol'] = this.convertNameForIndicies(ticker)\n            newQuote['current_price'] = (Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2)\n            newQuote['change'] = (Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2)\n            newQuote['change_pct'] = (Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2)\n            newQuote['volume'] = parseInt(quoteResult['06. volume'])\n            newQuotes[ticker] = newQuote\n        })\n        this.setState({ allCurrentQuotes: newQuotes })\n    }\n\n    // DEBUG: use hardcoded, local responses for development\n    debugGetCurrentQuotes(tickers) {\n        let newQuotes = {}\n        let currentQuotes = require('./api/sample_current_quotes.json').sample_current_quotes\n        let self = this\n        currentQuotes.forEach(function(item, idx) {\n            let quoteResult = item['Global Quote']\n            let newQuote = {}\n            let ticker = self.convertNameForIndicies(quoteResult['01. symbol'])\n            newQuote['symbol'] = ticker\n            newQuote['current_price'] = parseFloat((Math.round(100 * parseFloat(quoteResult['05. price'])) / 100).toFixed(2))\n            newQuote['change'] = parseFloat((Math.round(100 * parseFloat(quoteResult['09. change'])) / 100).toFixed(2))\n            newQuote['change_pct'] = parseFloat((Math.round(100 * parseFloat(quoteResult['10. change percent'].slice(0, -1))) / 100).toFixed(2))\n            newQuote['volume'] = parseInt(quoteResult['06. volume'])\n            newQuotes[ticker] = newQuote\n        })\n        this.setState({ allCurrentQuotes: newQuotes })\n    }\n\n    debugGetMonthlyQuotes(tickers) {\n        let newQuotes = {}\n        let monthlyQuotes = require('./api/sample_monthly_quotes.json').sample_monthly_quotes\n        let self = this\n        monthlyQuotes.forEach(function(item, idx) {\n            let quoteMeta = item['Meta Data']\n            let newQuote = {}\n            let ticker = self.convertNameForIndicies(quoteMeta['2. Symbol'])\n            newQuote['symbol'] = ticker\n            newQuote['monthly_prices'] = Object.entries(item['Monthly Adjusted Time Series']).map(price => parseFloat(price[1]['5. adjusted close']))\n            newQuotes[ticker] = newQuote\n        })\n        this.setState({ allMonthlyQuotes: newQuotes })\n    }\n\n    debugGetAllPositions() {\n        let newPositions = {}\n        let transactions = require('./api/sample_transactions.json').sample_transactions\n        Object.keys(transactions).forEach(function(ticker) {\n            let newPosition = {}\n            newPosition['symbol'] = ticker\n            let current_shares = transactions[ticker].reduce(function (total, current_val) {\n               return total + current_val['shares_added']\n            }, 0)\n            let outflows = transactions[ticker].reduce(function (total, current_val) {\n               return (current_val['dollars_spent'] > 0) ? total + current_val['dollars_spent'] : total\n            }, 0)\n            let inflows = -1 * transactions[ticker].reduce(function (total, current_val) {\n               return (current_val['dollars_spent'] < 0) ? total + current_val['dollars_spent'] : total\n            }, 0)\n            newPosition['current_shares'] = current_shares\n            newPosition['basis'] = Math.round((outflows > inflows) ? outflows - inflows : 0)\n            newPosition['realized_gains'] = Math.round((inflows > outflows || current_shares === 0) ? inflows - outflows : 0)\n            newPositions[ticker] = newPosition\n        })\n        this.setState({ currentPositions: newPositions })\n    }\n\n    onBaselineChange(event) {\n        this.setState({ performance_baseline: event.target.value })\n    }\n\n    onShowStocksChange(event) {\n        this.setState({ show_which_stocks: event.target.value })\n    }\n\n    changeSort(new_sort_column) {\n        if (new_sort_column === this.state.sort_column) {\n            this.setState(prevState => ({\n                sort_dir_asc: !prevState.sort_dir_asc\n            }))\n        }\n        this.setState({ sort_column: new_sort_column })\n    }\n\n    tickerIsIndex(ticker) {\n        return (this.state.allIndiciesTickers.includes(ticker) || this.state.allIndiciesAliases.includes(ticker)) ? true : false\n    }\n\n    convertNameForIndicies(ticker) {\n        let idx = this.state.allIndiciesTickers.indexOf(ticker)\n        if (idx !== -1) {\n            return this.state.allIndiciesAliases[idx]\n        } else {\n            return ticker\n        }\n    }\n\n    render() {\n\n        let self = this\n\n        let allPerformanceNumbers = {}\n        Object.keys(this.state.allCurrentQuotes).forEach(function(ticker) {\n            let newPerformanceNumbers = {}\n\n            let ticker_now = self.state.allMonthlyQuotes[ticker]['monthly_prices'][0]\n            let ticker_prev_short = self.state.allMonthlyQuotes[ticker]['monthly_prices'][5]\n            let ticker_prev_medium = self.state.allMonthlyQuotes[ticker]['monthly_prices'][11]\n            let ticker_prev_long = self.state.allMonthlyQuotes[ticker]['monthly_prices'][23]\n            let ticker_perf_short = (ticker_now - ticker_prev_short) / ticker_now\n            let ticker_perf_medium = (ticker_now - ticker_prev_medium) / ticker_now\n            let ticker_perf_long = (ticker_now - ticker_prev_long) / ticker_now\n\n            let baseline_now = self.state.allMonthlyQuotes['S&P500']['monthly_prices'][0]\n            let baseline_prev_short = self.state.allMonthlyQuotes['S&P500']['monthly_prices'][5]\n            let baseline_prev_medium = self.state.allMonthlyQuotes['S&P500']['monthly_prices'][11]\n            let baseline_prev_long = self.state.allMonthlyQuotes['S&P500']['monthly_prices'][23]\n            let baseline_perf_short = (baseline_now - baseline_prev_short) / baseline_now\n            let baseline_perf_medium = (baseline_now - baseline_prev_medium) / baseline_now\n            let baseline_perf_long = (baseline_now - baseline_prev_long) / baseline_now\n\n            if (self.state.performance_baseline === 'sp500_pct_gain') {\n                newPerformanceNumbers['short_change_pct'] = ticker_perf_short - baseline_perf_short\n                newPerformanceNumbers['medium_change_pct'] = ticker_perf_medium - baseline_perf_medium\n                newPerformanceNumbers['long_change_pct'] = ticker_perf_long - baseline_perf_long\n            } else {\n                newPerformanceNumbers['short_change_pct'] = ticker_perf_short\n                newPerformanceNumbers['medium_change_pct'] = ticker_perf_medium\n                newPerformanceNumbers['long_change_pct'] = ticker_perf_long\n            }\n\n            Object.keys(newPerformanceNumbers).forEach(function(key) {\n                newPerformanceNumbers[key] = parseFloat((Math.round(10 * 100 * newPerformanceNumbers[key]) / 10).toFixed(1))\n            })\n            allPerformanceNumbers[ticker] = newPerformanceNumbers\n        })\n\n        let total_value = Object.entries(this.state.currentPositions).reduce(function (total, current_val) {\n            if (self.state.allCurrentQuotes.hasOwnProperty(current_val[0])) {\n                return total + current_val[1]['current_shares'] * self.state.allCurrentQuotes[current_val[0]]['current_price']\n            } else {\n                return total\n            }\n        }, 0)\n\n        let sort_column = self.state.sort_column\n        let quote_columns = ['symbol', 'current_price', 'change_pct', 'volume', 'dollar_volume']\n        let holdings_columns = ['current_shares', 'current_value', 'percent_value', 'basis', 'realized_gains', 'percent_gains']\n        let performance_columns = ['short_change_pct', 'medium_change_pct', 'long_change_pct']\n        let sort_triangle = (this.state.sort_dir_asc === true) ? String.fromCharCode(9650) : String.fromCharCode(9660)\n        let sorted_tickers = Object.keys(this.state.allCurrentQuotes).sort(function(a, b) {\n            let value_a, value_b\n            if (quote_columns.includes(sort_column)) {\n                if (self.state.allCurrentQuotes.hasOwnProperty(a) && self.state.allCurrentQuotes.hasOwnProperty(b)) {\n                    if (sort_column === 'dollar_volume') {\n                        value_a = self.state.allCurrentQuotes[a]['current_price'] * self.state.allCurrentQuotes[a]['volume']\n                        value_b = self.state.allCurrentQuotes[b]['current_price'] * self.state.allCurrentQuotes[b]['volume']\n                    } else {\n                        value_a = self.state.allCurrentQuotes[a][sort_column]\n                        value_b = self.state.allCurrentQuotes[b][sort_column]\n                    }\n                } \n            } else if (performance_columns.includes(sort_column)) {\n                if (self.state.allMonthlyQuotes.hasOwnProperty(a) && self.state.allMonthlyQuotes.hasOwnProperty(b)) {\n                    value_a = allPerformanceNumbers[a][sort_column]\n                    value_b = allPerformanceNumbers[b][sort_column]\n                }\n            } else if (holdings_columns.includes(sort_column)) {\n                let positionvalue_a, positionvalue_b\n                if (self.state.currentPositions.hasOwnProperty(a)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_gains') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(a) && self.state.currentPositions[a]['current_shares']) {\n                            positionvalue_a = self.state.currentPositions[a]['current_shares'] * self.state.allCurrentQuotes[a]['current_price']\n                            if (sort_column === 'percent_gains') {\n                                let basis_a = self.state.currentPositions[a]['basis']\n                                value_a = (basis_a >= 0) ? 1 - (basis_a / positionvalue_a) : 'losing'\n                            } else {\n                                value_a = positionvalue_a\n                            }\n                        } else {\n                            value_a = 'n/a'\n                        }\n                    } else if (self.state.currentPositions[a]['current_shares'] || sort_column === 'realized_gains') {\n                        value_a = self.state.currentPositions[a][sort_column]\n                    } else {\n                        value_a = 'n/a'\n                    }\n                } else {\n                    value_a = 'n/a'\n                }\n                if (self.state.currentPositions.hasOwnProperty(b)) {\n                    if (sort_column === 'current_value' || sort_column === 'percent_value' || sort_column === 'percent_gains') {\n                        if (self.state.allCurrentQuotes.hasOwnProperty(b) && self.state.currentPositions[b]['current_shares']) {\n                            positionvalue_b = self.state.currentPositions[b]['current_shares'] * self.state.allCurrentQuotes[b]['current_price']\n                            if (sort_column === 'percent_gains' && positionvalue_b !== 0) {\n                                let basis_b = self.state.currentPositions[b]['basis']\n                                value_b = (basis_b >= 0) ? 1 - (basis_b / positionvalue_b) : 'losing'\n                            } else {\n                                value_b = positionvalue_b\n                            }\n                        } else {\n                            value_b = 'n/a'\n                        }\n                    } else if (self.state.currentPositions[b]['current_shares'] || sort_column === 'realized_gains') {\n                        value_b = self.state.currentPositions[b][sort_column]\n                    } else {\n                        value_b = 'n/a'\n                    }\n                } else {\n                    value_b = 'n/a'\n                }\n            } else {\n                return 0\n            }\n                \n            if (value_a === value_b) {\n                return 0\n            }\n            if (self.state.sort_dir_asc === true) {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return -1\n                }\n                if (value_a > value_b) {\n                    return 1\n                }\n            } else {\n                if (value_a === 'n/a') {\n                    return 1\n                }\n                if (value_b === 'n/a') {\n                    return -1\n                }\n                if (value_a < value_b) {\n                    return 1\n                }\n                if (value_a > value_b) {\n                    return -1\n                }\n            }\n        })\n        let filtered_sorted_tickers = [...sorted_tickers]\n        if (this.state.show_which_stocks === 'holdings_only') {\n            filtered_sorted_tickers = sorted_tickers.filter(ticker => this.state.currentPositions.hasOwnProperty(ticker) && this.state.currentPositions[ticker]['current_shares'])\n        }\n\n        return (\n            <div id=\"page-wrapper\">\n                <div id=\"page-controls\">\n                    <label>\n                        Performance Baseline:\n                        <select value={this.state.baseline} onChange={this.onBaselineChange}>\n                            <option value=\"zero_pct_gain\">0% gain</option>\n                            <option value=\"sp500_pct_gain\">SP&amp;500 Index</option>\n                        </select>\n                    </label>\n                    <label>\n                        Show Stocks:\n                        <select value={this.state.show_which_stocks} onChange={this.onShowStocksChange}>\n                            <option value=\"holdings_only\">holdings only</option>\n                            <option value=\"all_stocks\">all stocks</option>\n                        </select>\n                    </label>\n                </div>\n                <table id=\"position-listing\" cellSpacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th onClick={ (e) => this.changeSort('symbol') }>Symbol{ sort_column === 'symbol' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('current_shares') }>Shares{ sort_column === 'current_shares' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('current_price') }>Price{ sort_column === 'current_price' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('current_value') }>Value{ sort_column === 'current_value' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('percent_value') }>Pct Value{ sort_column === 'percent_value' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('basis') }>Basis{ sort_column === 'basis' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('percent_gains') }>Pct Gains{ sort_column === 'percent_gains' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('realized_gains') }>Realized{ sort_column === 'realized_gains' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('change_pct') }>Change{ sort_column === 'change_pct' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('volume') }>Volume{ sort_column === 'volume' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('dollar_volume') }>Dollar Vol (M){ sort_column === 'dollar_volume' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('short_change_pct') }>6-month{ sort_column === 'short_change_pct' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('medium_change_pct') }>1-year{ sort_column === 'medium_change_pct' ? sort_triangle : '' }</th>\n                            <th onClick={ (e) => this.changeSort('long_change_pct') }>2-year{ sort_column === 'long_change_pct' ? sort_triangle : '' }</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {filtered_sorted_tickers.map(ticker => (\n                            <PositionRow \n                                key={ticker}\n                                current_position={this.state.currentPositions[ticker]}\n                                current_quote={this.state.allCurrentQuotes[ticker]}\n                                performance_numbers={allPerformanceNumbers[ticker]}\n                                total_value = {total_value}\n                                ticker_is_index={this.tickerIsIndex}\n                        />))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ComparingStocks } from './ComparingStocks'\n\nReactDOM.render(<ComparingStocks />, document.getElementById('root'));\n"],"sourceRoot":""}